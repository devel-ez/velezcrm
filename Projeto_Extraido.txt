### Arquivo: C:\xampp\htdocs\velezcrm\.htaccess ###

   1: RewriteEngine On
   2: RewriteBase /velezcrm/
   3: 
   4: # Certifica-se de que a requisição não tenta acessar um arquivo ou diretório real
   5: RewriteCond %{REQUEST_FILENAME} !-f
   6: RewriteCond %{REQUEST_FILENAME} !-d
   7: 
   8: # Redireciona tudo para index.php
   9: RewriteRule ^(.*)$ index.php?url=$1 [QSA,L]
  10: 

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\.windsurfrules ###


----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\composer.json ###

   1: {
   2:     "name": "velez/crm",
   3:     "description": "Sistema CRM Velez",
   4:     "type": "project",
   5:     "autoload": {
   6:         "psr-4": {
   7:             "App\\": "app/"
   8:         }
   9:     },
  10:     "require": {
  11:         "php": ">=7.4"
  12:     }
  13: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\composer.lock ###

   1: {
   2:     "_readme": [
   3:         "This file locks the dependencies of your project to a known state",
   4:         "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
   5:         "This file is @generated automatically"
   6:     ],
   7:     "content-hash": "513b8681c401a11e31a9494297b2e4a9",
   8:     "packages": [],
   9:     "packages-dev": [],
  10:     "aliases": [],
  11:     "minimum-stability": "stable",
  12:     "stability-flags": {},
  13:     "prefer-stable": false,
  14:     "prefer-lowest": false,
  15:     "platform": {
  16:         "php": ">=7.4"
  17:     },
  18:     "platform-dev": {},
  19:     "plugin-api-version": "2.6.0"
  20: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\index.php ###

   1: <?php
   2: session_start();
   3: require_once __DIR__ . '/config/config.php'; // Carrega as configurações do projeto
   4: require_once __DIR__ . '/vendor/autoload.php';
   5: require_once __DIR__ . '/app/Router.php';
   6: 
   7: // Executa o roteador para despachar a requisição
   8: $router->dispatch();

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\README.md ###

   1: # VelezCRM 🗂️
   2: 
   3: Bem-vindo ao VelezCRM! 🎉
   4: 
   5: Este é um sistema de cadastro de clientes desenvolvido em PHP e MySQL, projetado para gerenciar informações de clientes de forma eficiente e segura. 🔒
   6: 
   7: ## Funcionalidades 🚀
   8: - Cadastro de clientes 📝
   9: - Edição e exclusão de registros ✏️❌
  10: - Validação de dados para evitar duplicatas 🔍
  11: - Interface amigável e responsiva 📱💻
  12: 
  13: ## Tecnologias Utilizadas 🛠️
  14: - PHP 💻
  15: - MySQL 🗄️
  16: - JavaScript 📜
  17: - HTML/CSS 🎨
  18: 
  19: ## Como Usar 📖
  20: 1. Clone o repositório: `git clone https://github.com/devel-ez/velezcrm`
  21: 2. Navegue até a pasta do projeto: `cd velezcrm`
  22: 3. Configure seu ambiente local com XAMPP ou similar.
  23: 4. Acesse o sistema pelo navegador.
  24: 
  25: ## Como Instalar e Configurar 📦
  26: 
  27: Para instalar o projeto em outro computador e garantir que as tabelas sejam migradas automaticamente para o MySQL, siga estes passos:
  28: 
  29: 1. **Clone o Repositório**:
  30:    Use o comando:
  31:    ```bash
  32:    git clone https://github.com/devel-ez/velezcrm.git
  33:    ```
  34: 
  35: 2. **Instale as Dependências**:
  36:    Se você estiver usando Composer, execute:
  37:    ```bash
  38:    composer install
  39:    ```
  40: 
  41: 3. **Configuração do Banco de Dados**:
  42:    - Certifique-se de configurar o arquivo de configuração do banco de dados (geralmente `config.php` ou similar) com as credenciais do novo ambiente.
  43: 
  44: 4. **Executar as Migrações**:
  45:    Para criar as tabelas no banco de dados, você deve executar as migrações. Se você estiver usando um framework como Laravel, o comando seria:
  46:    ```bash
  47:    php artisan migrate
  48:    ```
  49:    Se estiver usando outro sistema, verifique a documentação para o comando correspondente.
  50: 
  51: 5. **Popule o Banco de Dados (se necessário)**:
  52:    Se houver dados iniciais ou seeders, você também pode precisar executar:
  53:    ```bash
  54:    php artisan db:seed
  55:    ```
  56: 
  57: Após seguir esses passos, as tabelas devem ser criadas automaticamente no MySQL.
  58: 
  59: ## Contribuições 🤝
  60: Contribuições são bem-vindas! Se você deseja colaborar, sinta-se à vontade para abrir um pull request.
  61: 
  62: ## Licença 📄
  63: Este projeto é licenciado sob a MIT License.
  64: 
  65: ## Contato 📫
  66: Para dúvidas ou sugestões, entre em contato: [seu-email@example.com](mailto:seu-email@example.com)

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\app\Router.php ###

   1: <?php
   2: class Router
   3: {
   4:     private $routes = [];
   5: 
   6:     public function get($path, $callback)
   7:     {
   8:         $this->routes['GET'][$path] = $callback;
   9:     }
  10: 
  11:     public function post($path, $callback)
  12:     {
  13:         $this->routes['POST'][$path] = $callback;
  14:     }
  15: 
  16:     private function matchRoute($requestPath, $routePath)
  17:     {
  18:         // Converte o padrão da rota em uma expressão regular
  19:         $pattern = preg_replace('/\{([a-zA-Z0-9_]+)\}/', '(?P<$1>[^/]+)', $routePath);
  20:         $pattern = '#^' . $pattern . '$#';
  21: 
  22:         if (preg_match($pattern, $requestPath, $matches)) {
  23:             // Remove as chaves numéricas do array de matches
  24:             return array_filter($matches, 'is_string', ARRAY_FILTER_USE_KEY);
  25:         }
  26: 
  27:         return false;
  28:     }
  29: 
  30:     public function dispatch()
  31:     {
  32:         $method = $_SERVER['REQUEST_METHOD'];
  33:         $path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);
  34: 
  35:         // Remove "/velezcrm/index.php" e "/velezcrm/public" para evitar erros
  36:         $basePath = '/velezcrm';
  37:         $path = str_replace([$basePath . '/index.php', $basePath . '/public', $basePath], '', $path);
  38:         $path = $path ?: '/';
  39: 
  40:         error_log("Método: " . $method);
  41:         error_log("Caminho requisitado: " . $path);
  42: 
  43:         // Procura por uma rota correspondente
  44:         foreach ($this->routes[$method] ?? [] as $routePath => $callback) {
  45:             error_log("Tentando corresponder rota: " . $routePath);
  46:             $params = $this->matchRoute($path, $routePath);
  47: 
  48:             if ($params !== false) {
  49:                 error_log("Rota encontrada: " . $routePath);
  50:                 if (is_string($callback)) {
  51:                     list($controller, $method) = explode('@', $callback);
  52:                     $controllerClass = "App\\Controllers\\{$controller}";
  53:                     $controllerFile = __DIR__ . '/Controllers/' . $controller . '.php';
  54: 
  55:                     if (file_exists($controllerFile)) {
  56:                         require_once $controllerFile;
  57: 
  58:                         if (class_exists($controllerClass)) {
  59:                             $controller = new $controllerClass();
  60: 
  61:                             if (method_exists($controller, $method)) {
  62:                                 unset($params[0]);
  63:                                 call_user_func_array([$controller, $method], $params);
  64:                                 return;
  65:                             }
  66:                         }
  67:                     }
  68:                 }
  69:             }
  70:         }
  71: 
  72:         // Se nenhuma rota for encontrada
  73:         error_log("Nenhuma rota encontrada para: " . $path);
  74:         header("HTTP/1.0 404 Not Found");
  75:         echo "Página não encontrada";
  76:         exit();
  77:     }
  78: }
  79: 
  80: // Instancia o Router
  81: $router = new Router();
  82: 
  83: // Rotas do Dashboard
  84: $router->get('/', 'DashboardController@index');
  85: $router->get('/dashboard', 'DashboardController@index');
  86: 
  87: 
  88: // Rotas de Clientes
  89: $router->get('/clientes', 'ClienteController@index');
  90: $router->get('/clientes/novo', 'ClienteController@novo');
  91: $router->post('/clientes/salvar', 'ClienteController@salvar');
  92: $router->get('/clientes/editar/{id}', 'ClienteController@editar');
  93: $router->get('/clientes/excluir/{id}', 'ClienteController@excluir');
  94: $router->get('/clientes/visualizar/{id}', 'ClienteController@visualizar');
  95: 
  96: 
  97: // Rotas de Serviços
  98: $router->get('/servicos', 'ServicoController@index');
  99: $router->get('/servicos/novo', 'ServicoController@novo');
 100: $router->post('/servicos/salvar', 'ServicoController@salvar');
 101: $router->get('/servicos/editar/{id}', 'ServicoController@editar');
 102: $router->get('/servicos/excluir/{id}', 'ServicoController@excluir');
 103: 
 104: // Rotas de Contratos
 105: $router->get('/contratos', 'ContratoController@index');
 106: $router->get('/contratos/criar', 'ContratoController@criar');
 107: $router->post('/contratos/salvar', 'ContratoController@salvar');
 108: $router->get('/contratos/editar/{id}', 'ContratoController@editar');
 109: $router->get('/contratos/excluir/{id}', 'ContratoController@excluir');
 110: 
 111: // Rotas do Kanban
 112: $router->get('/kanban', 'KanbanController@index');
 113: $router->get('/kanban/getCards/{id}', 'KanbanController@getCards');
 114: $router->post('/kanban/createCard', 'KanbanController@createCard');
 115: $router->post('/kanban/updateCardStatus', 'KanbanController@updateCardStatus');
 116: 
 117: //Rotas de Login
 118: $router->get('/login', 'AuthController@login');
 119: $router->post('/login', 'AuthController@login');
 120: $router->get('/logout', 'AuthController@logout');

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\app\Controllers\AuthController.php ###

   1: <?php
   2: 
   3: namespace App\Controllers;
   4: 
   5: use App\Models\User;
   6: 
   7: class AuthController extends Controller
   8: {
   9:     private $userModel;
  10: 
  11:     public function __construct()
  12:     {
  13:         parent::__construct();
  14:         $this->userModel = new User();
  15:     }
  16: 
  17:     public function login()
  18:     {
  19:         if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  20:             $email = trim($_POST['email']);
  21:             $senha = trim($_POST['senha']);
  22: 
  23:             $user = $this->userModel->getUserByEmail($email);
  24: 
  25:             if ($user && password_verify($senha, $user['senha'])) {
  26:                 $_SESSION['user_id'] = $user['id'];
  27:                 $_SESSION['user_name'] = $user['nome'];
  28:                 header("Location: " . BASE_URL . "/");
  29:                 exit;
  30:             } else {
  31:                 $this->setFlashMessage('danger', 'Credenciais inválidas.');
  32:                 header("Location: " . BASE_URL . "/login");
  33:                 exit;
  34:             }
  35:         } else {
  36:             // Renderiza a view de login SEM o layout principal
  37:             require_once __DIR__ . '/../../views/auth/login.php';
  38:         }
  39:     }
  40: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\app\Controllers\ClienteController.php ###

   1: <?php
   2: 
   3: namespace App\Controllers;
   4: 
   5: use App\Models\Cliente;
   6: use App\Middleware\AuthMiddleware;
   7: 
   8: class ClienteController extends Controller
   9: {
  10:     private $clienteModel;
  11: 
  12:     public function __construct()
  13:     {
  14:         AuthMiddleware::check();
  15:         parent::__construct();
  16:         $this->clienteModel = new Cliente();
  17:     }
  18: 
  19:     public function index()
  20:     {
  21:         try {
  22:             $clientes = $this->clienteModel->listarTodos();
  23:             $this->render('clientes/index', ['clientes' => $clientes]);
  24:         } catch (\Exception $e) {
  25:             $this->setFlashMessage('danger', 'Erro ao listar clientes: ' . $e->getMessage());
  26:             $this->redirect('clientes');
  27:         }
  28:     }
  29: 
  30:     public function novo()
  31:     {
  32:         $this->render('clientes/form');
  33:     }
  34: 
  35:     public function salvar()
  36:     {
  37:         try {
  38:             // Validação dos campos obrigatórios
  39:             if (empty($_POST['nome']) || empty($_POST['telefone'])) {
  40:                 throw new \Exception('Nome e telefone são campos obrigatórios.');
  41:             }
  42: 
  43:             // Limpa e formata os dados
  44:             $dados = [
  45:                 'nome' => trim($_POST['nome']),
  46:                 'telefone' => preg_replace('/[^0-9]/', '', $_POST['telefone']),
  47:                 'empresa' => isset($_POST['empresa']) ? trim($_POST['empresa']) : null,
  48:                 'cnpj' => isset($_POST['cnpj']) ? preg_replace('/[^0-9]/', '', $_POST['cnpj']) : null,
  49:                 'login_hospedagem' => isset($_POST['login_hospedagem']) ? trim($_POST['login_hospedagem']) : null,
  50:                 'senha_hospedagem' => isset($_POST['senha_hospedagem']) ? trim($_POST['senha_hospedagem']) : null,
  51:                 'login_wp' => isset($_POST['login_wp']) ? trim($_POST['login_wp']) : null,
  52:                 'senha_wp' => isset($_POST['senha_wp']) ? trim($_POST['senha_wp']) : null,
  53:                 'observacoes' => isset($_POST['observacoes']) ? trim($_POST['observacoes']) : null,
  54:                 'status' => isset($_POST['status']) ? trim($_POST['status']) : 'ativo'
  55:             ];
  56: 
  57:             // Se tem CNPJ, valida se já existe
  58:             if (!empty($dados['cnpj'])) {
  59:                 $id = isset($_POST['id']) ? $_POST['id'] : null;
  60:                 if ($this->clienteModel->existeCNPJ($dados['cnpj'], $id)) {
  61:                     throw new \Exception('Já existe um cliente cadastrado com este CNPJ.');
  62:                 }
  63:             }
  64: 
  65:             // Atualiza ou cria novo cliente
  66:             if (isset($_POST['id']) && !empty($_POST['id'])) {
  67:                 $sucesso = $this->clienteModel->atualizar($_POST['id'], $dados);
  68:                 $mensagem = 'Cliente atualizado com sucesso!';
  69:             } else {
  70:                 $sucesso = $this->clienteModel->criar($dados);
  71:                 $mensagem = 'Cliente cadastrado com sucesso!';
  72:             }
  73: 
  74:             if ($sucesso) {
  75:                 $this->setFlashMessage('success', $mensagem);
  76:                 $this->redirect('clientes');
  77:             } else {
  78:                 throw new \Exception('Erro ao salvar o cliente. Por favor, tente novamente.');
  79:             }
  80:         } catch (\Exception $e) {
  81:             error_log("Erro ao salvar cliente: " . $e->getMessage());
  82:             $this->setFlashMessage('danger', $e->getMessage());
  83: 
  84:             // Se for edição, volta para o formulário de edição
  85:             if (isset($_POST['id'])) {
  86:                 $this->redirect('clientes/editar/' . $_POST['id']);
  87:             } else {
  88:                 // Se for novo, volta para o formulário de novo
  89:                 $this->redirect('clientes/novo');
  90:             }
  91:         }
  92:     }
  93: 
  94:     public function editar($id)
  95:     {
  96:         try {
  97:             $cliente = $this->clienteModel->buscarPorId($id);
  98:             if (!$cliente) {
  99:                 throw new \Exception('Cliente não encontrado.');
 100:             }
 101:             $this->render('clientes/form', ['cliente' => $cliente]);
 102:         } catch (\Exception $e) {
 103:             $this->setFlashMessage('danger', $e->getMessage());
 104:             $this->redirect('clientes');
 105:         }
 106:     }
 107: 
 108:     public function excluir($id)
 109:     {
 110:         try {
 111:             if ($this->clienteModel->excluir($id)) {
 112:                 $this->setFlashMessage('success', 'Cliente excluído com sucesso!');
 113:             } else {
 114:                 throw new \Exception('Erro ao excluir o cliente.');
 115:             }
 116:         } catch (\Exception $e) {
 117:             $this->setFlashMessage('danger', $e->getMessage());
 118:         }
 119:         $this->redirect('clientes');
 120:     }
 121: 
 122:     public function visualizar($id)
 123:     {
 124:         try {
 125:             $cliente = $this->clienteModel->buscarPorId($id);
 126: 
 127:             if (!$cliente) {
 128:                 throw new \Exception("Cliente não encontrado.");
 129:             }
 130: 
 131:             $this->render('clientes/visualizar', ['cliente' => $cliente]);
 132:         } catch (\Exception $e) {
 133:             $this->setFlashMessage('danger', $e->getMessage());
 134:             $this->redirect('clientes');
 135:         }
 136:     }
 137: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\app\Controllers\ContratoController.php ###

   1: <?php
   2: 
   3: namespace App\Controllers;
   4: 
   5: use App\Models\Contrato;
   6: use App\Models\Cliente;
   7: use App\Models\Servico;
   8: use App\Models\Database; // Adicione essa linha para importar a classe Database
   9: use App\Middleware\AuthMiddleware;
  10: 
  11: class ContratoController extends Controller
  12: {
  13:     private $contratoModel;
  14:     private $clienteModel;
  15:     private $servicoModel;
  16:     private $db; // Adicione essa linha para declarar a propriedade $db
  17: 
  18:     public function __construct()
  19:     {
  20:         AuthMiddleware::check();
  21:         parent::__construct();
  22:         $this->contratoModel = new Contrato();
  23:         $this->clienteModel = new Cliente();
  24:         $this->servicoModel = new Servico();
  25:         $this->db = Database::getInstance(); // Use o método getInstance para obter a conexão
  26:     }
  27: 
  28:     public function index()
  29:     {
  30:         try {
  31:             $contratos = $this->contratoModel->listarTodos();
  32:             $this->render('contratos/index', ['contratos' => $contratos]);
  33:         } catch (\Exception $e) {
  34:             $this->setFlashMessage('danger', 'Erro ao listar contratos: ' . $e->getMessage());
  35:             $this->render('contratos/index', ['contratos' => []]);
  36:         }
  37:     }
  38: 
  39:     public function novo()
  40:     {
  41:         try {
  42:             $clientes = $this->clienteModel->listarTodos();
  43:             $servicos = $this->servicoModel->listarTodos();
  44:             $this->render('contratos/form', [
  45:                 'clientes' => $clientes,
  46:                 'servicos' => $servicos
  47:             ]);
  48:         } catch (\Exception $e) {
  49:             $this->setFlashMessage('danger', 'Erro ao carregar formulário: ' . $e->getMessage());
  50:             $this->redirect('/');
  51:         }
  52:     }
  53: 
  54:     public function salvar()
  55:     {
  56:         try {
  57:             // Validação dos campos obrigatórios
  58:             $camposObrigatorios = ['titulo', 'cliente_id', 'objeto', 'data_validade'];
  59:             foreach ($camposObrigatorios as $campo) {
  60:                 if (empty($_POST[$campo])) {
  61:                     throw new \Exception("O campo " . str_replace('_', ' ', $campo) . " é obrigatório.");
  62:                 }
  63:             }
  64: 
  65:             // Validação da data de validade
  66:             $dataValidade = strtotime($_POST['data_validade']);
  67:             if ($dataValidade === false) {
  68:                 throw new \Exception("Data de validade inválida.");
  69:             }
  70: 
  71:             // Processa os valores personalizados
  72:             $valoresPersonalizados = [];
  73:             if (!empty($_POST['servicos']) && !empty($_POST['valor_personalizado'])) {
  74:                 foreach ($_POST['servicos'] as $servicoId) {
  75:                     if (isset($_POST['valor_personalizado'][$servicoId])) {
  76:                         $valor = $_POST['valor_personalizado'][$servicoId];
  77:                         $valor = str_replace('.', '', $valor); // Remove pontos de milhar
  78:                         $valor = str_replace(',', '.', $valor); // Converte vírgula em ponto
  79:                         $valoresPersonalizados[$servicoId] = floatval($valor);
  80:                     }
  81:                 }
  82:             }
  83: 
  84:             // Formata os dados
  85:             $dados = [
  86:                 'titulo' => trim($_POST['titulo']),
  87:                 'cliente_id' => (int)$_POST['cliente_id'],
  88:                 'objeto' => trim($_POST['objeto']),
  89:                 'clausulas' => trim($_POST['clausulas'] ?? ''),
  90:                 'data_validade' => $_POST['data_validade'],
  91:                 'status' => 'ativo'
  92:             ];
  93: 
  94:             // Se for uma edição
  95:             if (!empty($_POST['id'])) {
  96:                 $dados['id'] = (int)$_POST['id'];
  97: 
  98:                 // Adiciona os serviços e valores personalizados aos dados
  99:                 if (isset($_POST['servicos'])) {
 100:                     $dados['servicos'] = $_POST['servicos'];
 101:                 }
 102:                 if (isset($_POST['valor_personalizado'])) {
 103:                     $dados['valor_personalizado'] = $valoresPersonalizados;
 104:                 }
 105: 
 106:                 $this->contratoModel->atualizar($dados['id'], $dados);
 107:                 $this->setFlashMessage('success', 'Contrato atualizado com sucesso!');
 108:             } else {
 109:                 // Adiciona os serviços e valores personalizados aos dados
 110:                 if (isset($_POST['servicos'])) {
 111:                     $dados['servicos'] = $_POST['servicos'];
 112:                 }
 113:                 if (isset($_POST['valor_personalizado'])) {
 114:                     $dados['valor_personalizado'] = $valoresPersonalizados;
 115:                 }
 116: 
 117:                 // Novo contrato
 118:                 $id = $this->contratoModel->criar($dados);
 119:                 error_log("Novo contrato inserido com ID: " . $id);
 120: 
 121:                 // Gera o número do contrato (ID/ANO)
 122:                 $numeroContrato = $id . '/' . date('Y');
 123:                 $this->contratoModel->atualizarNumeroContrato($id, $numeroContrato);
 124: 
 125:                 $this->setFlashMessage('success', 'Contrato criado com sucesso!');
 126:             }
 127: 
 128:             error_log("Contrato salvo com sucesso. Redirecionando para /contratos");
 129:             $this->redirect('/contratos');
 130:         } catch (\Exception $e) {
 131:             error_log("Erro ao salvar contrato: " . $e->getMessage());
 132:             error_log("POST data: " . print_r($_POST, true));
 133:             $this->setFlashMessage('danger', 'Erro ao salvar contrato: ' . $e->getMessage());
 134:             $this->redirect('/contratos/novo');
 135:         }
 136:     }
 137: 
 138:     /**
 139:      * Busca os serviços associados a um contrato
 140:      * @param int $contratoId
 141:      * @return array
 142:      */
 143:     public function buscarServicosPorContrato($contratoId)
 144:     {
 145:         try {
 146:             $sql = "SELECT s.*, cs.valor_personalizado 
 147:                 FROM servicos s 
 148:                 INNER JOIN contratos_servicos cs ON s.id = cs.servico_id 
 149:                 WHERE cs.contrato_id = :contrato_id";
 150:             $stmt = $this->db->getConnection()->prepare($sql);
 151:             $stmt->execute([':contrato_id' => $contratoId]);
 152:             return $stmt->fetchAll();
 153:         } catch (\Exception $e) {
 154:             throw $e;
 155:         }
 156:     }
 157: 
 158:     public function editar($id)
 159:     {
 160:         try {
 161:             $contrato = $this->contratoModel->buscarPorId($id);
 162:             if (!$contrato) {
 163:                 throw new \Exception('Contrato não encontrado.');
 164:             }
 165: 
 166:             $clientes = $this->clienteModel->listarTodos();
 167:             $servicosDisponiveis = $this->servicoModel->listarTodos();
 168: 
 169:             // Recupera os serviços associados ao contrato
 170:             $servicosContrato = $this->contratoModel->buscarServicosPorContrato($id);
 171: 
 172:             // Recupera os valores personalizados do contrato
 173:             $valoresPersonalizados = $this->contratoModel->buscarValoresPersonalizadosPorContrato($id);
 174: 
 175:             // Passa os dados para a view
 176:             return $this->render('contratos/form', [
 177:                 'contrato' => $contrato,
 178:                 'clientes' => $clientes,
 179:                 'servicos' => $servicosDisponiveis,
 180:                 'servicosContrato' => $servicosContrato,
 181:                 'valoresPersonalizados' => $valoresPersonalizados
 182:             ]);
 183:         } catch (\Exception $e) {
 184:             $this->setFlashMessage('danger', 'Erro ao carregar contrato: ' . $e->getMessage());
 185:             $this->redirect('/contratos');
 186:         }
 187:     }
 188: 
 189:     public function excluir($id)
 190:     {
 191:         try {
 192:             $this->contratoModel->excluir($id);
 193:             $this->setFlashMessage('success', 'Contrato excluído com sucesso!');
 194:         } catch (\Exception $e) {
 195:             $this->setFlashMessage('danger', 'Erro ao excluir contrato: ' . $e->getMessage());
 196:         }
 197:         $this->redirect('/contratos');
 198:     }
 199: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\app\Controllers\Controller.php ###

   1: <?php
   2: namespace App\Controllers;
   3: 
   4: // Importando a classe Exception
   5: use Exception;
   6: 
   7: class Controller {
   8:     /**
   9:      * Construtor da classe base
  10:      * Inicializa recursos comuns a todos os controllers
  11:      */
  12:     public function __construct() {
  13:         // Garante que a sessão está iniciada
  14:         if (!isset($_SESSION)) {
  15:             session_start();
  16:         }
  17:     }
  18: 
  19:     protected function render($view, $data = []) {
  20:         // Adiciona a mensagem flash aos dados da view
  21:         $flash = $this->getFlashMessage();
  22:         if ($flash) {
  23:             $data['flash'] = $flash;
  24:         }
  25: 
  26:         // Extrai as variáveis do array para uso na view
  27:         extract($data);
  28:         
  29:         // Inicia o buffer de saída
  30:         ob_start();
  31:         
  32:         // Inclui a view específica
  33:         $viewFile = __DIR__ . '/../../views/' . $view . '.php';
  34:         if (file_exists($viewFile)) {
  35:             require $viewFile;
  36:         } else {
  37:             throw new Exception("View {$view} não encontrada");
  38:         }
  39:         
  40:         // Obtém o conteúdo do buffer
  41:         $content = ob_get_clean();
  42:         
  43:         // Renderiza o layout com o conteúdo
  44:         require __DIR__ . '/../../views/layouts/main.php';
  45:     }
  46: 
  47:     protected function redirect($url) {
  48:         header('Location: ' . BASE_URL . '/' . ltrim($url, '/'));
  49:         exit();
  50:     }
  51: 
  52:     protected function setFlashMessage($tipo, $mensagem) {
  53:         if (!isset($_SESSION)) {
  54:             session_start();
  55:         }
  56:         $_SESSION['flash'] = [
  57:             'tipo' => $tipo,
  58:             'mensagem' => $mensagem
  59:         ];
  60:     }
  61: 
  62:     protected function getFlashMessage() {
  63:         if (isset($_SESSION['flash'])) {
  64:             $flash = $_SESSION['flash'];
  65:             unset($_SESSION['flash']);
  66:             return $flash;
  67:         }
  68:         return null;
  69:     }
  70: 
  71:     protected function json($data) {
  72:         header('Content-Type: application/json');
  73:         echo json_encode($data);
  74:         exit();
  75:     }
  76: 
  77:     protected function isPost() {
  78:         return $_SERVER['REQUEST_METHOD'] === 'POST';
  79:     }
  80: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\app\Controllers\DashboardController.php ###

   1: <?php
   2: namespace App\Controllers;
   3: 
   4: use App\Models\Cliente;
   5: use App\Middleware\AuthMiddleware;
   6: 
   7: class DashboardController extends Controller {
   8:     private $clienteModel;
   9: 
  10:     public function __construct() {
  11:         AuthMiddleware::check();
  12:         parent::__construct();
  13:         $this->clienteModel = new Cliente();
  14:     }
  15: 
  16:     public function index() {
  17:         $data = [
  18:             'pageTitle' => 'Dashboard',
  19:             'totalClientes' => $this->clienteModel->contarAtivos(),
  20:             'totalServicos' => 0,
  21:             'totalContratos' => 0,
  22:             'totalProjetos' => 0,
  23:             'atividadesRecentes' => [
  24:                 [
  25:                     'tipo' => 'info',
  26:                     'icone' => 'info',
  27:                     'cor' => 'info',
  28:                     'titulo' => 'Bem-vindo ao VelezCRM!',
  29:                     'descricao' => 'Sistema iniciado com sucesso.',
  30:                     'data' => date('d/m/Y H:i')
  31:                 ]
  32:             ]
  33:         ];
  34: 
  35:         $this->render('dashboard/index', $data);
  36:     }
  37: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\app\Controllers\KanbanController.php ###

   1: <?php
   2: 
   3: namespace App\Controllers;
   4: 
   5: use App\Models\Cliente;
   6: use App\Models\Kanban;
   7: use App\Middleware\AuthMiddleware;
   8: 
   9: class KanbanController extends Controller {
  10:     
  11:     private $clienteModel;
  12:     private $kanbanModel;
  13: 
  14:     public function __construct() {
  15:         AuthMiddleware::check();
  16:         parent::__construct();
  17:         $this->clienteModel = new Cliente();
  18:         $this->kanbanModel = new Kanban();
  19:     }
  20: 
  21:     // Exibe a página principal do Kanban
  22:     public function index() {
  23:         try {
  24:             $clientes = $this->clienteModel->listarTodos();
  25:             $this->render('kanban/index', [
  26:                 'clientes' => $clientes,
  27:                 'pageTitle' => 'Kanban Board'
  28:             ]);
  29:         } catch (\Exception $e) {
  30:             $this->setFlashMessage('error', 'Erro ao carregar o Kanban: ' . $e->getMessage());
  31:             $this->redirect('dashboard');
  32:         }
  33:     }
  34: 
  35:     // Obtém os cards do kanban para um cliente específico
  36:     public function getCards($clienteId) {
  37:         try {
  38:             if (!$clienteId) {
  39:                 throw new \Exception('ID do cliente não fornecido');
  40:             }
  41:             $cards = $this->kanbanModel->getCardsByCliente($clienteId);
  42:             
  43:             // Retorna JSON com cabeçalho correto
  44:             header('Content-Type: application/json');
  45:             echo json_encode($cards);
  46:             exit;
  47:         } catch (\Exception $e) {
  48:             // Retorna erro em JSON
  49:             header('Content-Type: application/json');
  50:             http_response_code(400);
  51:             echo json_encode(['error' => $e->getMessage()]);
  52:             exit;
  53:         }
  54:     }
  55: 
  56:     // Cria um novo card
  57:     public function createCard() {
  58:         try {
  59:             if (!$this->isPost()) {
  60:                 throw new \Exception('Método não permitido');
  61:             }
  62: 
  63:             $clienteId = $_POST['cliente_id'] ?? null;
  64:             $titulo = $_POST['titulo'] ?? null;
  65:             $descricao = $_POST['descricao'] ?? '';
  66:             $status = $_POST['status'] ?? 'backlog';
  67: 
  68:             if (!$clienteId || !$titulo) {
  69:                 throw new \Exception('Dados obrigatórios não fornecidos');
  70:             }
  71: 
  72:             $data = [
  73:                 'cliente_id' => $clienteId,
  74:                 'titulo' => $titulo,
  75:                 'descricao' => $descricao,
  76:                 'status' => $status,
  77:                 'data_criacao' => date('Y-m-d H:i:s')
  78:             ];
  79: 
  80:             $cardId = $this->kanbanModel->createCard($data);
  81:             
  82:             // Retorna JSON com cabeçalho correto
  83:             header('Content-Type: application/json');
  84:             echo json_encode([
  85:                 'success' => true, 
  86:                 'card_id' => $cardId
  87:             ]);
  88:             exit;
  89:         } catch (\Exception $e) {
  90:             // Retorna erro em JSON
  91:             header('Content-Type: application/json');
  92:             http_response_code(400);
  93:             echo json_encode([
  94:                 'success' => false, 
  95:                 'error' => $e->getMessage()
  96:             ]);
  97:             exit;
  98:         }
  99:     }
 100: 
 101:     // Atualiza o status e a posição de um card
 102:     public function updateCardStatus() {
 103:         try {
 104:             if (!$this->isPost()) {
 105:                 throw new \Exception('Método não permitido');
 106:             }
 107: 
 108:             $cardId = $_POST['card_id'] ?? null;
 109:             $newStatus = $_POST['new_status'] ?? null;
 110:             $position = $_POST['position'] ?? 0;
 111: 
 112:             if (!$cardId || !$newStatus) {
 113:                 throw new \Exception('Dados obrigatórios não fornecidos');
 114:             }
 115: 
 116:             // Primeiro, atualiza todas as posições dos cards que vêm depois
 117:             $this->kanbanModel->atualizarPosicoesAposMovimentacao($newStatus, $position);
 118: 
 119:             // Depois atualiza o card movido
 120:             $data = [
 121:                 'id' => $cardId,
 122:                 'status' => $newStatus,
 123:                 'posicao' => $position
 124:             ];
 125: 
 126:             $success = $this->kanbanModel->updateCardStatus($data);
 127:             
 128:             header('Content-Type: application/json');
 129:             if ($success) {
 130:                 echo json_encode(['success' => true]);
 131:             } else {
 132:                 throw new \Exception('Erro ao atualizar o card');
 133:             }
 134:         } catch (\Exception $e) {
 135:             header('Content-Type: application/json');
 136:             http_response_code(400);
 137:             echo json_encode(['error' => $e->getMessage()]);
 138:         }
 139:     }
 140: 
 141:     /**
 142:      * Edita um card existente
 143:      */
 144:     public function editCard() {
 145:         try {
 146:             if (!$this->isPost()) {
 147:                 throw new \Exception('Método não permitido');
 148:             }
 149: 
 150:             $cardId = $_POST['card_id'] ?? null;
 151:             $titulo = $_POST['titulo'] ?? null;
 152:             $descricao = $_POST['descricao'] ?? '';
 153: 
 154:             if (!$cardId || !$titulo) {
 155:                 throw new \Exception('Dados obrigatórios não fornecidos');
 156:             }
 157: 
 158:             $data = [
 159:                 'id' => $cardId,
 160:                 'titulo' => $titulo,
 161:                 'descricao' => $descricao
 162:             ];
 163: 
 164:             $success = $this->kanbanModel->editCard($data);
 165:             
 166:             header('Content-Type: application/json');
 167:             if ($success) {
 168:                 echo json_encode(['success' => true]);
 169:             } else {
 170:                 throw new \Exception('Erro ao editar o card');
 171:             }
 172:         } catch (\Exception $e) {
 173:             header('Content-Type: application/json');
 174:             http_response_code(400);
 175:             echo json_encode(['error' => $e->getMessage()]);
 176:         }
 177:     }
 178: 
 179:     /**
 180:      * Exclui um card do Kanban
 181:      */
 182:     public function deleteCard() {
 183:         try {
 184:             if (!$this->isPost()) {
 185:                 throw new \Exception('Método não permitido');
 186:             }
 187: 
 188:             $cardId = $_POST['card_id'] ?? null;
 189: 
 190:             if (!$cardId) {
 191:                 throw new \Exception('ID do card não fornecido');
 192:             }
 193: 
 194:             $success = $this->kanbanModel->deleteCard($cardId);
 195:             
 196:             header('Content-Type: application/json');
 197:             if ($success) {
 198:                 echo json_encode(['success' => true]);
 199:             } else {
 200:                 throw new \Exception('Erro ao excluir o card');
 201:             }
 202:         } catch (\Exception $e) {
 203:             header('Content-Type: application/json');
 204:             http_response_code(400);
 205:             echo json_encode(['error' => $e->getMessage()]);
 206:         }
 207:     }
 208: 
 209:     /**
 210:      * Obtém um card específico
 211:      */
 212:     public function getCard($cardId) {
 213:         try {
 214:             if (!$cardId) {
 215:                 throw new \Exception('ID do card não fornecido');
 216:             }
 217: 
 218:             $card = $this->kanbanModel->getCard($cardId);
 219:             
 220:             header('Content-Type: application/json');
 221:             if ($card) {
 222:                 echo json_encode($card);
 223:             } else {
 224:                 throw new \Exception('Card não encontrado');
 225:             }
 226:         } catch (\Exception $e) {
 227:             header('Content-Type: application/json');
 228:             http_response_code(400);
 229:             echo json_encode(['error' => $e->getMessage()]);
 230:         }
 231:     }
 232: 
 233:     protected function isPost() {
 234:         return $_SERVER['REQUEST_METHOD'] === 'POST';
 235:     }
 236: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\app\Controllers\ServicoController.php ###

   1: <?php
   2: 
   3: namespace App\Controllers;
   4: 
   5: use App\Models\Servico;
   6: use App\Middleware\AuthMiddleware;
   7: 
   8: class ServicoController extends Controller {
   9:     private $servicoModel;
  10: 
  11:     public function __construct() {
  12:         AuthMiddleware::check();
  13:         parent::__construct();
  14:         $this->servicoModel = new Servico();
  15:     }
  16: 
  17:     public function index() {
  18:         try {
  19:             $servicos = $this->servicoModel->listarTodos();
  20:             $this->render('servicos/index', ['servicos' => $servicos]);
  21:         } catch (\Exception $e) {
  22:             $this->setFlashMessage('danger', 'Erro ao listar serviços: ' . $e->getMessage());
  23:             $this->redirect('servicos');
  24:         }
  25:     }
  26: 
  27:     public function novo() {
  28:         $this->render('servicos/form');
  29:     }
  30: 
  31:     public function salvar() {
  32:         try {
  33:             if (empty($_POST['nome']) || empty($_POST['valor'])) {
  34:                 throw new \Exception('Nome e valor são campos obrigatórios.');
  35:             }
  36: 
  37:             $dados = [
  38:                 'nome' => trim($_POST['nome']),
  39:                 'descricao' => trim($_POST['descricao']),
  40:                 'valor' => (float)$_POST['valor']
  41:             ];
  42: 
  43:             if (isset($_POST['id']) && !empty($_POST['id'])) {
  44:                 $sucesso = $this->servicoModel->atualizar($_POST['id'], $dados);
  45:                 $mensagem = 'Serviço atualizado com sucesso!';
  46:             } else {
  47:                 $sucesso = $this->servicoModel->criar($dados);
  48:                 $mensagem = 'Serviço cadastrado com sucesso!';
  49:             }
  50: 
  51:             if ($sucesso) {
  52:                 $this->setFlashMessage('success', $mensagem);
  53:                 $this->redirect('servicos');
  54:             } else {
  55:                 throw new \Exception('Erro ao salvar o serviço. Por favor, tente novamente.');
  56:             }
  57:         } catch (\Exception $e) {
  58:             error_log("Erro ao salvar serviço: " . $e->getMessage());
  59:             $this->setFlashMessage('danger', $e->getMessage());
  60:             $this->redirect('servicos/novo');
  61:         }
  62:     }
  63: 
  64:     public function editar($id) {
  65:         try {
  66:             $servico = $this->servicoModel->buscarPorId($id);
  67:             if (!$servico) {
  68:                 throw new \Exception('Serviço não encontrado.');
  69:             }
  70:             $this->render('servicos/form', ['servico' => $servico]);
  71:         } catch (\Exception $e) {
  72:             $this->setFlashMessage('danger', $e->getMessage());
  73:             $this->redirect('servicos');
  74:         }
  75:     }
  76: 
  77:     public function excluir($id) {
  78:         try {
  79:             if ($this->servicoModel->excluir($id)) {
  80:                 $this->setFlashMessage('success', 'Serviço excluído com sucesso!');
  81:             } else {
  82:                 throw new \Exception('Erro ao excluir o serviço.');
  83:             }
  84:             $this->redirect('servicos');
  85:         } catch (\Exception $e) {
  86:             $this->setFlashMessage('danger', $e->getMessage());
  87:             $this->redirect('servicos');
  88:         }
  89:     }
  90: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\app\Core\Controller.php ###

   1: <?php
   2: 
   3: namespace App\Core;
   4: 
   5: /**
   6:  * Classe base para todos os controllers
   7:  */
   8: class Controller {
   9:     /**
  10:      * Carrega uma view
  11:      * @param string $view Nome da view a ser carregada
  12:      * @param array $data Dados a serem passados para a view
  13:      * @return void
  14:      */
  15:     protected function view($view, $data = []) {
  16:         // Verifica se o arquivo da view existe
  17:         $viewFile = APPROOT . '/Views/' . $view . '.php';
  18:         
  19:         if (file_exists($viewFile)) {
  20:             require_once $viewFile;
  21:         } else {
  22:             die('View não encontrada');
  23:         }
  24:     }
  25: 
  26:     /**
  27:      * Redireciona para uma URL específica
  28:      * @param string $url URL para redirecionamento
  29:      * @return void
  30:      */
  31:     protected function redirect($url) {
  32:         header('Location: ' . URLROOT . $url);
  33:         exit;
  34:     }
  35: 
  36:     /**
  37:      * Retorna uma resposta JSON
  38:      * @param mixed $data Dados a serem convertidos para JSON
  39:      * @return void
  40:      */
  41:     protected function json($data) {
  42:         header('Content-Type: application/json');
  43:         echo json_encode($data);
  44:         exit;
  45:     }
  46: 
  47:     /**
  48:      * Verifica se a requisição é POST
  49:      * @return bool
  50:      */
  51:     protected function isPost() {
  52:         return $_SERVER['REQUEST_METHOD'] === 'POST';
  53:     }
  54: 
  55:     /**
  56:      * Verifica se a requisição é GET
  57:      * @return bool
  58:      */
  59:     protected function isGet() {
  60:         return $_SERVER['REQUEST_METHOD'] === 'GET';
  61:     }
  62: 
  63:     /**
  64:      * Obtém dados do POST
  65:      * @param string $key Chave do dado
  66:      * @param mixed $default Valor padrão caso a chave não exista
  67:      * @return mixed
  68:      */
  69:     protected function getPost($key = null, $default = null) {
  70:         if ($key === null) {
  71:             return $_POST;
  72:         }
  73:         return isset($_POST[$key]) ? $_POST[$key] : $default;
  74:     }
  75: 
  76:     /**
  77:      * Obtém dados do GET
  78:      * @param string $key Chave do dado
  79:      * @param mixed $default Valor padrão caso a chave não exista
  80:      * @return mixed
  81:      */
  82:     protected function getGet($key = null, $default = null) {
  83:         if ($key === null) {
  84:             return $_GET;
  85:         }
  86:         return isset($_GET[$key]) ? $_GET[$key] : $default;
  87:     }
  88: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\app\Core\Database.php ###

   1: <?php
   2: 
   3: namespace App\Core;
   4: 
   5: use PDO;
   6: use PDOException;
   7: 
   8: class Database {
   9:     private $pdo;
  10:     private $inTransaction = false;
  11: 
  12:     /**
  13:      * Construtor que inicializa a conexão com o banco de dados
  14:      */
  15:     public function __construct() {
  16:         try {
  17:             // Configurações do banco de dados
  18:             $dsn = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME . ";charset=utf8mb4";
  19:             
  20:             // Cria a conexão
  21:             $this->pdo = new PDO($dsn, DB_USER, DB_PASS);
  22:             $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  23:             $this->pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);
  24:             $this->pdo->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);
  25:         } catch (PDOException $e) {
  26:             error_log("Erro de conexão com o banco de dados: " . $e->getMessage());
  27:             throw new \Exception("Erro ao conectar ao banco de dados. Por favor, tente novamente mais tarde.");
  28:         }
  29:     }
  30: 
  31:     /**
  32:      * Inicia uma transação
  33:      */
  34:     public function beginTransaction() {
  35:         if (!$this->inTransaction) {
  36:             $this->pdo->beginTransaction();
  37:             $this->inTransaction = true;
  38:         }
  39:     }
  40: 
  41:     /**
  42:      * Confirma uma transação
  43:      */
  44:     public function commit() {
  45:         if ($this->inTransaction) {
  46:             $this->pdo->commit();
  47:             $this->inTransaction = false;
  48:         }
  49:     }
  50: 
  51:     /**
  52:      * Reverte uma transação
  53:      */
  54:     public function rollback() {
  55:         if ($this->inTransaction) {
  56:             $this->pdo->rollBack();
  57:             $this->inTransaction = false;
  58:         }
  59:     }
  60: 
  61:     /**
  62:      * Prepara e executa uma query SQL
  63:      * @param string $sql Query SQL
  64:      * @param array $params Parâmetros para bind
  65:      * @return \PDOStatement
  66:      */
  67:     public function query($sql, $params = []) {
  68:         try {
  69:             error_log("Executando query: " . $sql);
  70:             error_log("Parâmetros: " . json_encode($params));
  71:             
  72:             $stmt = $this->pdo->prepare($sql);
  73:             
  74:             // Bind each parameter
  75:             foreach ($params as $key => $value) {
  76:                 $type = is_int($value) ? PDO::PARAM_INT : PDO::PARAM_STR;
  77:                 $stmt->bindValue($key, $value, $type);
  78:             }
  79:             
  80:             $stmt->execute();
  81:             return $stmt;
  82:         } catch (PDOException $e) {
  83:             error_log("Erro na execução da query: " . $e->getMessage());
  84:             error_log("SQL: " . $sql);
  85:             error_log("Parâmetros: " . json_encode($params));
  86:             throw $e;
  87:         }
  88:     }
  89: 
  90:     /**
  91:      * Retorna o ID do último registro inserido
  92:      */
  93:     public function lastInsertId() {
  94:         return $this->pdo->lastInsertId();
  95:     }
  96: 
  97:     /**
  98:      * Executa uma consulta SELECT e retorna os resultados
  99:      * @param string $sql Query SQL
 100:      * @param array $params Parâmetros para bind
 101:      * @return array Resultados da consulta
 102:      */
 103:     public function select($sql, $params = []) {
 104:         $stmt = $this->query($sql, $params);
 105:         return $stmt->fetchAll();
 106:     }
 107: 
 108:     /**
 109:      * Executa uma inserção no banco de dados
 110:      * @param string $sql Query SQL de inserção
 111:      * @param array $params Parâmetros para bind
 112:      * @return int ID do registro inserido ou false em caso de erro
 113:      */
 114:     public function insert($sql, $params = []) {
 115:         $this->query($sql, $params);
 116:         return $this->lastInsertId();
 117:     }
 118: 
 119:     /**
 120:      * Executa uma atualização no banco de dados
 121:      * @param string $sql Query SQL de atualização
 122:      * @param array $params Parâmetros para bind
 123:      * @return int Número de linhas afetadas
 124:      */
 125:     public function update($sql, $params = []) {
 126:         $stmt = $this->query($sql, $params);
 127:         return $stmt->rowCount();
 128:     }
 129: 
 130:     /**
 131:      * Executa uma query DELETE
 132:      */
 133:     public function delete($sql, $params = []) {
 134:         try {
 135:             $stmt = $this->query($sql, $params);
 136:             return $stmt->rowCount() > 0;
 137:         } catch (\PDOException $e) {
 138:             error_log("Erro ao executar DELETE: " . $e->getMessage());
 139:             return false;
 140:         }
 141:     }
 142: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\app\Database\Database.php ###

   1: <?php
   2: 
   3: namespace App\Database;
   4: 
   5: class Database {
   6:     private static $instance = null;
   7:     private $pdo;
   8: 
   9:     private function __construct() {
  10:         try {
  11:             $dsn = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME . ";charset=utf8mb4";
  12:             $options = [
  13:                 \PDO::ATTR_ERRMODE => \PDO::ERRMODE_EXCEPTION,
  14:                 \PDO::ATTR_DEFAULT_FETCH_MODE => \PDO::FETCH_ASSOC,
  15:                 \PDO::ATTR_EMULATE_PREPARES => false
  16:             ];
  17:             
  18:             $this->pdo = new \PDO($dsn, DB_USER, DB_PASS, $options);
  19:         } catch (\PDOException $e) {
  20:             error_log("Erro de conexão com o banco de dados: " . $e->getMessage());
  21:             throw new \Exception("Erro ao conectar com o banco de dados: " . $e->getMessage());
  22:         }
  23:     }
  24: 
  25:     public static function getInstance() {
  26:         if (self::$instance === null) {
  27:             self::$instance = new self();
  28:         }
  29:         return self::$instance->pdo;
  30:     }
  31: 
  32:     // Previne que a classe seja clonada
  33:     private function __clone() {}
  34: 
  35:     // Método mágico __wakeup deve ser público
  36:     public function __wakeup() {
  37:         // Implementação do método
  38:     }
  39: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\app\Middleware\AuthMiddleware.php ###

   1: <?php
   2: 
   3: namespace App\Middleware;
   4: 
   5: // Garante que a configuração é carregada
   6: require_once __DIR__ . '/../../config/config.php';
   7: 
   8: class AuthMiddleware
   9: {
  10:     public static function check()
  11:     {
  12:         if (!isset($_SESSION['user_id'])) {
  13:             header("Location: " . BASE_URL . "/login");
  14:             exit;
  15:         }
  16:     }
  17: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\app\Models\Cliente.php ###

   1: <?php
   2: 
   3: namespace App\Models;
   4: 
   5: use App\Core\Database;
   6: use PDOException;
   7: 
   8: class Cliente {
   9:     private $db;
  10: 
  11:     public function __construct() {
  12:         $this->db = new Database();
  13:     }
  14: 
  15:     /**
  16:      * Lista todos os clientes cadastrados
  17:      * @return array
  18:      */
  19:     public function listarTodos() {
  20:         try {
  21:             $sql = "SELECT * FROM clientes ORDER BY nome ASC";
  22:             return $this->db->query($sql)->fetchAll();
  23:         } catch (\Exception $e) {
  24:             error_log("Erro ao listar clientes: " . $e->getMessage());
  25:             throw $e;
  26:         }
  27:     }
  28: 
  29:     /**
  30:      * Busca um cliente pelo ID
  31:      * @param int $id ID do cliente
  32:      * @return array|false
  33:      */
  34:     public function buscarPorId($id) {
  35:         try {
  36:             $sql = "SELECT * FROM clientes WHERE id = :id";
  37:             $params = [':id' => $id];
  38:             return $this->db->query($sql, $params)->fetch();
  39:         } catch (\Exception $e) {
  40:             error_log("Erro ao buscar cliente por ID: " . $e->getMessage());
  41:             throw $e;
  42:         }
  43:     }
  44: 
  45:     /**
  46:      * Verifica se já existe um cliente com o mesmo nome e telefone
  47:      * @param string $nome Nome do cliente
  48:      * @param string $telefone Telefone do cliente
  49:      * @param int|null $ignorarId ID do cliente a ser ignorado na verificação (usado em atualizações)
  50:      * @return bool
  51:      */
  52:     public function existeClienteComMesmosDados($nome, $telefone, $ignorarId = null) {
  53:         try {
  54:             // Remove caracteres não numéricos do telefone
  55:             $telefone = preg_replace('/[^0-9]/', '', $telefone);
  56:             
  57:             $sql = "SELECT COUNT(*) FROM clientes WHERE nome = :nome AND telefone = :telefone";
  58:             $params = [':nome' => $nome, ':telefone' => $telefone];
  59: 
  60:             if ($ignorarId) {
  61:                 $sql .= " AND id != :id";
  62:                 $params[':id'] = $ignorarId;
  63:             }
  64: 
  65:             error_log("Verificando duplicata - SQL: " . $sql);
  66:             error_log("Parâmetros: " . json_encode($params));
  67: 
  68:             $count = $this->db->query($sql, $params)->fetchColumn();
  69:             error_log("Resultado da verificação de duplicata: " . $count);
  70:             
  71:             return $count > 0;
  72:         } catch (\Exception $e) {
  73:             error_log("Erro ao verificar duplicata: " . $e->getMessage());
  74:             throw $e;
  75:         }
  76:     }
  77: 
  78:     /**
  79:      * Cria um novo cliente
  80:      * @param array $dados Dados do cliente
  81:      * @return bool
  82:      */
  83:     public function criar($dados) {
  84:         try {
  85:             error_log("Iniciando criação de cliente: " . json_encode($dados));
  86:             
  87:             // Formata o telefone antes de verificar duplicatas
  88:             $telefone = preg_replace('/[^0-9]/', '', $dados['telefone']);
  89:             
  90:             // Verifica se já existe um cliente com os mesmos dados
  91:             if ($this->existeClienteComMesmosDados($dados['nome'], $telefone)) {
  92:                 throw new \Exception("Já existe um cliente cadastrado com este nome e telefone.");
  93:             }
  94: 
  95:             $this->db->beginTransaction();
  96: 
  97:             // Remove campos vazios e formata dados
  98:             $dados = array_filter($dados, function($value) {
  99:                 return $value !== null && $value !== '';
 100:             });
 101: 
 102:             // Garante que o telefone está formatado
 103:             $dados['telefone'] = $telefone;
 104: 
 105:             $campos = array_keys($dados);
 106:             $valores = array_map(function($campo) {
 107:                 return ':' . $campo;
 108:             }, $campos);
 109: 
 110:             $sql = "INSERT INTO clientes (" . implode(', ', $campos) . ") 
 111:                     VALUES (" . implode(', ', $valores) . ")";
 112: 
 113:             error_log("SQL gerado: " . $sql);
 114: 
 115:             $params = array_combine($valores, array_values($dados));
 116:             error_log("Parâmetros: " . json_encode($params));
 117:             
 118:             $stmt = $this->db->query($sql, $params);
 119:             
 120:             if ($stmt) {
 121:                 $this->db->commit();
 122:                 error_log("Cliente criado com sucesso!");
 123:                 return true;
 124:             } else {
 125:                 $this->db->rollback();
 126:                 error_log("Erro ao executar query de inserção");
 127:                 return false;
 128:             }
 129:         } catch (PDOException $e) {
 130:             $this->db->rollback();
 131:             error_log("Erro PDO ao criar cliente: " . $e->getMessage());
 132:             error_log("Código do erro: " . $e->getCode());
 133:             
 134:             // Se for violação de chave única
 135:             if ($e->getCode() == '23000') {
 136:                 throw new \Exception("Já existe um cliente cadastrado com este nome e telefone.");
 137:             }
 138:             
 139:             throw new \Exception("Erro ao salvar o cliente no banco de dados: " . $e->getMessage());
 140:         } catch (\Exception $e) {
 141:             $this->db->rollback();
 142:             error_log("Erro ao criar cliente: " . $e->getMessage());
 143:             throw $e;
 144:         }
 145:     }
 146: 
 147:     /**
 148:      * Atualiza os dados de um cliente
 149:      * @param int $id ID do cliente
 150:      * @param array $dados Dados do cliente
 151:      * @return bool
 152:      */
 153:     public function atualizar($id, $dados) {
 154:         try {
 155:             error_log("Iniciando atualização do cliente {$id}: " . json_encode($dados));
 156:             
 157:             // Formata o telefone antes de verificar duplicatas
 158:             $telefone = preg_replace('/[^0-9]/', '', $dados['telefone']);
 159:             
 160:             // Verifica se já existe um cliente com os mesmos dados
 161:             if ($this->existeClienteComMesmosDados($dados['nome'], $telefone, $id)) {
 162:                 throw new \Exception("Já existe um cliente cadastrado com este nome e telefone.");
 163:             }
 164: 
 165:             $this->db->beginTransaction();
 166: 
 167:             // Remove campos vazios e formata dados
 168:             $dados = array_filter($dados, function($value) {
 169:                 return $value !== null && $value !== '';
 170:             });
 171: 
 172:             // Garante que o telefone está formatado
 173:             $dados['telefone'] = $telefone;
 174: 
 175:             $sets = array_map(function($campo) {
 176:                 return "$campo = :$campo";
 177:             }, array_keys($dados));
 178: 
 179:             $sql = "UPDATE clientes SET " . implode(', ', $sets) . " WHERE id = :id";
 180:             error_log("SQL gerado: " . $sql);
 181:             
 182:             $params = array_combine(
 183:                 array_map(function($campo) { return ':' . $campo; }, array_keys($dados)),
 184:                 array_values($dados)
 185:             );
 186:             $params[':id'] = $id;
 187:             error_log("Parâmetros: " . json_encode($params));
 188: 
 189:             $stmt = $this->db->query($sql, $params);
 190:             
 191:             if ($stmt) {
 192:                 $this->db->commit();
 193:                 error_log("Cliente atualizado com sucesso!");
 194:                 return true;
 195:             } else {
 196:                 $this->db->rollback();
 197:                 error_log("Erro ao executar query de atualização");
 198:                 return false;
 199:             }
 200:         } catch (PDOException $e) {
 201:             $this->db->rollback();
 202:             error_log("Erro PDO ao atualizar cliente: " . $e->getMessage());
 203:             error_log("Código do erro: " . $e->getCode());
 204:             
 205:             // Se for violação de chave única
 206:             if ($e->getCode() == '23000') {
 207:                 throw new \Exception("Já existe um cliente cadastrado com este nome e telefone.");
 208:             }
 209:             
 210:             throw new \Exception("Erro ao atualizar o cliente no banco de dados: " . $e->getMessage());
 211:         } catch (\Exception $e) {
 212:             $this->db->rollback();
 213:             error_log("Erro ao atualizar cliente: " . $e->getMessage());
 214:             throw $e;
 215:         }
 216:     }
 217: 
 218:     /**
 219:      * Exclui um cliente
 220:      * @param int $id ID do cliente
 221:      * @return bool
 222:      */
 223:     public function excluir($id) {
 224:         try {
 225:             $this->db->beginTransaction();
 226: 
 227:             $sql = "DELETE FROM clientes WHERE id = :id";
 228:             $params = [':id' => $id];
 229:             
 230:             $stmt = $this->db->query($sql, $params);
 231:             
 232:             if ($stmt) {
 233:                 $this->db->commit();
 234:                 return true;
 235:             } else {
 236:                 $this->db->rollback();
 237:                 return false;
 238:             }
 239:         } catch (\Exception $e) {
 240:             $this->db->rollback();
 241:             error_log("Erro ao excluir cliente: " . $e->getMessage());
 242:             throw $e;
 243:         }
 244:     }
 245: 
 246:     /**
 247:      * Verifica se um cliente já existe pelo CNPJ
 248:      * @param string $cnpj CNPJ do cliente
 249:      * @param int|null $ignorarId ID do cliente a ser ignorado na verificação (usado em atualizações)
 250:      * @return bool
 251:      */
 252:     public function existeCNPJ($cnpj, $ignorarId = null) {
 253:         try {
 254:             // Remove caracteres não numéricos do CNPJ
 255:             $cnpj = preg_replace('/[^0-9]/', '', $cnpj);
 256:             
 257:             $sql = "SELECT COUNT(*) FROM clientes WHERE cnpj = :cnpj";
 258:             $params = [':cnpj' => $cnpj];
 259: 
 260:             if ($ignorarId) {
 261:                 $sql .= " AND id != :id";
 262:                 $params[':id'] = $ignorarId;
 263:             }
 264: 
 265:             $count = $this->db->query($sql, $params)->fetchColumn();
 266:             return $count > 0;
 267:         } catch (\Exception $e) {
 268:             error_log("Erro ao verificar CNPJ: " . $e->getMessage());
 269:             throw $e;
 270:         }
 271:     }
 272: 
 273:     /**
 274:      * Conta o total de clientes ativos
 275:      * @return int Total de clientes ativos
 276:      */
 277:     public function contarAtivos() {
 278:         try {
 279:             $sql = "SELECT COUNT(*) FROM clientes WHERE status = 'ativo'";
 280:             return (int) $this->db->query($sql)->fetchColumn();
 281:         } catch (\Exception $e) {
 282:             error_log("Erro ao contar clientes ativos: " . $e->getMessage());
 283:             return 0;
 284:         }
 285:     }
 286: 
 287:     /**
 288:      * Retorna os últimos clientes cadastrados
 289:      * @param int $limite Número máximo de clientes a retornar
 290:      * @return array Lista dos últimos clientes
 291:      */
 292:     public function buscarUltimos($limite = 5) {
 293:         try {
 294:             $sql = "SELECT * FROM clientes ORDER BY id DESC LIMIT :limite";
 295:             return $this->db->query($sql, [':limite' => $limite])->fetchAll();
 296:         } catch (\Exception $e) {
 297:             error_log("Erro ao buscar últimos clientes: " . $e->getMessage());
 298:             return [];
 299:         }
 300:     }
 301: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\app\Models\Contrato.php ###

   1: <?php
   2: 
   3: namespace App\Models;
   4: 
   5: use App\Database\Database;
   6: 
   7: class Contrato
   8: {
   9:     private $db;
  10: 
  11:     public function __construct()
  12:     {
  13:         $this->db = Database::getInstance();
  14:     }
  15: 
  16:     /**
  17:      * Lista todos os contratos
  18:      * @return array
  19:      */
  20:     public function listarTodos()
  21:     {
  22:         try {
  23:             $sql = "SELECT c.*, cl.nome as cliente_nome 
  24:                     FROM contratos c 
  25:                     INNER JOIN clientes cl ON c.cliente_id = cl.id 
  26:                     ORDER BY c.created_at DESC";
  27:             $stmt = $this->db->query($sql);
  28:             return $stmt->fetchAll();
  29:         } catch (\Exception $e) {
  30:             throw $e;
  31:         }
  32:     }
  33: 
  34:     /**
  35:      * Busca um contrato pelo ID
  36:      * @param int $id
  37:      * @return array|false
  38:      */
  39:     public function buscarPorId($id)
  40:     {
  41:         try {
  42:             $sql = "SELECT c.*, cl.nome as cliente_nome 
  43:                     FROM contratos c 
  44:                     INNER JOIN clientes cl ON c.cliente_id = cl.id 
  45:                     WHERE c.id = :id";
  46:             $stmt = $this->db->prepare($sql);
  47:             $stmt->execute([':id' => $id]);
  48:             return $stmt->fetch();
  49:         } catch (\Exception $e) {
  50:             throw $e;
  51:         }
  52:     }
  53: 
  54:     /**
  55:      * Cria um novo contrato
  56:      * @param array $dados
  57:      * @return int ID do contrato criado
  58:      */
  59:     public function criar($dados)
  60:     {
  61:         try {
  62:             $this->db->beginTransaction();
  63: 
  64:             // Insere o contrato
  65:             $sql = "INSERT INTO contratos (titulo, cliente_id, objeto, clausulas, data_validade, status, created_at, updated_at) 
  66:                     VALUES (:titulo, :cliente_id, :objeto, :clausulas, :data_validade, :status, NOW(), NOW())";
  67:             
  68:             // Prepara os dados para inserção
  69:             $params = [
  70:                 ':titulo' => $dados['titulo'],
  71:                 ':cliente_id' => $dados['cliente_id'],
  72:                 ':objeto' => $dados['objeto'],
  73:                 ':clausulas' => isset($dados['clausulas']) ? $dados['clausulas'] : '',
  74:                 ':data_validade' => $dados['data_validade'],
  75:                 ':status' => isset($dados['status']) ? $dados['status'] : 'ativo'
  76:             ];
  77:             
  78:             $stmt = $this->db->prepare($sql);
  79:             $stmt->execute($params);
  80: 
  81:             $contratoId = $this->db->lastInsertId();
  82: 
  83:             // Insere os serviços do contrato com valores personalizados
  84:             if (!empty($dados['servicos'])) {
  85:                 foreach ($dados['servicos'] as $servicoId) {
  86:                     $valorPersonalizado = null;
  87:                     if (isset($dados['valor_personalizado']) && isset($dados['valor_personalizado'][$servicoId])) {
  88:                         $valor = $dados['valor_personalizado'][$servicoId];
  89:                         // Remove pontos de milhar e converte vírgula em ponto
  90:                         $valorPersonalizado = str_replace(',', '.', str_replace('.', '', $valor));
  91:                     }
  92: 
  93:                     $sqlServico = "INSERT INTO contratos_servicos (contrato_id, servico_id, valor_personalizado) 
  94:                                   VALUES (:contrato_id, :servico_id, :valor_personalizado)";
  95:                     $stmt = $this->db->prepare($sqlServico);
  96:                     $stmt->execute([
  97:                         ':contrato_id' => $contratoId,
  98:                         ':servico_id' => $servicoId,
  99:                         ':valor_personalizado' => $valorPersonalizado
 100:                     ]);
 101:                 }
 102:             }
 103: 
 104:             $this->db->commit();
 105:             return $contratoId;
 106:         } catch (\Exception $e) {
 107:             $this->db->rollBack();
 108:             throw $e;
 109:         }
 110:     }
 111: 
 112:     /**
 113:      * Atualiza um contrato existente
 114:      * @param int $id
 115:      * @param array $dados
 116:      * @return bool
 117:      */
 118:     public function atualizar($id, $dados)
 119:     {
 120:         try {
 121:             $this->db->beginTransaction();
 122: 
 123:             // Atualiza o contrato
 124:             $sql = "UPDATE contratos SET 
 125:                     titulo = :titulo,
 126:                     cliente_id = :cliente_id,
 127:                     objeto = :objeto,
 128:                     clausulas = :clausulas,
 129:                     data_validade = :data_validade,
 130:                     updated_at = NOW()
 131:                     WHERE id = :id";
 132:             $stmt = $this->db->prepare($sql);
 133:             $stmt->execute([
 134:                 ':id' => $id,
 135:                 ':titulo' => $dados['titulo'],
 136:                 ':cliente_id' => $dados['cliente_id'],
 137:                 ':objeto' => $dados['objeto'],
 138:                 ':clausulas' => $dados['clausulas'],
 139:                 ':data_validade' => $dados['data_validade']
 140:             ]);
 141: 
 142:             // Remove os serviços antigos
 143:             $stmt = $this->db->prepare("DELETE FROM contratos_servicos WHERE contrato_id = :id");
 144:             $stmt->execute([':id' => $id]);
 145: 
 146:             // Insere os novos serviços com valores personalizados
 147:             if (!empty($dados['servicos'])) {
 148:                 $sqlServicos = "INSERT INTO contratos_servicos (contrato_id, servico_id, valor_personalizado) VALUES ";
 149:                 $values = [];
 150:                 $params = [];
 151: 
 152:                 foreach ($dados['servicos'] as $index => $servicoId) {
 153:                     $keyServico = ":servico_id_" . $index;
 154:                     $keyValor = ":valor_" . $index;
 155:                     $values[] = "(:contrato_id, $keyServico, $keyValor)";
 156:                     $params[':contrato_id'] = $id;
 157:                     $params[$keyServico] = $servicoId;
 158:                     
 159:                     // Processa o valor personalizado
 160:                     $valorPersonalizado = isset($dados['valor_personalizado'][$servicoId]) ? 
 161:                         str_replace(',', '.', str_replace('.', '', $dados['valor_personalizado'][$servicoId])) : 
 162:                         null;
 163:                     $params[$keyValor] = $valorPersonalizado;
 164:                 }
 165: 
 166:                 $sqlServicos .= implode(', ', $values);
 167:                 $stmt = $this->db->prepare($sqlServicos);
 168:                 $stmt->execute($params);
 169:             }
 170: 
 171:             $this->db->commit();
 172:             return true;
 173:         } catch (\Exception $e) {
 174:             $this->db->rollBack();
 175:             throw $e;
 176:         }
 177:     }
 178: 
 179:     /**
 180:      * Atualiza o número do contrato
 181:      * @param int $id
 182:      * @param string $numeroContrato
 183:      * @return bool
 184:      */
 185:     public function atualizarNumeroContrato($id, $numeroContrato)
 186:     {
 187:         try {
 188:             $sql = "UPDATE contratos SET numero_contrato = :numero_contrato WHERE id = :id";
 189:             $stmt = $this->db->prepare($sql);
 190:             return $stmt->execute([':id' => $id, ':numero_contrato' => $numeroContrato]);
 191:         } catch (\Exception $e) {
 192:             throw $e;
 193:         }
 194:     }
 195: 
 196:     /**
 197:      * Salva os valores personalizados para um contrato
 198:      * @param int $contratoId
 199:      * @param array $valoresPersonalizados
 200:      * @return void
 201:      */
 202:     public function salvarValoresPersonalizados($contratoId, $valoresPersonalizados)
 203:     {
 204: 
 205:         foreach ($valoresPersonalizados as $servicoId => $valor) {
 206:             // Converte o valor para o formato correto do banco
 207:             $valor = str_replace('.', '', $valor); // Remove o ponto de milhar
 208:             $valor = str_replace(',', '.', $valor); // Substitui a vírgula por ponto
 209:             $valor = floatval($valor); // Converte para float
 210: 
 211: 
 212:             // Modificando a consulta para usar o mesmo parâmetro :valor tanto no INSERT quanto no UPDATE
 213:             $sql = "INSERT INTO contratos_servicos (contrato_id, servico_id, valor_personalizado) 
 214:                    VALUES (:contrato_id, :servico_id, :valor_personalizado) 
 215:                    ON DUPLICATE KEY UPDATE valor_personalizado = VALUES(valor_personalizado)";
 216: 
 217:             $stmt = $this->db->prepare($sql);
 218:             $stmt->execute([
 219:                 ':contrato_id' => $contratoId,
 220:                 ':servico_id' => $servicoId,
 221:                 ':valor_personalizado' => $valor
 222:             ]);
 223:         }
 224:     }
 225: 
 226:     /**
 227:      * Salva os serviços associados a um contrato
 228:      * @param int $contratoId
 229:      * @param array $servicos
 230:      * @return void
 231:      */
 232:     public function salvarServicos($contratoId, $servicos)
 233:     {
 234:         $this->db->beginTransaction();
 235:         try {
 236:             // Remove serviços antigos
 237:             $stmt = $this->db->prepare("DELETE FROM contratos_servicos WHERE contrato_id = :contrato_id");
 238:             $stmt->execute([':contrato_id' => $contratoId]);
 239: 
 240:             // Insere novos serviços
 241:             foreach ($servicos as $servicoId) {
 242:                 $sql = "INSERT INTO contratos_servicos (contrato_id, servico_id) VALUES (:contrato_id, :servico_id)";
 243:                 $stmt = $this->db->prepare($sql);
 244:                 $stmt->execute([':contrato_id' => $contratoId, ':servico_id' => $servicoId]);
 245:             }
 246:             $this->db->commit();
 247:         } catch (\Exception $e) {
 248:             $this->db->rollBack();
 249:             throw $e;
 250:         }
 251:     }
 252: 
 253:     /**
 254:      * Busca os valores personalizados de um contrato
 255:      * @param int $contratoId
 256:      * @return array
 257:      */
 258:     public function buscarValoresPersonalizadosPorContrato($contratoId)
 259:     {
 260:         try {
 261:             $sql = "SELECT servico_id, valor_personalizado FROM contratos_servicos WHERE contrato_id = :contrato_id";
 262:             $stmt = $this->db->prepare($sql);
 263:             $stmt->execute([':contrato_id' => $contratoId]);
 264:             return $stmt->fetchAll();
 265:         } catch (\Exception $e) {
 266:             throw $e;
 267:         }
 268:     }
 269: 
 270:     /**
 271:      * Busca os serviços associados a um contrato
 272:      * @param int $contratoId
 273:      * @return array
 274:      */
 275:     public function buscarServicosPorContrato($contratoId)
 276:     {
 277:         try {
 278:             $sql = "SELECT s.*, cs.valor_personalizado 
 279:                 FROM servicos s 
 280:                 INNER JOIN contratos_servicos cs ON s.id = cs.servico_id 
 281:                 WHERE cs.contrato_id = :contrato_id";
 282:             $stmt = $this->db->prepare($sql);
 283:             $stmt->execute([':contrato_id' => $contratoId]);
 284:             return $stmt->fetchAll();
 285:         } catch (\Exception $e) {
 286:             throw $e;
 287:         }
 288:     }
 289: 
 290:     /**
 291:      * Exclui um contrato
 292:      * @param int $id
 293:      * @return bool
 294:      */
 295:     public function excluir($id)
 296:     {
 297:         try {
 298:             $this->db->beginTransaction();
 299: 
 300:             // Remove os serviços
 301:             $stmt = $this->db->prepare("DELETE FROM contratos_servicos WHERE contrato_id = :id");
 302:             $stmt->execute([':id' => $id]);
 303: 
 304:             // Remove o contrato
 305:             $stmt = $this->db->prepare("DELETE FROM contratos WHERE id = :id");
 306:             $stmt->execute([':id' => $id]);
 307: 
 308:             $this->db->commit();
 309:             return true;
 310:         } catch (\Exception $e) {
 311:             $this->db->rollBack();
 312:             throw $e;
 313:         }
 314:     }
 315: 
 316:     /**
 317:      * Busca os serviços de um contrato
 318:      * @param int $contratoId
 319:      * @return array
 320:      */
 321:     public function buscarServicos($contratoId)
 322:     {
 323:         try {
 324:             $sql = "SELECT s.*, cs.valor_personalizado 
 325:                     FROM servicos s 
 326:                     INNER JOIN contratos_servicos cs ON s.id = cs.servico_id 
 327:                     WHERE cs.contrato_id = :contrato_id";
 328:             $stmt = $this->db->prepare($sql);
 329:             $stmt->execute([':contrato_id' => $contratoId]);
 330:             return $stmt->fetchAll();
 331:         } catch (\Exception $e) {
 332:             throw $e;
 333:         }
 334:     }
 335: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\app\Models\Database.php ###

   1: <?php
   2: namespace App\Models;
   3: 
   4: use PDO;
   5: use PDOException;
   6: 
   7: class Database {
   8:     private static $instance = null;
   9:     private $conn;
  10:     
  11:     private function __construct() {
  12:         try {
  13:             // Cria a conexão com o banco de dados usando as constantes definidas
  14:             $this->conn = new PDO(
  15:                 "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME . ";charset=utf8mb4",
  16:                 DB_USER,
  17:                 DB_PASS,
  18:                 [
  19:                     PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
  20:                     PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
  21:                     PDO::ATTR_EMULATE_PREPARES => false
  22:                 ]
  23:             );
  24:         } catch (PDOException $e) {
  25:             // Em caso de erro, exibe uma mensagem amigável
  26:             die("Erro ao conectar ao banco de dados: " . $e->getMessage());
  27:         }
  28:     }
  29:     
  30:     // Implementa o padrão Singleton para garantir apenas uma conexão
  31:     public static function getInstance() {
  32:         if (self::$instance === null) {
  33:             self::$instance = new self();
  34:         }
  35:         return self::$instance;
  36:     }
  37:     
  38:     // Retorna a conexão ativa
  39:     public function getConnection() {
  40:         return $this->conn;
  41:     }
  42: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\app\Models\Kanban.php ###

   1: <?php
   2: 
   3: namespace App\Models;
   4: 
   5: use App\Core\Database;
   6: 
   7: class Kanban {
   8:     private $db;
   9: 
  10:     public function __construct() {
  11:         $this->db = new Database();
  12:     }
  13: 
  14:     /**
  15:      * Obtém os cards de um cliente específico
  16:      */
  17:     public function getCardsByCliente($clienteId) {
  18:         $sql = "SELECT * FROM kanban_cards WHERE cliente_id = :cliente_id ORDER BY status, posicao ASC";
  19:         return $this->db->select($sql, ['cliente_id' => $clienteId]);
  20:     }
  21: 
  22:     /**
  23:      * Cria um novo card
  24:      */
  25:     public function createCard($data) {
  26:         // Obtém a última posição do status atual
  27:         $sql = "SELECT COALESCE(MAX(posicao), -1) as ultima_posicao 
  28:                 FROM kanban_cards 
  29:                 WHERE cliente_id = :cliente_id 
  30:                 AND status = :status";
  31:         
  32:         $result = $this->db->select($sql, [
  33:             'cliente_id' => $data['cliente_id'],
  34:             'status' => $data['status']
  35:         ]);
  36:         
  37:         // Define a nova posição como última + 1
  38:         $data['posicao'] = isset($result[0]['ultima_posicao']) ? $result[0]['ultima_posicao'] + 1 : 0;
  39:         
  40:         $sql = "INSERT INTO kanban_cards (cliente_id, titulo, descricao, status, posicao, data_criacao) 
  41:                 VALUES (:cliente_id, :titulo, :descricao, :status, :posicao, :data_criacao)";
  42:         
  43:         return $this->db->insert($sql, $data);
  44:     }
  45: 
  46:     /**
  47:      * Atualiza o status e posição de um card
  48:      */
  49:     public function updateCardStatus($data) {
  50:         $sql = "UPDATE kanban_cards 
  51:                 SET status = :status, posicao = :posicao 
  52:                 WHERE id = :id";
  53:         return $this->db->update($sql, $data);
  54:     }
  55: 
  56:     /**
  57:      * Atualiza as posições dos cards após uma movimentação
  58:      */
  59:     public function atualizarPosicoesAposMovimentacao($status, $novaPosicao) {
  60:         // Atualiza as posições dos cards que vêm depois da nova posição
  61:         $sql = "UPDATE kanban_cards 
  62:                 SET posicao = posicao + 1 
  63:                 WHERE status = :status 
  64:                 AND posicao >= :posicao";
  65:         
  66:         return $this->db->update($sql, [
  67:             'status' => $status,
  68:             'posicao' => $novaPosicao
  69:         ]);
  70:     }
  71: 
  72:     /**
  73:      * Edita um card existente
  74:      */
  75:     public function editCard($data) {
  76:         try {
  77:             $sql = "UPDATE kanban_cards 
  78:                     SET titulo = :titulo, 
  79:                         descricao = :descricao 
  80:                     WHERE id = :id";
  81:             
  82:             return $this->db->update($sql, $data);
  83:         } catch (\Exception $e) {
  84:             error_log("Erro ao editar card: " . $e->getMessage());
  85:             return false;
  86:         }
  87:     }
  88: 
  89:     /**
  90:      * Exclui um card e reordena as posições
  91:      */
  92:     public function deleteCard($cardId) {
  93:         try {
  94:             // Primeiro, obtém as informações do card para reordenar depois
  95:             $sql = "SELECT status, posicao FROM kanban_cards WHERE id = :id";
  96:             $card = $this->db->select($sql, ['id' => $cardId]);
  97: 
  98:             if (!empty($card)) {
  99:                 $status = $card[0]['status'];
 100:                 $posicao = $card[0]['posicao'];
 101: 
 102:                 // Exclui o card
 103:                 $sql = "DELETE FROM kanban_cards WHERE id = :id";
 104:                 $deleted = $this->db->delete($sql, ['id' => $cardId]);
 105: 
 106:                 if ($deleted) {
 107:                     // Atualiza as posições dos cards que vêm depois
 108:                     $sql = "UPDATE kanban_cards 
 109:                             SET posicao = posicao - 1 
 110:                             WHERE status = :status 
 111:                             AND posicao > :posicao";
 112:                     
 113:                     $this->db->update($sql, [
 114:                         'status' => $status,
 115:                         'posicao' => $posicao
 116:                     ]);
 117: 
 118:                     return true;
 119:                 }
 120:             }
 121:             return false;
 122:         } catch (\Exception $e) {
 123:             error_log("Erro ao excluir card: " . $e->getMessage());
 124:             return false;
 125:         }
 126:     }
 127: 
 128:     /**
 129:      * Obtém um card específico pelo ID
 130:      */
 131:     public function getCard($cardId) {
 132:         try {
 133:             $sql = "SELECT * FROM kanban_cards WHERE id = :id";
 134:             $result = $this->db->select($sql, ['id' => $cardId]);
 135:             return !empty($result) ? $result[0] : null;
 136:         } catch (\Exception $e) {
 137:             error_log("Erro ao obter card: " . $e->getMessage());
 138:             return null;
 139:         }
 140:     }
 141: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\app\Models\Servico.php ###

   1: <?php
   2: 
   3: namespace App\Models;
   4: 
   5: use App\Core\Database;
   6: use PDOException;
   7: 
   8: class Servico {
   9:     private $db;
  10: 
  11:     public function __construct() {
  12:         $this->db = new Database();
  13:     }
  14: 
  15:     /**
  16:      * Lista todos os serviços cadastrados
  17:      * @return array
  18:      */
  19:     public function listarTodos() {
  20:         try {
  21:             $sql = "SELECT * FROM servicos ORDER BY nome ASC";
  22:             return $this->db->query($sql)->fetchAll();
  23:         } catch (\Exception $e) {
  24:             error_log("Erro ao listar serviços: " . $e->getMessage());
  25:             throw $e;
  26:         }
  27:     }
  28: 
  29:     /**
  30:      * Cria um novo serviço
  31:      * @param array $dados Dados do serviço
  32:      * @return bool
  33:      */
  34:     public function criar($dados) {
  35:         try {
  36:             $sql = "INSERT INTO servicos (nome, descricao, valor) VALUES (:nome, :descricao, :valor)";
  37:             $params = [
  38:                 ':nome' => $dados['nome'],
  39:                 ':descricao' => $dados['descricao'],
  40:                 ':valor' => $dados['valor']
  41:             ];
  42:             return $this->db->query($sql, $params);
  43:         } catch (PDOException $e) {
  44:             error_log("Erro ao criar serviço: " . $e->getMessage());
  45:             throw $e;
  46:         }
  47:     }
  48: 
  49:     /**
  50:      * Atualiza um serviço
  51:      * @param int $id ID do serviço
  52:      * @param array $dados Dados do serviço
  53:      * @return bool
  54:      */
  55:     public function atualizar($id, $dados) {
  56:         try {
  57:             $sql = "UPDATE servicos SET nome = :nome, descricao = :descricao, valor = :valor WHERE id = :id";
  58:             $params = [
  59:                 ':nome' => $dados['nome'],
  60:                 ':descricao' => $dados['descricao'],
  61:                 ':valor' => $dados['valor'],
  62:                 ':id' => $id
  63:             ];
  64:             return $this->db->query($sql, $params);
  65:         } catch (PDOException $e) {
  66:             error_log("Erro ao atualizar serviço: " . $e->getMessage());
  67:             throw $e;
  68:         }
  69:     }
  70: 
  71:     /**
  72:      * Exclui um serviço
  73:      * @param int $id ID do serviço
  74:      * @return bool
  75:      */
  76:     public function excluir($id) {
  77:         try {
  78:             $sql = "DELETE FROM servicos WHERE id = :id";
  79:             return $this->db->query($sql, [':id' => $id]);
  80:         } catch (PDOException $e) {
  81:             error_log("Erro ao excluir serviço: " . $e->getMessage());
  82:             throw $e;
  83:         }
  84:     }
  85: 
  86:     /**
  87:      * Busca um serviço pelo ID
  88:      * @param int $id ID do serviço
  89:      * @return array|false
  90:      */
  91:     public function buscarPorId($id) {
  92:         try {
  93:             $sql = "SELECT * FROM servicos WHERE id = :id";
  94:             $params = [':id' => $id];
  95:             return $this->db->query($sql, $params)->fetch();
  96:         } catch (\Exception $e) {
  97:             error_log("Erro ao buscar serviço por ID: " . $e->getMessage());
  98:             throw $e;
  99:         }
 100:     }
 101: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\app\Models\User.php ###

   1: <?php
   2: 
   3: namespace App\Models;
   4: 
   5: use App\Core\Database;
   6: 
   7: class User
   8: {
   9:     private $db;
  10: 
  11:     public function __construct()
  12:     {
  13:         $this->db = new Database();
  14:     }
  15: 
  16:     public function getUserByEmail($email)
  17:     {
  18:         $sql = "SELECT * FROM usuarios WHERE email = :email LIMIT 1";
  19:         return $this->db->select($sql, [':email' => $email])[0] ?? null;
  20:     }
  21: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\config\config.php ###

   1: <?php
   2: // Importação de namespaces
   3: use App\Database\Database;
   4: 
   5: // Configurações do Banco de Dados
   6: define('DB_HOST', 'localhost');
   7: define('DB_USER', 'root');
   8: define('DB_PASS', '');
   9: define('DB_NAME', 'velezcrm');
  10: 
  11: // URL Base do sistema
  12: define('BASE_URL', 'http://localhost/velezcrm');
  13: 
  14: // Configurações de timezone
  15: date_default_timezone_set('America/Sao_Paulo');
  16: 
  17: // Configurações de erro
  18: error_reporting(E_ALL);
  19: ini_set('display_errors', 1);
  20: 
  21: // Define o caminho base das views
  22: define('VIEWS_PATH', __DIR__ . '/../views');
  23: 
  24: // Autoload de classes
  25: spl_autoload_register(function ($class) {
  26:     // Converte o namespace em caminho de arquivo
  27:     $prefix = '';
  28:     $base_dir = __DIR__ . '/../';
  29: 
  30:     $file = $base_dir . str_replace('\\', '/', $class) . '.php';
  31:     
  32:     // Debug
  33:     error_log("Tentando carregar classe: " . $class);
  34:     error_log("Arquivo: " . $file);
  35:     
  36:     // Se o arquivo existir, carrega-o
  37:     if (file_exists($file)) {
  38:         require_once $file;
  39:         error_log("Classe carregada com sucesso: " . $class);
  40:         return true;
  41:     }
  42:     error_log("Arquivo não encontrado: " . $file);
  43:     return false;
  44: });
  45: 
  46: try {
  47:     // Inicializa a conexão com o banco de dados
  48:     require_once __DIR__ . '/../app/Database/Database.php';
  49:     
  50:     global $db;
  51:     $db = Database::getInstance();
  52:     error_log("Conexão com o banco de dados estabelecida com sucesso!");
  53: } catch (\Exception $e) {
  54:     error_log("Erro ao conectar com o banco de dados: " . $e->getMessage());
  55:     die("Erro ao conectar com o banco de dados: " . $e->getMessage());
  56: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\config\database.sql ###

   1: -- Criação do banco de dados
   2: CREATE DATABASE IF NOT EXISTS velezcrm CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
   3: 
   4: USE velezcrm;
   5: 
   6: -- Tabela de clientes
   7: CREATE TABLE IF NOT EXISTS clientes (
   8:   `id` int(11) NOT NULL AUTO_INCREMENT,
   9:   `nome` varchar(100) NOT NULL,
  10:   `telefone` varchar(20) NOT NULL,
  11:   `empresa` varchar(100) DEFAULT NULL,
  12:   `cnpj` varchar(20) DEFAULT NULL,
  13:   `login_hospedagem` varchar(100) DEFAULT NULL,
  14:   `senha_hospedagem` varchar(100) DEFAULT NULL,
  15:   `login_wp` varchar(100) DEFAULT NULL,
  16:   `senha_wp` varchar(100) DEFAULT NULL,
  17:   `observacoes` text DEFAULT NULL,
  18:   `status` enum('ativo','inativo','pendente') NOT NULL DEFAULT 'ativo',
  19:   `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  20:   `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  21:   PRIMARY KEY (`id`)
  22: ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
  23: 
  24: -- Tabela de serviços
  25: CREATE TABLE IF NOT EXISTS servicos (
  26:     id INT AUTO_INCREMENT PRIMARY KEY,
  27:     nome VARCHAR(100) NOT NULL,
  28:     descricao TEXT,
  29:     valor DECIMAL(10,2),
  30:     status ENUM('ativo', 'inativo') DEFAULT 'ativo'
  31: );
  32: 
  33: -- Tabela de contratos
  34: CREATE TABLE IF NOT EXISTS contratos (
  35:     id INT AUTO_INCREMENT PRIMARY KEY,
  36:     cliente_id INT,
  37:     servico_id INT,
  38:     data_inicio DATE,
  39:     data_fim DATE,
  40:     valor_total DECIMAL(10,2),
  41:     status ENUM('em_andamento', 'concluido', 'cancelado') DEFAULT 'em_andamento',
  42:     observacoes TEXT,
  43:     FOREIGN KEY (cliente_id) REFERENCES clientes(id),
  44:     FOREIGN KEY (servico_id) REFERENCES servicos(id)
  45: );
  46: 
  47: -- Tabela de projetos (Kanban)
  48: CREATE TABLE IF NOT EXISTS projetos (
  49:     id INT AUTO_INCREMENT PRIMARY KEY,
  50:     contrato_id INT,
  51:     titulo VARCHAR(100) NOT NULL,
  52:     descricao TEXT,
  53:     status ENUM('backlog', 'todo', 'doing', 'done') DEFAULT 'backlog',
  54:     prioridade ENUM('baixa', 'media', 'alta') DEFAULT 'media',
  55:     data_inicio DATE,
  56:     data_fim DATE,
  57:     FOREIGN KEY (contrato_id) REFERENCES contratos(id)
  58: );
  59: 
  60: -- Tabela de usuários
  61: CREATE TABLE IF NOT EXISTS usuarios (
  62:     id INT AUTO_INCREMENT PRIMARY KEY,
  63:     nome VARCHAR(100) NOT NULL,
  64:     email VARCHAR(100) NOT NULL UNIQUE,
  65:     senha VARCHAR(255) NOT NULL,
  66:     tipo ENUM('admin', 'usuario') DEFAULT 'usuario',
  67:     status ENUM('ativo', 'inativo') DEFAULT 'ativo',
  68:     data_cadastro DATETIME DEFAULT CURRENT_TIMESTAMP
  69: );

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\database\add_missing_columns.php ###

   1: <?php
   2: require_once __DIR__ . '/../config/config.php';
   3: use App\Database\Database;
   4: 
   5: try {
   6:     $db = Database::getInstance();
   7:     
   8:     // Verifica e adiciona a coluna objeto se não existir
   9:     $db->exec("
  10:         SET @exists = 0;
  11:         SELECT COUNT(*) INTO @exists FROM information_schema.columns 
  12:         WHERE table_schema = DATABASE() 
  13:         AND table_name = 'contratos' 
  14:         AND column_name = 'objeto';
  15:         
  16:         SET @sql = IF(@exists = 0,
  17:             'ALTER TABLE contratos ADD COLUMN objeto TEXT AFTER titulo',
  18:             'SELECT \"Coluna objeto já existe\"');
  19:         
  20:         PREPARE stmt FROM @sql;
  21:         EXECUTE stmt;
  22:     ");
  23:     
  24:     // Verifica e adiciona a coluna data_validade se não existir
  25:     $db->exec("
  26:         SET @exists = 0;
  27:         SELECT COUNT(*) INTO @exists FROM information_schema.columns 
  28:         WHERE table_schema = DATABASE() 
  29:         AND table_name = 'contratos' 
  30:         AND column_name = 'data_validade';
  31:         
  32:         SET @sql = IF(@exists = 0,
  33:             'ALTER TABLE contratos ADD COLUMN data_validade DATE AFTER status',
  34:             'SELECT \"Coluna data_validade já existe\"');
  35:         
  36:         PREPARE stmt FROM @sql;
  37:         EXECUTE stmt;
  38:     ");
  39:     
  40:     echo "Script executado com sucesso!\n";
  41:     
  42: } catch (Exception $e) {
  43:     echo "Erro: " . $e->getMessage() . "\n";
  44: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\database\contratos.sql ###

   1: -- Criação da tabela de contratos
   2: CREATE TABLE IF NOT EXISTS contratos (
   3:     id INT AUTO_INCREMENT PRIMARY KEY,
   4:     titulo VARCHAR(255) NOT NULL,
   5:     cliente_id INT NOT NULL,
   6:     descricao TEXT,
   7:     valor DECIMAL(10,2),
   8:     status VARCHAR(50) DEFAULT 'ativo',
   9:     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  10:     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  11:     FOREIGN KEY (cliente_id) REFERENCES clientes(id)
  12: ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\database\kanban_cards.sql ###

   1: -- Criação da tabela kanban_cards
   2: CREATE TABLE IF NOT EXISTS kanban_cards (
   3:     id INT AUTO_INCREMENT PRIMARY KEY,
   4:     cliente_id INT NOT NULL,
   5:     titulo VARCHAR(255) NOT NULL,
   6:     descricao TEXT,
   7:     status VARCHAR(50) NOT NULL DEFAULT 'backlog',
   8:     posicao INT DEFAULT 0,
   9:     data_criacao DATETIME NOT NULL,
  10:     FOREIGN KEY (cliente_id) REFERENCES clientes(id) ON DELETE CASCADE,
  11:     INDEX idx_cliente_status (cliente_id, status)
  12: ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\database\recreate_contratos.php ###

   1: <?php
   2: require_once __DIR__ . '/../config/config.php';
   3: use App\Database\Database;
   4: 
   5: try {
   6:     $db = Database::getInstance();
   7:     
   8:     // Desabilita verificação de chaves estrangeiras temporariamente
   9:     $db->exec("SET FOREIGN_KEY_CHECKS = 0");
  10:     
  11:     // Drop da tabela se existir
  12:     $db->exec("DROP TABLE IF EXISTS contratos");
  13:     
  14:     // Criação da tabela com todas as colunas necessárias
  15:     $sql = "CREATE TABLE contratos (
  16:         id INT AUTO_INCREMENT PRIMARY KEY,
  17:         titulo VARCHAR(255) NOT NULL,
  18:         cliente_id INT NOT NULL,
  19:         descricao TEXT,
  20:         valor DECIMAL(10,2),
  21:         status VARCHAR(50) DEFAULT 'ativo',
  22:         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  23:         updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  24:         FOREIGN KEY (cliente_id) REFERENCES clientes(id)
  25:     ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;";
  26:     
  27:     $db->exec($sql);
  28:     echo "Tabela de contratos recriada com sucesso!\n";
  29:     
  30:     // Reabilita verificação de chaves estrangeiras
  31:     $db->exec("SET FOREIGN_KEY_CHECKS = 1");
  32:     
  33:     // Inserir um contrato de teste
  34:     $sql = "INSERT INTO contratos (titulo, cliente_id, descricao, valor, status) 
  35:             SELECT 'Contrato de Teste', id, 'Descrição do contrato de teste', 1000.00, 'ativo'
  36:             FROM clientes LIMIT 1";
  37:     
  38:     $db->exec($sql);
  39:     echo "Contrato de teste inserido com sucesso!\n";
  40:     
  41: } catch (Exception $e) {
  42:     echo "Erro: " . $e->getMessage() . "\n";
  43:     // Em caso de erro, garante que as chaves estrangeiras sejam reabilitadas
  44:     try {
  45:         $db->exec("SET FOREIGN_KEY_CHECKS = 1");
  46:     } catch (Exception $e2) {
  47:         echo "Erro ao reabilitar chaves estrangeiras: " . $e2->getMessage() . "\n";
  48:     }
  49: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\database\setup_contratos.php ###

   1: <?php
   2: require_once __DIR__ . '/../config/config.php';
   3: use App\Database\Database;
   4: 
   5: try {
   6:     $db = Database::getInstance();
   7:     
   8:     $sql = "CREATE TABLE IF NOT EXISTS contratos (
   9:         id INT AUTO_INCREMENT PRIMARY KEY,
  10:         titulo VARCHAR(255) NOT NULL,
  11:         cliente_id INT NOT NULL,
  12:         descricao TEXT,
  13:         valor DECIMAL(10,2),
  14:         status VARCHAR(50) DEFAULT 'ativo',
  15:         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  16:         updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  17:         FOREIGN KEY (cliente_id) REFERENCES clientes(id)
  18:     ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;";
  19:     
  20:     $db->exec($sql);
  21:     echo "Tabela de contratos criada/atualizada com sucesso!\n";
  22:     
  23: } catch (Exception $e) {
  24:     echo "Erro ao criar tabela de contratos: " . $e->getMessage() . "\n";
  25: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\database\setup_kanban.php ###

   1: <?php
   2: 
   3: require_once __DIR__ . '/../config/config.php';
   4: 
   5: try {
   6:     $pdo = new PDO(
   7:         "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME,
   8:         DB_USER,
   9:         DB_PASS,
  10:         array(PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION)
  11:     );
  12: 
  13:     // Criar tabela kanban_cards
  14:     $sql = "CREATE TABLE IF NOT EXISTS kanban_cards (
  15:         id INT AUTO_INCREMENT PRIMARY KEY,
  16:         cliente_id INT NOT NULL,
  17:         titulo VARCHAR(255) NOT NULL,
  18:         descricao TEXT,
  19:         status ENUM('backlog', 'todo', 'doing', 'done') DEFAULT 'backlog',
  20:         posicao INT DEFAULT 0,
  21:         data_criacao DATETIME NOT NULL,
  22:         FOREIGN KEY (cliente_id) REFERENCES clientes(id) ON DELETE CASCADE
  23:     ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;";
  24: 
  25:     $pdo->exec($sql);
  26:     echo "Tabela kanban_cards criada com sucesso!\n";
  27: } catch (PDOException $e) {
  28:     echo "Erro ao criar tabela kanban_cards: " . $e->getMessage() . "\n";
  29: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\database\update_contratos.php ###

   1: <?php
   2: require_once __DIR__ . '/../config/config.php';
   3: use App\Database\Database;
   4: 
   5: try {
   6:     $db = Database::getInstance();
   7:     
   8:     // Adiciona as novas colunas à tabela contratos
   9:     $sql = "ALTER TABLE contratos 
  10:             ADD COLUMN numero_contrato VARCHAR(20) AFTER id,
  11:             ADD COLUMN data_validade DATE AFTER status,
  12:             ADD COLUMN objeto TEXT AFTER titulo,
  13:             ADD COLUMN ano_contrato INT GENERATED ALWAYS AS (YEAR(created_at)) STORED AFTER numero_contrato;";
  14:     
  15:     $db->exec($sql);
  16:     echo "Tabela de contratos atualizada com sucesso!\n";
  17:     
  18:     // Atualiza os contratos existentes com número do contrato
  19:     $sql = "UPDATE contratos 
  20:             SET numero_contrato = CONCAT(id, '/', YEAR(created_at))
  21:             WHERE numero_contrato IS NULL;";
  22:     
  23:     $db->exec($sql);
  24:     echo "Números dos contratos atualizados com sucesso!\n";
  25:     
  26: } catch (Exception $e) {
  27:     echo "Erro: " . $e->getMessage() . "\n";
  28: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\database\update_contratos_table.php ###

   1: <?php
   2: require_once __DIR__ . '/../config/config.php';
   3: use App\Database\Database;
   4: 
   5: try {
   6:     $db = Database::getInstance();
   7:     
   8:     // Array com as alterações necessárias
   9:     $alteracoes = [
  10:         "ADD COLUMN IF NOT EXISTS numero_contrato VARCHAR(20) AFTER id",
  11:         "ADD COLUMN IF NOT EXISTS objeto TEXT AFTER cliente_id",
  12:         "ADD COLUMN IF NOT EXISTS clausulas TEXT AFTER objeto",
  13:         "ADD COLUMN IF NOT EXISTS data_validade DATE AFTER clausulas",
  14:         "MODIFY COLUMN valor DECIMAL(10,2) NOT NULL DEFAULT 0.00",
  15:         "MODIFY COLUMN status VARCHAR(50) NOT NULL DEFAULT 'ativo'"
  16:     ];
  17:     
  18:     // Executa cada alteração
  19:     foreach ($alteracoes as $alteracao) {
  20:         try {
  21:             $sql = "ALTER TABLE contratos $alteracao";
  22:             $db->exec($sql);
  23:             echo "Alteração executada com sucesso: $alteracao\n";
  24:         } catch (\Exception $e) {
  25:             echo "Aviso ao executar alteração ($alteracao): " . $e->getMessage() . "\n";
  26:             // Continua com as próximas alterações mesmo se uma falhar
  27:         }
  28:     }
  29:     
  30:     // Verifica se a tabela de relacionamento contratos_servicos existe
  31:     $sql = "CREATE TABLE IF NOT EXISTS contratos_servicos (
  32:         contrato_id INT NOT NULL,
  33:         servico_id INT NOT NULL,
  34:         PRIMARY KEY (contrato_id, servico_id),
  35:         FOREIGN KEY (contrato_id) REFERENCES contratos(id) ON DELETE CASCADE,
  36:         FOREIGN KEY (servico_id) REFERENCES servicos(id) ON DELETE CASCADE
  37:     ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;";
  38:     
  39:     $db->exec($sql);
  40:     echo "Tabela contratos_servicos verificada/criada com sucesso!\n";
  41:     
  42:     echo "Atualização da estrutura do banco de dados concluída!\n";
  43:     
  44: } catch (\Exception $e) {
  45:     echo "Erro: " . $e->getMessage() . "\n";
  46: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\database\migrations\002_adicionar_campos_clientes.sql ###


----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\database\migrations\003_adicionar_indice_unico_clientes.sql ###

   1: -- Adicionando índice único para nome e telefone
   2: ALTER TABLE clientes
   3: ADD CONSTRAINT uk_nome_telefone UNIQUE (nome, telefone);

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\database\migrations\003_limpar_duplicatas.sql ###

   1: -- Remover duplicatas mantendo apenas o registro mais recente
   2: DELETE c1 FROM clientes c1
   3: INNER JOIN clientes c2
   4: WHERE c1.id < c2.id 
   5: AND c1.nome = c2.nome 
   6: AND c1.telefone = c2.telefone;

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\database\migrations\004_adicionar_status_pendente.sql ###

   1: -- Modificar o campo status para incluir a opção 'pendente'
   2: ALTER TABLE clientes MODIFY COLUMN status ENUM('ativo', 'pendente', 'inativo') NOT NULL DEFAULT 'ativo';

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\database\migrations\005_criar_tabela_servicos.sql ###

   1: -- Criação da tabela de serviços
   2: CREATE TABLE IF NOT EXISTS servicos (
   3:     id INT AUTO_INCREMENT PRIMARY KEY,
   4:     nome VARCHAR(100) NOT NULL,
   5:     descricao TEXT,
   6:     valor DECIMAL(10,2) NOT NULL,
   7:     status ENUM('ativo', 'inativo') DEFAULT 'ativo'
   8: );

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\database\migrations\006_criar_tabela_contratos.sql ###

   1: CREATE TABLE IF NOT EXISTS contratos (
   2:     id INT AUTO_INCREMENT PRIMARY KEY,
   3:     titulo VARCHAR(255) NOT NULL,
   4:     cliente_id INT NOT NULL,
   5:     clausulas TEXT,
   6:     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   7:     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
   8:     FOREIGN KEY (cliente_id) REFERENCES clientes(id)
   9: ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
  10: 
  11: CREATE TABLE IF NOT EXISTS contratos_servicos (
  12:     contrato_id INT,
  13:     servico_id INT,
  14:     PRIMARY KEY (contrato_id, servico_id),
  15:     FOREIGN KEY (contrato_id) REFERENCES contratos(id) ON DELETE CASCADE,
  16:     FOREIGN KEY (servico_id) REFERENCES servicos(id) ON DELETE CASCADE
  17: ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\database\migrations\007_adicionar_valor_servicos_contrato.sql ###

   1: -- Adiciona coluna de valor personalizado na tabela de relacionamento
   2: ALTER TABLE contratos_servicos
   3: ADD COLUMN valor_personalizado DECIMAL(10,2) DEFAULT NULL;

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\public\.htaccess ###

   1: RewriteEngine On
   2: RewriteBase /velezcrm/
   3: 
   4: # Certifica-se de que a requisição não tenta acessar um arquivo ou diretório real
   5: RewriteCond %{REQUEST_FILENAME} !-f
   6: RewriteCond %{REQUEST_FILENAME} !-d
   7: 
   8: # Redireciona tudo para index.php
   9: RewriteRule ^(.*)$ index.php?url=$1 [QSA,L]

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\public\index.php ###

   1: <?php
   2: session_start();
   3: 
   4: require_once __DIR__ . '/../vendor/autoload.php';
   5: require_once __DIR__ . '/../app/Router.php';
   6: 
   7: // Executa o roteador para despachar a requisição
   8: $router->dispatch();

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\public\teste_conexao.php ###

   1: <?php
   2: // Exibição de erros
   3: ini_set('display_errors', 1);
   4: ini_set('display_startup_errors', 1);
   5: error_reporting(E_ALL);
   6: 
   7: // Carrega as configurações
   8: require_once __DIR__ . '/../config/config.php';
   9: 
  10: // Tenta executar uma consulta simples
  11: try {
  12:     global $db;
  13:     $result = $db->query("SHOW TABLES")->fetchAll();
  14:     echo "Conexão estabelecida com sucesso!\n";
  15:     echo "Tabelas encontradas:\n";
  16:     foreach ($result as $row) {
  17:         echo "- " . $row[0] . "\n";
  18:     }
  19: } catch (\Exception $e) {
  20:     echo "Erro: " . $e->getMessage();
  21: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\public\teste_contrato.php ###

   1: <?php
   2: require_once __DIR__ . '/../config/config.php';
   3: use App\Database\Database;
   4: 
   5: try {
   6:     $db = Database::getInstance();
   7:     
   8:     // Primeiro, vamos garantir que existe pelo menos um cliente
   9:     $sql = "INSERT IGNORE INTO clientes (nome, email, telefone) VALUES ('Cliente Teste', 'teste@email.com', '(11) 99999-9999')";
  10:     $db->exec($sql);
  11:     $cliente_id = $db->lastInsertId() ?: 1; // Pega o ID do cliente inserido ou usa 1 se já existia
  12:     
  13:     // Agora vamos inserir um contrato de teste
  14:     $sql = "INSERT INTO contratos (titulo, cliente_id, descricao, valor, status) 
  15:             VALUES ('Contrato de Teste', :cliente_id, 'Descrição do contrato de teste', 1000.00, 'ativo')";
  16:     
  17:     $stmt = $db->prepare($sql);
  18:     $stmt->execute([':cliente_id' => $cliente_id]);
  19:     
  20:     echo "Contrato de teste criado com sucesso!";
  21:     
  22: } catch (Exception $e) {
  23:     echo "Erro ao criar contrato de teste: " . $e->getMessage();
  24: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\public\assets\js\tinymce-config.js ###

   1: // Configuração do TinyMCE em português
   2: tinymce.init({
   3:     selector: '#clausulas',
   4:     language: 'pt_BR',
   5:     language_url: 'https://cdn.tiny.cloud/1/no-api-key/tinymce/6/langs/pt_BR.js',
   6:     height: 400,
   7:     menubar: true,
   8:     plugins: [
   9:         'advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview',
  10:         'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen',
  11:         'insertdatetime', 'media', 'table', 'help', 'wordcount'
  12:     ],
  13:     toolbar: 'undo redo | formatselect | ' +
  14:         'bold italic backcolor | alignleft aligncenter ' +
  15:         'alignright alignjustify | bullist numlist outdent indent | ' +
  16:         'removeformat | help',
  17:     content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }',
  18:     branding: false,
  19:     promotion: false,
  20:     browser_spellcheck: true,
  21:     contextmenu: false,
  22:     setup: function(editor) {
  23:         editor.on('change', function() {
  24:             editor.save();
  25:         });
  26:     },
  27:     // Configurações específicas para contratos
  28:     style_formats: [
  29:         {title: 'Título da Cláusula', format: 'h3'},
  30:         {title: 'Subcláusula', format: 'h4'},
  31:         {title: 'Texto Normal', format: 'p'},
  32:         {title: 'Texto Destacado', inline: 'span', classes: 'highlighted'}
  33:     ],
  34:     content_css: [
  35:         '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
  36:         '//www.tiny.cloud/css/codepen.min.css'
  37:     ]
  38: });

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\public\js\dataTables.pt-BR.json ###

   1: {
   2:     "emptyTable": "Nenhum registro encontrado",
   3:     "info": "Mostrando de _START_ até _END_ de _TOTAL_ registros",
   4:     "infoEmpty": "Mostrando 0 até 0 de 0 registros",
   5:     "infoFiltered": "(Filtrados de _MAX_ registros)",
   6:     "infoThousands": ".",
   7:     "loadingRecords": "Carregando...",
   8:     "processing": "Processando...",
   9:     "zeroRecords": "Nenhum registro encontrado",
  10:     "search": "Pesquisar",
  11:     "paginate": {
  12:         "next": "Próximo",
  13:         "previous": "Anterior",
  14:         "first": "Primeiro",
  15:         "last": "Último"
  16:     },
  17:     "aria": {
  18:         "sortAscending": ": Ordenar colunas de forma ascendente",
  19:         "sortDescending": ": Ordenar colunas de forma descendente"
  20:     },
  21:     "select": {
  22:         "rows": {
  23:             "_": "Selecionado %d linhas",
  24:             "1": "Selecionado 1 linha"
  25:         },
  26:         "cells": {
  27:             "1": "1 célula selecionada",
  28:             "_": "%d células selecionadas"
  29:         },
  30:         "columns": {
  31:             "1": "1 coluna selecionada",
  32:             "_": "%d colunas selecionadas"
  33:         }
  34:     },
  35:     "buttons": {
  36:         "copySuccess": {
  37:             "1": "Uma linha copiada com sucesso",
  38:             "_": "%d linhas copiadas com sucesso"
  39:         },
  40:         "collection": "Coleção  <span class=\"ui-button-icon-primary ui-icon ui-icon-triangle-1-s\"><\/span>",
  41:         "colvis": "Visibilidade da Coluna",
  42:         "colvisRestore": "Restaurar Visibilidade",
  43:         "copy": "Copiar",
  44:         "copyKeys": "Pressione ctrl ou u2318 + C para copiar os dados da tabela para a área de transferência do sistema. Para cancelar, clique nesta mensagem ou pressione Esc..",
  45:         "copyTitle": "Copiar para a Área de Transferência",
  46:         "csv": "CSV",
  47:         "excel": "Excel",
  48:         "pageLength": {
  49:             "-1": "Mostrar todos os registros",
  50:             "_": "Mostrar %d registros"
  51:         },
  52:         "pdf": "PDF",
  53:         "print": "Imprimir"
  54:     },
  55:     "autoFill": {
  56:         "cancel": "Cancelar",
  57:         "fill": "Preencher todas as células com",
  58:         "fillHorizontal": "Preencher células horizontalmente",
  59:         "fillVertical": "Preencher células verticalmente"
  60:     },
  61:     "lengthMenu": "Exibir _MENU_ resultados por página",
  62:     "searchBuilder": {
  63:         "add": "Adicionar Condição",
  64:         "button": {
  65:             "0": "Construtor de Pesquisa",
  66:             "_": "Construtor de Pesquisa (%d)"
  67:         },
  68:         "clearAll": "Limpar Tudo",
  69:         "condition": "Condição",
  70:         "conditions": {
  71:             "date": {
  72:                 "after": "Depois",
  73:                 "before": "Antes",
  74:                 "between": "Entre",
  75:                 "empty": "Vazio",
  76:                 "equals": "Igual",
  77:                 "not": "Não",
  78:                 "notBetween": "Não Entre",
  79:                 "notEmpty": "Não Vazio"
  80:             },
  81:             "number": {
  82:                 "between": "Entre",
  83:                 "empty": "Vazio",
  84:                 "equals": "Igual",
  85:                 "gt": "Maior Que",
  86:                 "gte": "Maior ou Igual a",
  87:                 "lt": "Menor Que",
  88:                 "lte": "Menor ou Igual a",
  89:                 "not": "Não",
  90:                 "notBetween": "Não Entre",
  91:                 "notEmpty": "Não Vazio"
  92:             },
  93:             "string": {
  94:                 "contains": "Contém",
  95:                 "empty": "Vazio",
  96:                 "endsWith": "Termina Com",
  97:                 "equals": "Igual",
  98:                 "not": "Não",
  99:                 "notEmpty": "Não Vazio",
 100:                 "startsWith": "Começa Com"
 101:             }
 102:         },
 103:         "data": "Data",
 104:         "deleteTitle": "Excluir regra de filtragem",
 105:         "logicAnd": "E",
 106:         "logicOr": "Ou",
 107:         "title": {
 108:             "0": "Construtor de Pesquisa",
 109:             "_": "Construtor de Pesquisa (%d)"
 110:         },
 111:         "value": "Valor"
 112:     },
 113:     "searchPanes": {
 114:         "clearMessage": "Limpar Tudo",
 115:         "collapse": {
 116:             "0": "Painéis de Pesquisa",
 117:             "_": "Painéis de Pesquisa (%d)"
 118:         },
 119:         "count": "{total}",
 120:         "countFiltered": "{shown} ({total})",
 121:         "emptyPanes": "Nenhum Painel de Pesquisa",
 122:         "loadMessage": "Carregando Painéis de Pesquisa...",
 123:         "title": "Filtros Ativos"
 124:     },
 125:     "thousands": ".",
 126:     "datetime": {
 127:         "previous": "Anterior",
 128:         "next": "Próximo",
 129:         "hours": "Hora",
 130:         "minutes": "Minuto",
 131:         "seconds": "Segundo",
 132:         "amPm": [
 133:             "am",
 134:             "pm"
 135:         ],
 136:         "unknown": "-",
 137:         "months": {
 138:             "0": "Janeiro",
 139:             "1": "Fevereiro",
 140:             "10": "Novembro",
 141:             "11": "Dezembro",
 142:             "2": "Março",
 143:             "3": "Abril",
 144:             "4": "Maio",
 145:             "5": "Junho",
 146:             "6": "Julho",
 147:             "7": "Agosto",
 148:             "8": "Setembro",
 149:             "9": "Outubro"
 150:         },
 151:         "weekdays": [
 152:             "Domingo",
 153:             "Segunda",
 154:             "Terça",
 155:             "Quarta",
 156:             "Quinta",
 157:             "Sexta",
 158:             "Sábado"
 159:         ]
 160:     },
 161:     "editor": {
 162:         "close": "Fechar",
 163:         "create": {
 164:             "button": "Novo",
 165:             "submit": "Criar",
 166:             "title": "Criar novo registro"
 167:         },
 168:         "edit": {
 169:             "button": "Editar",
 170:             "submit": "Atualizar",
 171:             "title": "Editar registro"
 172:         },
 173:         "error": {
 174:             "system": "Ocorreu um erro no sistema"
 175:         },
 176:         "multi": {
 177:             "info": "Os itens selecionados contêm valores diferentes para esta entrada. Para editar e definir todos os itens para esta entrada com o mesmo valor, clique ou toque aqui, caso contrário, eles manterão seus valores individuais.",
 178:             "noMulti": "Esta entrada pode ser editada individualmente, mas não como parte do grupo",
 179:             "restore": "Desfazer alterações",
 180:             "title": "Multiplos valores"
 181:         },
 182:         "remove": {
 183:             "button": "Remover",
 184:             "confirm": {
 185:                 "_": "Tem certeza que quer deletar %d linhas?",
 186:                 "1": "Tem certeza que quer deletar 1 linha?"
 187:             },
 188:             "submit": "Remover",
 189:             "title": "Remover registro"
 190:         }
 191:     }
 192: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\vendor\autoload.php ###

   1: <?php
   2: 
   3: // autoload.php @generated by Composer
   4: 
   5: if (PHP_VERSION_ID < 50600) {
   6:     if (!headers_sent()) {
   7:         header('HTTP/1.1 500 Internal Server Error');
   8:     }
   9:     $err = 'Composer 2.3.0 dropped support for autoloading on PHP <5.6 and you are running '.PHP_VERSION.', please upgrade PHP or use Composer 2.2 LTS via "composer self-update --2.2". Aborting.'.PHP_EOL;
  10:     if (!ini_get('display_errors')) {
  11:         if (PHP_SAPI === 'cli' || PHP_SAPI === 'phpdbg') {
  12:             fwrite(STDERR, $err);
  13:         } elseif (!headers_sent()) {
  14:             echo $err;
  15:         }
  16:     }
  17:     trigger_error(
  18:         $err,
  19:         E_USER_ERROR
  20:     );
  21: }
  22: 
  23: require_once __DIR__ . '/composer/autoload_real.php';
  24: 
  25: return ComposerAutoloaderInit513b8681c401a11e31a9494297b2e4a9::getLoader();

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\vendor\composer\autoload_classmap.php ###

   1: <?php
   2: 
   3: // autoload_classmap.php @generated by Composer
   4: 
   5: $vendorDir = dirname(__DIR__);
   6: $baseDir = dirname($vendorDir);
   7: 
   8: return array(
   9:     'Composer\\InstalledVersions' => $vendorDir . '/composer/InstalledVersions.php',
  10: );

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\vendor\composer\autoload_namespaces.php ###

   1: <?php
   2: 
   3: // autoload_namespaces.php @generated by Composer
   4: 
   5: $vendorDir = dirname(__DIR__);
   6: $baseDir = dirname($vendorDir);
   7: 
   8: return array(
   9: );

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\vendor\composer\autoload_psr4.php ###

   1: <?php
   2: 
   3: // autoload_psr4.php @generated by Composer
   4: 
   5: $vendorDir = dirname(__DIR__);
   6: $baseDir = dirname($vendorDir);
   7: 
   8: return array(
   9:     'App\\' => array($baseDir . '/app'),
  10: );

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\vendor\composer\autoload_real.php ###

   1: <?php
   2: 
   3: // autoload_real.php @generated by Composer
   4: 
   5: class ComposerAutoloaderInit513b8681c401a11e31a9494297b2e4a9
   6: {
   7:     private static $loader;
   8: 
   9:     public static function loadClassLoader($class)
  10:     {
  11:         if ('Composer\Autoload\ClassLoader' === $class) {
  12:             require __DIR__ . '/ClassLoader.php';
  13:         }
  14:     }
  15: 
  16:     /**
  17:      * @return \Composer\Autoload\ClassLoader
  18:      */
  19:     public static function getLoader()
  20:     {
  21:         if (null !== self::$loader) {
  22:             return self::$loader;
  23:         }
  24: 
  25:         require __DIR__ . '/platform_check.php';
  26: 
  27:         spl_autoload_register(array('ComposerAutoloaderInit513b8681c401a11e31a9494297b2e4a9', 'loadClassLoader'), true, true);
  28:         self::$loader = $loader = new \Composer\Autoload\ClassLoader(\dirname(__DIR__));
  29:         spl_autoload_unregister(array('ComposerAutoloaderInit513b8681c401a11e31a9494297b2e4a9', 'loadClassLoader'));
  30: 
  31:         require __DIR__ . '/autoload_static.php';
  32:         call_user_func(\Composer\Autoload\ComposerStaticInit513b8681c401a11e31a9494297b2e4a9::getInitializer($loader));
  33: 
  34:         $loader->register(true);
  35: 
  36:         return $loader;
  37:     }
  38: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\vendor\composer\autoload_static.php ###

   1: <?php
   2: 
   3: // autoload_static.php @generated by Composer
   4: 
   5: namespace Composer\Autoload;
   6: 
   7: class ComposerStaticInit513b8681c401a11e31a9494297b2e4a9
   8: {
   9:     public static $prefixLengthsPsr4 = array (
  10:         'A' => 
  11:         array (
  12:             'App\\' => 4,
  13:         ),
  14:     );
  15: 
  16:     public static $prefixDirsPsr4 = array (
  17:         'App\\' => 
  18:         array (
  19:             0 => __DIR__ . '/../..' . '/app',
  20:         ),
  21:     );
  22: 
  23:     public static $classMap = array (
  24:         'Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php',
  25:     );
  26: 
  27:     public static function getInitializer(ClassLoader $loader)
  28:     {
  29:         return \Closure::bind(function () use ($loader) {
  30:             $loader->prefixLengthsPsr4 = ComposerStaticInit513b8681c401a11e31a9494297b2e4a9::$prefixLengthsPsr4;
  31:             $loader->prefixDirsPsr4 = ComposerStaticInit513b8681c401a11e31a9494297b2e4a9::$prefixDirsPsr4;
  32:             $loader->classMap = ComposerStaticInit513b8681c401a11e31a9494297b2e4a9::$classMap;
  33: 
  34:         }, null, ClassLoader::class);
  35:     }
  36: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\vendor\composer\ClassLoader.php ###

   1: <?php
   2: 
   3: /*
   4:  * This file is part of Composer.
   5:  *
   6:  * (c) Nils Adermann <naderman@naderman.de>
   7:  *     Jordi Boggiano <j.boggiano@seld.be>
   8:  *
   9:  * For the full copyright and license information, please view the LICENSE
  10:  * file that was distributed with this source code.
  11:  */
  12: 
  13: namespace Composer\Autoload;
  14: 
  15: /**
  16:  * ClassLoader implements a PSR-0, PSR-4 and classmap class loader.
  17:  *
  18:  *     $loader = new \Composer\Autoload\ClassLoader();
  19:  *
  20:  *     // register classes with namespaces
  21:  *     $loader->add('Symfony\Component', __DIR__.'/component');
  22:  *     $loader->add('Symfony',           __DIR__.'/framework');
  23:  *
  24:  *     // activate the autoloader
  25:  *     $loader->register();
  26:  *
  27:  *     // to enable searching the include path (eg. for PEAR packages)
  28:  *     $loader->setUseIncludePath(true);
  29:  *
  30:  * In this example, if you try to use a class in the Symfony\Component
  31:  * namespace or one of its children (Symfony\Component\Console for instance),
  32:  * the autoloader will first look for the class under the component/
  33:  * directory, and it will then fallback to the framework/ directory if not
  34:  * found before giving up.
  35:  *
  36:  * This class is loosely based on the Symfony UniversalClassLoader.
  37:  *
  38:  * @author Fabien Potencier <fabien@symfony.com>
  39:  * @author Jordi Boggiano <j.boggiano@seld.be>
  40:  * @see    https://www.php-fig.org/psr/psr-0/
  41:  * @see    https://www.php-fig.org/psr/psr-4/
  42:  */
  43: class ClassLoader
  44: {
  45:     /** @var \Closure(string):void */
  46:     private static $includeFile;
  47: 
  48:     /** @var string|null */
  49:     private $vendorDir;
  50: 
  51:     // PSR-4
  52:     /**
  53:      * @var array<string, array<string, int>>
  54:      */
  55:     private $prefixLengthsPsr4 = array();
  56:     /**
  57:      * @var array<string, list<string>>
  58:      */
  59:     private $prefixDirsPsr4 = array();
  60:     /**
  61:      * @var list<string>
  62:      */
  63:     private $fallbackDirsPsr4 = array();
  64: 
  65:     // PSR-0
  66:     /**
  67:      * List of PSR-0 prefixes
  68:      *
  69:      * Structured as array('F (first letter)' => array('Foo\Bar (full prefix)' => array('path', 'path2')))
  70:      *
  71:      * @var array<string, array<string, list<string>>>
  72:      */
  73:     private $prefixesPsr0 = array();
  74:     /**
  75:      * @var list<string>
  76:      */
  77:     private $fallbackDirsPsr0 = array();
  78: 
  79:     /** @var bool */
  80:     private $useIncludePath = false;
  81: 
  82:     /**
  83:      * @var array<string, string>
  84:      */
  85:     private $classMap = array();
  86: 
  87:     /** @var bool */
  88:     private $classMapAuthoritative = false;
  89: 
  90:     /**
  91:      * @var array<string, bool>
  92:      */
  93:     private $missingClasses = array();
  94: 
  95:     /** @var string|null */
  96:     private $apcuPrefix;
  97: 
  98:     /**
  99:      * @var array<string, self>
 100:      */
 101:     private static $registeredLoaders = array();
 102: 
 103:     /**
 104:      * @param string|null $vendorDir
 105:      */
 106:     public function __construct($vendorDir = null)
 107:     {
 108:         $this->vendorDir = $vendorDir;
 109:         self::initializeIncludeClosure();
 110:     }
 111: 
 112:     /**
 113:      * @return array<string, list<string>>
 114:      */
 115:     public function getPrefixes()
 116:     {
 117:         if (!empty($this->prefixesPsr0)) {
 118:             return call_user_func_array('array_merge', array_values($this->prefixesPsr0));
 119:         }
 120: 
 121:         return array();
 122:     }
 123: 
 124:     /**
 125:      * @return array<string, list<string>>
 126:      */
 127:     public function getPrefixesPsr4()
 128:     {
 129:         return $this->prefixDirsPsr4;
 130:     }
 131: 
 132:     /**
 133:      * @return list<string>
 134:      */
 135:     public function getFallbackDirs()
 136:     {
 137:         return $this->fallbackDirsPsr0;
 138:     }
 139: 
 140:     /**
 141:      * @return list<string>
 142:      */
 143:     public function getFallbackDirsPsr4()
 144:     {
 145:         return $this->fallbackDirsPsr4;
 146:     }
 147: 
 148:     /**
 149:      * @return array<string, string> Array of classname => path
 150:      */
 151:     public function getClassMap()
 152:     {
 153:         return $this->classMap;
 154:     }
 155: 
 156:     /**
 157:      * @param array<string, string> $classMap Class to filename map
 158:      *
 159:      * @return void
 160:      */
 161:     public function addClassMap(array $classMap)
 162:     {
 163:         if ($this->classMap) {
 164:             $this->classMap = array_merge($this->classMap, $classMap);
 165:         } else {
 166:             $this->classMap = $classMap;
 167:         }
 168:     }
 169: 
 170:     /**
 171:      * Registers a set of PSR-0 directories for a given prefix, either
 172:      * appending or prepending to the ones previously set for this prefix.
 173:      *
 174:      * @param string              $prefix  The prefix
 175:      * @param list<string>|string $paths   The PSR-0 root directories
 176:      * @param bool                $prepend Whether to prepend the directories
 177:      *
 178:      * @return void
 179:      */
 180:     public function add($prefix, $paths, $prepend = false)
 181:     {
 182:         $paths = (array) $paths;
 183:         if (!$prefix) {
 184:             if ($prepend) {
 185:                 $this->fallbackDirsPsr0 = array_merge(
 186:                     $paths,
 187:                     $this->fallbackDirsPsr0
 188:                 );
 189:             } else {
 190:                 $this->fallbackDirsPsr0 = array_merge(
 191:                     $this->fallbackDirsPsr0,
 192:                     $paths
 193:                 );
 194:             }
 195: 
 196:             return;
 197:         }
 198: 
 199:         $first = $prefix[0];
 200:         if (!isset($this->prefixesPsr0[$first][$prefix])) {
 201:             $this->prefixesPsr0[$first][$prefix] = $paths;
 202: 
 203:             return;
 204:         }
 205:         if ($prepend) {
 206:             $this->prefixesPsr0[$first][$prefix] = array_merge(
 207:                 $paths,
 208:                 $this->prefixesPsr0[$first][$prefix]
 209:             );
 210:         } else {
 211:             $this->prefixesPsr0[$first][$prefix] = array_merge(
 212:                 $this->prefixesPsr0[$first][$prefix],
 213:                 $paths
 214:             );
 215:         }
 216:     }
 217: 
 218:     /**
 219:      * Registers a set of PSR-4 directories for a given namespace, either
 220:      * appending or prepending to the ones previously set for this namespace.
 221:      *
 222:      * @param string              $prefix  The prefix/namespace, with trailing '\\'
 223:      * @param list<string>|string $paths   The PSR-4 base directories
 224:      * @param bool                $prepend Whether to prepend the directories
 225:      *
 226:      * @throws \InvalidArgumentException
 227:      *
 228:      * @return void
 229:      */
 230:     public function addPsr4($prefix, $paths, $prepend = false)
 231:     {
 232:         $paths = (array) $paths;
 233:         if (!$prefix) {
 234:             // Register directories for the root namespace.
 235:             if ($prepend) {
 236:                 $this->fallbackDirsPsr4 = array_merge(
 237:                     $paths,
 238:                     $this->fallbackDirsPsr4
 239:                 );
 240:             } else {
 241:                 $this->fallbackDirsPsr4 = array_merge(
 242:                     $this->fallbackDirsPsr4,
 243:                     $paths
 244:                 );
 245:             }
 246:         } elseif (!isset($this->prefixDirsPsr4[$prefix])) {
 247:             // Register directories for a new namespace.
 248:             $length = strlen($prefix);
 249:             if ('\\' !== $prefix[$length - 1]) {
 250:                 throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");
 251:             }
 252:             $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;
 253:             $this->prefixDirsPsr4[$prefix] = $paths;
 254:         } elseif ($prepend) {
 255:             // Prepend directories for an already registered namespace.
 256:             $this->prefixDirsPsr4[$prefix] = array_merge(
 257:                 $paths,
 258:                 $this->prefixDirsPsr4[$prefix]
 259:             );
 260:         } else {
 261:             // Append directories for an already registered namespace.
 262:             $this->prefixDirsPsr4[$prefix] = array_merge(
 263:                 $this->prefixDirsPsr4[$prefix],
 264:                 $paths
 265:             );
 266:         }
 267:     }
 268: 
 269:     /**
 270:      * Registers a set of PSR-0 directories for a given prefix,
 271:      * replacing any others previously set for this prefix.
 272:      *
 273:      * @param string              $prefix The prefix
 274:      * @param list<string>|string $paths  The PSR-0 base directories
 275:      *
 276:      * @return void
 277:      */
 278:     public function set($prefix, $paths)
 279:     {
 280:         if (!$prefix) {
 281:             $this->fallbackDirsPsr0 = (array) $paths;
 282:         } else {
 283:             $this->prefixesPsr0[$prefix[0]][$prefix] = (array) $paths;
 284:         }
 285:     }
 286: 
 287:     /**
 288:      * Registers a set of PSR-4 directories for a given namespace,
 289:      * replacing any others previously set for this namespace.
 290:      *
 291:      * @param string              $prefix The prefix/namespace, with trailing '\\'
 292:      * @param list<string>|string $paths  The PSR-4 base directories
 293:      *
 294:      * @throws \InvalidArgumentException
 295:      *
 296:      * @return void
 297:      */
 298:     public function setPsr4($prefix, $paths)
 299:     {
 300:         if (!$prefix) {
 301:             $this->fallbackDirsPsr4 = (array) $paths;
 302:         } else {
 303:             $length = strlen($prefix);
 304:             if ('\\' !== $prefix[$length - 1]) {
 305:                 throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");
 306:             }
 307:             $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;
 308:             $this->prefixDirsPsr4[$prefix] = (array) $paths;
 309:         }
 310:     }
 311: 
 312:     /**
 313:      * Turns on searching the include path for class files.
 314:      *
 315:      * @param bool $useIncludePath
 316:      *
 317:      * @return void
 318:      */
 319:     public function setUseIncludePath($useIncludePath)
 320:     {
 321:         $this->useIncludePath = $useIncludePath;
 322:     }
 323: 
 324:     /**
 325:      * Can be used to check if the autoloader uses the include path to check
 326:      * for classes.
 327:      *
 328:      * @return bool
 329:      */
 330:     public function getUseIncludePath()
 331:     {
 332:         return $this->useIncludePath;
 333:     }
 334: 
 335:     /**
 336:      * Turns off searching the prefix and fallback directories for classes
 337:      * that have not been registered with the class map.
 338:      *
 339:      * @param bool $classMapAuthoritative
 340:      *
 341:      * @return void
 342:      */
 343:     public function setClassMapAuthoritative($classMapAuthoritative)
 344:     {
 345:         $this->classMapAuthoritative = $classMapAuthoritative;
 346:     }
 347: 
 348:     /**
 349:      * Should class lookup fail if not found in the current class map?
 350:      *
 351:      * @return bool
 352:      */
 353:     public function isClassMapAuthoritative()
 354:     {
 355:         return $this->classMapAuthoritative;
 356:     }
 357: 
 358:     /**
 359:      * APCu prefix to use to cache found/not-found classes, if the extension is enabled.
 360:      *
 361:      * @param string|null $apcuPrefix
 362:      *
 363:      * @return void
 364:      */
 365:     public function setApcuPrefix($apcuPrefix)
 366:     {
 367:         $this->apcuPrefix = function_exists('apcu_fetch') && filter_var(ini_get('apc.enabled'), FILTER_VALIDATE_BOOLEAN) ? $apcuPrefix : null;
 368:     }
 369: 
 370:     /**
 371:      * The APCu prefix in use, or null if APCu caching is not enabled.
 372:      *
 373:      * @return string|null
 374:      */
 375:     public function getApcuPrefix()
 376:     {
 377:         return $this->apcuPrefix;
 378:     }
 379: 
 380:     /**
 381:      * Registers this instance as an autoloader.
 382:      *
 383:      * @param bool $prepend Whether to prepend the autoloader or not
 384:      *
 385:      * @return void
 386:      */
 387:     public function register($prepend = false)
 388:     {
 389:         spl_autoload_register(array($this, 'loadClass'), true, $prepend);
 390: 
 391:         if (null === $this->vendorDir) {
 392:             return;
 393:         }
 394: 
 395:         if ($prepend) {
 396:             self::$registeredLoaders = array($this->vendorDir => $this) + self::$registeredLoaders;
 397:         } else {
 398:             unset(self::$registeredLoaders[$this->vendorDir]);
 399:             self::$registeredLoaders[$this->vendorDir] = $this;
 400:         }
 401:     }
 402: 
 403:     /**
 404:      * Unregisters this instance as an autoloader.
 405:      *
 406:      * @return void
 407:      */
 408:     public function unregister()
 409:     {
 410:         spl_autoload_unregister(array($this, 'loadClass'));
 411: 
 412:         if (null !== $this->vendorDir) {
 413:             unset(self::$registeredLoaders[$this->vendorDir]);
 414:         }
 415:     }
 416: 
 417:     /**
 418:      * Loads the given class or interface.
 419:      *
 420:      * @param  string    $class The name of the class
 421:      * @return true|null True if loaded, null otherwise
 422:      */
 423:     public function loadClass($class)
 424:     {
 425:         if ($file = $this->findFile($class)) {
 426:             $includeFile = self::$includeFile;
 427:             $includeFile($file);
 428: 
 429:             return true;
 430:         }
 431: 
 432:         return null;
 433:     }
 434: 
 435:     /**
 436:      * Finds the path to the file where the class is defined.
 437:      *
 438:      * @param string $class The name of the class
 439:      *
 440:      * @return string|false The path if found, false otherwise
 441:      */
 442:     public function findFile($class)
 443:     {
 444:         // class map lookup
 445:         if (isset($this->classMap[$class])) {
 446:             return $this->classMap[$class];
 447:         }
 448:         if ($this->classMapAuthoritative || isset($this->missingClasses[$class])) {
 449:             return false;
 450:         }
 451:         if (null !== $this->apcuPrefix) {
 452:             $file = apcu_fetch($this->apcuPrefix.$class, $hit);
 453:             if ($hit) {
 454:                 return $file;
 455:             }
 456:         }
 457: 
 458:         $file = $this->findFileWithExtension($class, '.php');
 459: 
 460:         // Search for Hack files if we are running on HHVM
 461:         if (false === $file && defined('HHVM_VERSION')) {
 462:             $file = $this->findFileWithExtension($class, '.hh');
 463:         }
 464: 
 465:         if (null !== $this->apcuPrefix) {
 466:             apcu_add($this->apcuPrefix.$class, $file);
 467:         }
 468: 
 469:         if (false === $file) {
 470:             // Remember that this class does not exist.
 471:             $this->missingClasses[$class] = true;
 472:         }
 473: 
 474:         return $file;
 475:     }
 476: 
 477:     /**
 478:      * Returns the currently registered loaders keyed by their corresponding vendor directories.
 479:      *
 480:      * @return array<string, self>
 481:      */
 482:     public static function getRegisteredLoaders()
 483:     {
 484:         return self::$registeredLoaders;
 485:     }
 486: 
 487:     /**
 488:      * @param  string       $class
 489:      * @param  string       $ext
 490:      * @return string|false
 491:      */
 492:     private function findFileWithExtension($class, $ext)
 493:     {
 494:         // PSR-4 lookup
 495:         $logicalPathPsr4 = strtr($class, '\\', DIRECTORY_SEPARATOR) . $ext;
 496: 
 497:         $first = $class[0];
 498:         if (isset($this->prefixLengthsPsr4[$first])) {
 499:             $subPath = $class;
 500:             while (false !== $lastPos = strrpos($subPath, '\\')) {
 501:                 $subPath = substr($subPath, 0, $lastPos);
 502:                 $search = $subPath . '\\';
 503:                 if (isset($this->prefixDirsPsr4[$search])) {
 504:                     $pathEnd = DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $lastPos + 1);
 505:                     foreach ($this->prefixDirsPsr4[$search] as $dir) {
 506:                         if (file_exists($file = $dir . $pathEnd)) {
 507:                             return $file;
 508:                         }
 509:                     }
 510:                 }
 511:             }
 512:         }
 513: 
 514:         // PSR-4 fallback dirs
 515:         foreach ($this->fallbackDirsPsr4 as $dir) {
 516:             if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr4)) {
 517:                 return $file;
 518:             }
 519:         }
 520: 
 521:         // PSR-0 lookup
 522:         if (false !== $pos = strrpos($class, '\\')) {
 523:             // namespaced class name
 524:             $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)
 525:                 . strtr(substr($logicalPathPsr4, $pos + 1), '_', DIRECTORY_SEPARATOR);
 526:         } else {
 527:             // PEAR-like class name
 528:             $logicalPathPsr0 = strtr($class, '_', DIRECTORY_SEPARATOR) . $ext;
 529:         }
 530: 
 531:         if (isset($this->prefixesPsr0[$first])) {
 532:             foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {
 533:                 if (0 === strpos($class, $prefix)) {
 534:                     foreach ($dirs as $dir) {
 535:                         if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {
 536:                             return $file;
 537:                         }
 538:                     }
 539:                 }
 540:             }
 541:         }
 542: 
 543:         // PSR-0 fallback dirs
 544:         foreach ($this->fallbackDirsPsr0 as $dir) {
 545:             if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {
 546:                 return $file;
 547:             }
 548:         }
 549: 
 550:         // PSR-0 include paths.
 551:         if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {
 552:             return $file;
 553:         }
 554: 
 555:         return false;
 556:     }
 557: 
 558:     /**
 559:      * @return void
 560:      */
 561:     private static function initializeIncludeClosure()
 562:     {
 563:         if (self::$includeFile !== null) {
 564:             return;
 565:         }
 566: 
 567:         /**
 568:          * Scope isolated include.
 569:          *
 570:          * Prevents access to $this/self from included files.
 571:          *
 572:          * @param  string $file
 573:          * @return void
 574:          */
 575:         self::$includeFile = \Closure::bind(static function($file) {
 576:             include $file;
 577:         }, null, null);
 578:     }
 579: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\vendor\composer\installed.json ###

   1: {
   2:     "packages": [],
   3:     "dev": true,
   4:     "dev-package-names": []
   5: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\vendor\composer\installed.php ###

   1: <?php return array(
   2:     'root' => array(
   3:         'name' => 'velez/crm',
   4:         'pretty_version' => 'dev-master',
   5:         'version' => 'dev-master',
   6:         'reference' => '61da8096a24857935ef9ab8660d3e3bd8651d558',
   7:         'type' => 'project',
   8:         'install_path' => __DIR__ . '/../../',
   9:         'aliases' => array(),
  10:         'dev' => true,
  11:     ),
  12:     'versions' => array(
  13:         'velez/crm' => array(
  14:             'pretty_version' => 'dev-master',
  15:             'version' => 'dev-master',
  16:             'reference' => '61da8096a24857935ef9ab8660d3e3bd8651d558',
  17:             'type' => 'project',
  18:             'install_path' => __DIR__ . '/../../',
  19:             'aliases' => array(),
  20:             'dev_requirement' => false,
  21:         ),
  22:     ),
  23: );

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\vendor\composer\InstalledVersions.php ###

   1: <?php
   2: 
   3: /*
   4:  * This file is part of Composer.
   5:  *
   6:  * (c) Nils Adermann <naderman@naderman.de>
   7:  *     Jordi Boggiano <j.boggiano@seld.be>
   8:  *
   9:  * For the full copyright and license information, please view the LICENSE
  10:  * file that was distributed with this source code.
  11:  */
  12: 
  13: namespace Composer;
  14: 
  15: use Composer\Autoload\ClassLoader;
  16: use Composer\Semver\VersionParser;
  17: 
  18: /**
  19:  * This class is copied in every Composer installed project and available to all
  20:  *
  21:  * See also https://getcomposer.org/doc/07-runtime.md#installed-versions
  22:  *
  23:  * To require its presence, you can require `composer-runtime-api ^2.0`
  24:  *
  25:  * @final
  26:  */
  27: class InstalledVersions
  28: {
  29:     /**
  30:      * @var mixed[]|null
  31:      * @psalm-var array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}|array{}|null
  32:      */
  33:     private static $installed;
  34: 
  35:     /**
  36:      * @var bool
  37:      */
  38:     private static $installedIsLocalDir;
  39: 
  40:     /**
  41:      * @var bool|null
  42:      */
  43:     private static $canGetVendors;
  44: 
  45:     /**
  46:      * @var array[]
  47:      * @psalm-var array<string, array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>
  48:      */
  49:     private static $installedByVendor = array();
  50: 
  51:     /**
  52:      * Returns a list of all package names which are present, either by being installed, replaced or provided
  53:      *
  54:      * @return string[]
  55:      * @psalm-return list<string>
  56:      */
  57:     public static function getInstalledPackages()
  58:     {
  59:         $packages = array();
  60:         foreach (self::getInstalled() as $installed) {
  61:             $packages[] = array_keys($installed['versions']);
  62:         }
  63: 
  64:         if (1 === \count($packages)) {
  65:             return $packages[0];
  66:         }
  67: 
  68:         return array_keys(array_flip(\call_user_func_array('array_merge', $packages)));
  69:     }
  70: 
  71:     /**
  72:      * Returns a list of all package names with a specific type e.g. 'library'
  73:      *
  74:      * @param  string   $type
  75:      * @return string[]
  76:      * @psalm-return list<string>
  77:      */
  78:     public static function getInstalledPackagesByType($type)
  79:     {
  80:         $packagesByType = array();
  81: 
  82:         foreach (self::getInstalled() as $installed) {
  83:             foreach ($installed['versions'] as $name => $package) {
  84:                 if (isset($package['type']) && $package['type'] === $type) {
  85:                     $packagesByType[] = $name;
  86:                 }
  87:             }
  88:         }
  89: 
  90:         return $packagesByType;
  91:     }
  92: 
  93:     /**
  94:      * Checks whether the given package is installed
  95:      *
  96:      * This also returns true if the package name is provided or replaced by another package
  97:      *
  98:      * @param  string $packageName
  99:      * @param  bool   $includeDevRequirements
 100:      * @return bool
 101:      */
 102:     public static function isInstalled($packageName, $includeDevRequirements = true)
 103:     {
 104:         foreach (self::getInstalled() as $installed) {
 105:             if (isset($installed['versions'][$packageName])) {
 106:                 return $includeDevRequirements || !isset($installed['versions'][$packageName]['dev_requirement']) || $installed['versions'][$packageName]['dev_requirement'] === false;
 107:             }
 108:         }
 109: 
 110:         return false;
 111:     }
 112: 
 113:     /**
 114:      * Checks whether the given package satisfies a version constraint
 115:      *
 116:      * e.g. If you want to know whether version 2.3+ of package foo/bar is installed, you would call:
 117:      *
 118:      *   Composer\InstalledVersions::satisfies(new VersionParser, 'foo/bar', '^2.3')
 119:      *
 120:      * @param  VersionParser $parser      Install composer/semver to have access to this class and functionality
 121:      * @param  string        $packageName
 122:      * @param  string|null   $constraint  A version constraint to check for, if you pass one you have to make sure composer/semver is required by your package
 123:      * @return bool
 124:      */
 125:     public static function satisfies(VersionParser $parser, $packageName, $constraint)
 126:     {
 127:         $constraint = $parser->parseConstraints((string) $constraint);
 128:         $provided = $parser->parseConstraints(self::getVersionRanges($packageName));
 129: 
 130:         return $provided->matches($constraint);
 131:     }
 132: 
 133:     /**
 134:      * Returns a version constraint representing all the range(s) which are installed for a given package
 135:      *
 136:      * It is easier to use this via isInstalled() with the $constraint argument if you need to check
 137:      * whether a given version of a package is installed, and not just whether it exists
 138:      *
 139:      * @param  string $packageName
 140:      * @return string Version constraint usable with composer/semver
 141:      */
 142:     public static function getVersionRanges($packageName)
 143:     {
 144:         foreach (self::getInstalled() as $installed) {
 145:             if (!isset($installed['versions'][$packageName])) {
 146:                 continue;
 147:             }
 148: 
 149:             $ranges = array();
 150:             if (isset($installed['versions'][$packageName]['pretty_version'])) {
 151:                 $ranges[] = $installed['versions'][$packageName]['pretty_version'];
 152:             }
 153:             if (array_key_exists('aliases', $installed['versions'][$packageName])) {
 154:                 $ranges = array_merge($ranges, $installed['versions'][$packageName]['aliases']);
 155:             }
 156:             if (array_key_exists('replaced', $installed['versions'][$packageName])) {
 157:                 $ranges = array_merge($ranges, $installed['versions'][$packageName]['replaced']);
 158:             }
 159:             if (array_key_exists('provided', $installed['versions'][$packageName])) {
 160:                 $ranges = array_merge($ranges, $installed['versions'][$packageName]['provided']);
 161:             }
 162: 
 163:             return implode(' || ', $ranges);
 164:         }
 165: 
 166:         throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
 167:     }
 168: 
 169:     /**
 170:      * @param  string      $packageName
 171:      * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present
 172:      */
 173:     public static function getVersion($packageName)
 174:     {
 175:         foreach (self::getInstalled() as $installed) {
 176:             if (!isset($installed['versions'][$packageName])) {
 177:                 continue;
 178:             }
 179: 
 180:             if (!isset($installed['versions'][$packageName]['version'])) {
 181:                 return null;
 182:             }
 183: 
 184:             return $installed['versions'][$packageName]['version'];
 185:         }
 186: 
 187:         throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
 188:     }
 189: 
 190:     /**
 191:      * @param  string      $packageName
 192:      * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present
 193:      */
 194:     public static function getPrettyVersion($packageName)
 195:     {
 196:         foreach (self::getInstalled() as $installed) {
 197:             if (!isset($installed['versions'][$packageName])) {
 198:                 continue;
 199:             }
 200: 
 201:             if (!isset($installed['versions'][$packageName]['pretty_version'])) {
 202:                 return null;
 203:             }
 204: 
 205:             return $installed['versions'][$packageName]['pretty_version'];
 206:         }
 207: 
 208:         throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
 209:     }
 210: 
 211:     /**
 212:      * @param  string      $packageName
 213:      * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as reference
 214:      */
 215:     public static function getReference($packageName)
 216:     {
 217:         foreach (self::getInstalled() as $installed) {
 218:             if (!isset($installed['versions'][$packageName])) {
 219:                 continue;
 220:             }
 221: 
 222:             if (!isset($installed['versions'][$packageName]['reference'])) {
 223:                 return null;
 224:             }
 225: 
 226:             return $installed['versions'][$packageName]['reference'];
 227:         }
 228: 
 229:         throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
 230:     }
 231: 
 232:     /**
 233:      * @param  string      $packageName
 234:      * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as install path. Packages of type metapackages also have a null install path.
 235:      */
 236:     public static function getInstallPath($packageName)
 237:     {
 238:         foreach (self::getInstalled() as $installed) {
 239:             if (!isset($installed['versions'][$packageName])) {
 240:                 continue;
 241:             }
 242: 
 243:             return isset($installed['versions'][$packageName]['install_path']) ? $installed['versions'][$packageName]['install_path'] : null;
 244:         }
 245: 
 246:         throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
 247:     }
 248: 
 249:     /**
 250:      * @return array
 251:      * @psalm-return array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}
 252:      */
 253:     public static function getRootPackage()
 254:     {
 255:         $installed = self::getInstalled();
 256: 
 257:         return $installed[0]['root'];
 258:     }
 259: 
 260:     /**
 261:      * Returns the raw installed.php data for custom implementations
 262:      *
 263:      * @deprecated Use getAllRawData() instead which returns all datasets for all autoloaders present in the process. getRawData only returns the first dataset loaded, which may not be what you expect.
 264:      * @return array[]
 265:      * @psalm-return array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}
 266:      */
 267:     public static function getRawData()
 268:     {
 269:         @trigger_error('getRawData only returns the first dataset loaded, which may not be what you expect. Use getAllRawData() instead which returns all datasets for all autoloaders present in the process.', E_USER_DEPRECATED);
 270: 
 271:         if (null === self::$installed) {
 272:             // only require the installed.php file if this file is loaded from its dumped location,
 273:             // and not from its source location in the composer/composer package, see https://github.com/composer/composer/issues/9937
 274:             if (substr(__DIR__, -8, 1) !== 'C') {
 275:                 self::$installed = include __DIR__ . '/installed.php';
 276:             } else {
 277:                 self::$installed = array();
 278:             }
 279:         }
 280: 
 281:         return self::$installed;
 282:     }
 283: 
 284:     /**
 285:      * Returns the raw data of all installed.php which are currently loaded for custom implementations
 286:      *
 287:      * @return array[]
 288:      * @psalm-return list<array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>
 289:      */
 290:     public static function getAllRawData()
 291:     {
 292:         return self::getInstalled();
 293:     }
 294: 
 295:     /**
 296:      * Lets you reload the static array from another file
 297:      *
 298:      * This is only useful for complex integrations in which a project needs to use
 299:      * this class but then also needs to execute another project's autoloader in process,
 300:      * and wants to ensure both projects have access to their version of installed.php.
 301:      *
 302:      * A typical case would be PHPUnit, where it would need to make sure it reads all
 303:      * the data it needs from this class, then call reload() with
 304:      * `require $CWD/vendor/composer/installed.php` (or similar) as input to make sure
 305:      * the project in which it runs can then also use this class safely, without
 306:      * interference between PHPUnit's dependencies and the project's dependencies.
 307:      *
 308:      * @param  array[] $data A vendor/composer/installed.php data set
 309:      * @return void
 310:      *
 311:      * @psalm-param array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>} $data
 312:      */
 313:     public static function reload($data)
 314:     {
 315:         self::$installed = $data;
 316:         self::$installedByVendor = array();
 317: 
 318:         // when using reload, we disable the duplicate protection to ensure that self::$installed data is
 319:         // always returned, but we cannot know whether it comes from the installed.php in __DIR__ or not,
 320:         // so we have to assume it does not, and that may result in duplicate data being returned when listing
 321:         // all installed packages for example
 322:         self::$installedIsLocalDir = false;
 323:     }
 324: 
 325:     /**
 326:      * @return array[]
 327:      * @psalm-return list<array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>
 328:      */
 329:     private static function getInstalled()
 330:     {
 331:         if (null === self::$canGetVendors) {
 332:             self::$canGetVendors = method_exists('Composer\Autoload\ClassLoader', 'getRegisteredLoaders');
 333:         }
 334: 
 335:         $installed = array();
 336:         $copiedLocalDir = false;
 337: 
 338:         if (self::$canGetVendors) {
 339:             $selfDir = strtr(__DIR__, '\\', '/');
 340:             foreach (ClassLoader::getRegisteredLoaders() as $vendorDir => $loader) {
 341:                 $vendorDir = strtr($vendorDir, '\\', '/');
 342:                 if (isset(self::$installedByVendor[$vendorDir])) {
 343:                     $installed[] = self::$installedByVendor[$vendorDir];
 344:                 } elseif (is_file($vendorDir.'/composer/installed.php')) {
 345:                     /** @var array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>} $required */
 346:                     $required = require $vendorDir.'/composer/installed.php';
 347:                     self::$installedByVendor[$vendorDir] = $required;
 348:                     $installed[] = $required;
 349:                     if (self::$installed === null && $vendorDir.'/composer' === $selfDir) {
 350:                         self::$installed = $required;
 351:                         self::$installedIsLocalDir = true;
 352:                     }
 353:                 }
 354:                 if (self::$installedIsLocalDir && $vendorDir.'/composer' === $selfDir) {
 355:                     $copiedLocalDir = true;
 356:                 }
 357:             }
 358:         }
 359: 
 360:         if (null === self::$installed) {
 361:             // only require the installed.php file if this file is loaded from its dumped location,
 362:             // and not from its source location in the composer/composer package, see https://github.com/composer/composer/issues/9937
 363:             if (substr(__DIR__, -8, 1) !== 'C') {
 364:                 /** @var array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>} $required */
 365:                 $required = require __DIR__ . '/installed.php';
 366:                 self::$installed = $required;
 367:             } else {
 368:                 self::$installed = array();
 369:             }
 370:         }
 371: 
 372:         if (self::$installed !== array() && !$copiedLocalDir) {
 373:             $installed[] = self::$installed;
 374:         }
 375: 
 376:         return $installed;
 377:     }
 378: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\vendor\composer\LICENSE ###

   1: 
   2: Copyright (c) Nils Adermann, Jordi Boggiano
   3: 
   4: Permission is hereby granted, free of charge, to any person obtaining a copy
   5: of this software and associated documentation files (the "Software"), to deal
   6: in the Software without restriction, including without limitation the rights
   7: to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   8: copies of the Software, and to permit persons to whom the Software is furnished
   9: to do so, subject to the following conditions:
  10: 
  11: The above copyright notice and this permission notice shall be included in all
  12: copies or substantial portions of the Software.
  13: 
  14: THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  15: IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  16: FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  17: AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  18: LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  19: OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  20: THE SOFTWARE.
  21: 

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\vendor\composer\platform_check.php ###

   1: <?php
   2: 
   3: // platform_check.php @generated by Composer
   4: 
   5: $issues = array();
   6: 
   7: if (!(PHP_VERSION_ID >= 70400)) {
   8:     $issues[] = 'Your Composer dependencies require a PHP version ">= 7.4.0". You are running ' . PHP_VERSION . '.';
   9: }
  10: 
  11: if ($issues) {
  12:     if (!headers_sent()) {
  13:         header('HTTP/1.1 500 Internal Server Error');
  14:     }
  15:     if (!ini_get('display_errors')) {
  16:         if (PHP_SAPI === 'cli' || PHP_SAPI === 'phpdbg') {
  17:             fwrite(STDERR, 'Composer detected issues in your platform:' . PHP_EOL.PHP_EOL . implode(PHP_EOL, $issues) . PHP_EOL.PHP_EOL);
  18:         } elseif (!headers_sent()) {
  19:             echo 'Composer detected issues in your platform:' . PHP_EOL.PHP_EOL . str_replace('You are running '.PHP_VERSION.'.', '', implode(PHP_EOL, $issues)) . PHP_EOL.PHP_EOL;
  20:         }
  21:     }
  22:     trigger_error(
  23:         'Composer detected issues in your platform: ' . implode(' ', $issues),
  24:         E_USER_ERROR
  25:     );
  26: }

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\views\auth\login.php ###

   1: <!DOCTYPE html>
   2: <html lang="pt-br">
   3: 
   4: <head>
   5:     <meta charset="UTF-8">
   6:     <meta name="viewport" content="width=device-width, initial-scale=1.0">
   7:     <title>Login - VelezCRM</title>
   8:     <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/admin-lte@3.1/dist/css/adminlte.min.css">
   9: </head>
  10: 
  11: <body class="hold-transition login-page">
  12:     <div class="login-box">
  13:         <div class="login-logo">
  14:             <b>Velez</b>CRM
  15:         </div>
  16:         <div class="card">
  17:             <div class="card-body login-card-body">
  18:                 <p class="login-box-msg">Faça login para acessar</p>
  19: 
  20:                 <?php if (isset($_SESSION['flash'])): ?>
  21:                     <div class="alert alert-danger"><?= $_SESSION['flash'];
  22:                                                     unset($_SESSION['flash']); ?></div>
  23:                 <?php endif; ?>
  24: 
  25:                 <form action="<?= BASE_URL ?>/login" method="post">
  26:                     <div class="input-group mb-3">
  27:                         <input type="email" name="email" class="form-control" placeholder="Email" required>
  28:                         <div class="input-group-append">
  29:                             <div class="input-group-text"><span class="fas fa-envelope"></span></div>
  30:                         </div>
  31:                     </div>
  32:                     <div class="input-group mb-3">
  33:                         <input type="password" name="senha" class="form-control" placeholder="Senha" required>
  34:                         <div class="input-group-append">
  35:                             <div class="input-group-text"><span class="fas fa-lock"></span></div>
  36:                         </div>
  37:                     </div>
  38:                     <div class="row">
  39:                         <div class="col-12">
  40:                             <button type="submit" class="btn btn-primary btn-block">Entrar</button>
  41:                         </div>
  42:                     </div>
  43:                 </form>
  44:             </div>
  45:         </div>
  46:     </div>
  47: 
  48:     <script src="https://cdn.jsdelivr.net/npm/admin-lte@3.1/plugins/jquery/jquery.min.js"></script>
  49:     <script src="https://cdn.jsdelivr.net/npm/admin-lte@3.1/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
  50:     <script src="https://cdn.jsdelivr.net/npm/admin-lte@3.1/dist/js/adminlte.min.js"></script>
  51: </body>
  52: 
  53: </html>

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\views\clientes\form.php ###

   1: <?php
   2: // Verifica se há mensagem flash para exibir
   3: if (isset($flash)): ?>
   4:     <div class="alert alert-<?php echo $flash['tipo']; ?> alert-dismissible fade show" role="alert">
   5:         <?php echo $flash['mensagem']; ?>
   6:         <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
   7:     </div>
   8: <?php endif; ?>
   9: 
  10: <div class="row mb-4">
  11:     <div class="col">
  12:         <div class="card">
  13:             <div class="card-header">
  14:                 <h3 class="card-title"><?php echo isset($cliente) ? 'Editar Cliente' : 'Novo Cliente'; ?></h3>
  15:             </div>
  16:             <div class="card-body">
  17:                 <form id="formCliente" action="<?php echo BASE_URL . '/clientes/salvar'; ?>" method="POST">
  18:                     <?php if (isset($cliente) && isset($cliente['id'])): ?>
  19:                         <input type="hidden" name="id" value="<?php echo htmlspecialchars($cliente['id']); ?>">
  20:                     <?php endif; ?>
  21: 
  22:                     <div class="row mb-3">
  23:                         <div class="col-md-6">
  24:                             <label for="nome" class="form-label">Nome *</label>
  25:                             <input type="text" class="form-control" id="nome" name="nome" required 
  26:                                    value="<?php echo isset($cliente['nome']) ? htmlspecialchars($cliente['nome']) : ''; ?>">
  27:                         </div>
  28:                         <div class="col-md-6">
  29:                             <label for="telefone" class="form-label">Telefone *</label>
  30:                             <input type="text" class="form-control telefone" id="telefone" name="telefone" required
  31:                                    value="<?php echo isset($cliente['telefone']) ? htmlspecialchars($cliente['telefone']) : ''; ?>">
  32:                         </div>
  33:                     </div>
  34: 
  35:                     <div class="row mb-3">
  36:                         <div class="col-md-6">
  37:                             <label for="empresa" class="form-label">Empresa</label>
  38:                             <input type="text" class="form-control" id="empresa" name="empresa"
  39:                                    value="<?php echo isset($cliente['empresa']) ? htmlspecialchars($cliente['empresa']) : ''; ?>">
  40:                         </div>
  41:                         <div class="col-md-6">
  42:                             <label for="cnpj" class="form-label">CNPJ</label>
  43:                             <input type="text" class="form-control cnpj" id="cnpj" name="cnpj"
  44:                                    value="<?php echo isset($cliente['cnpj']) ? htmlspecialchars($cliente['cnpj']) : ''; ?>">
  45:                         </div>
  46:                     </div>
  47: 
  48:                     <div class="row mb-3">
  49:                         <div class="col-md-6">
  50:                             <label for="login_hospedagem" class="form-label">Login Hospedagem</label>
  51:                             <input type="text" class="form-control" id="login_hospedagem" name="login_hospedagem"
  52:                                    value="<?php echo isset($cliente['login_hospedagem']) ? htmlspecialchars($cliente['login_hospedagem']) : ''; ?>">
  53:                         </div>
  54:                         <div class="col-md-6">
  55:                             <label for="senha_hospedagem" class="form-label">Senha Hospedagem</label>
  56:                             <input type="text" class="form-control" id="senha_hospedagem" name="senha_hospedagem"
  57:                                    value="<?php echo isset($cliente['senha_hospedagem']) ? htmlspecialchars($cliente['senha_hospedagem']) : ''; ?>">
  58:                         </div>
  59:                     </div>
  60: 
  61:                     <div class="row mb-3">
  62:                         <div class="col-md-6">
  63:                             <label for="login_wp" class="form-label">Login WordPress</label>
  64:                             <input type="text" class="form-control" id="login_wp" name="login_wp"
  65:                                    value="<?php echo isset($cliente['login_wp']) ? htmlspecialchars($cliente['login_wp']) : ''; ?>">
  66:                         </div>
  67:                         <div class="col-md-6">
  68:                             <label for="senha_wp" class="form-label">Senha WordPress</label>
  69:                             <input type="text" class="form-control" id="senha_wp" name="senha_wp"
  70:                                    value="<?php echo isset($cliente['senha_wp']) ? htmlspecialchars($cliente['senha_wp']) : ''; ?>">
  71:                         </div>
  72:                     </div>
  73: 
  74:                     <div class="row mb-3">
  75:                         <div class="col-md-4">
  76:                             <div class="form-group">
  77:                                 <label for="status" class="form-label">Status</label>
  78:                                 <select name="status" id="status" class="form-select" required>
  79:                                     <option value="ativo" <?php echo (!isset($cliente['status']) || $cliente['status'] == 'ativo') ? 'selected' : ''; ?>>Ativo</option>
  80:                                     <option value="pendente" <?php echo (isset($cliente['status']) && $cliente['status'] == 'pendente') ? 'selected' : ''; ?>>Pendente</option>
  81:                                     <option value="inativo" <?php echo (isset($cliente['status']) && $cliente['status'] == 'inativo') ? 'selected' : ''; ?>>Inativo</option>
  82:                                 </select>
  83:                             </div>
  84:                         </div>
  85:                     </div>
  86: 
  87:                     <div class="mb-3">
  88:                         <label for="observacoes" class="form-label">Observações</label>
  89:                         <textarea class="form-control" id="observacoes" name="observacoes" rows="3"><?php echo isset($cliente['observacoes']) ? htmlspecialchars($cliente['observacoes']) : ''; ?></textarea>
  90:                     </div>
  91: 
  92:                     <div class="d-flex gap-2">
  93:                         <button type="submit" class="btn btn-primary">
  94:                             <i class="fas fa-save me-2"></i>Salvar
  95:                         </button>
  96:                         <a href="<?php echo BASE_URL . '/clientes'; ?>" class="btn btn-secondary">
  97:                             <i class="fas fa-arrow-left me-2"></i>Voltar
  98:                         </a>
  99:                     </div>
 100:                 </form>
 101:             </div>
 102:         </div>
 103:     </div>
 104: </div>
 105: 
 106: <!-- Certifique-se de que o IMask está incluído no layout -->
 107: <script src="https://unpkg.com/imask"></script>
 108: 
 109: <script>
 110: document.addEventListener('DOMContentLoaded', function() {
 111:     // Máscara para telefone
 112:     const telefoneInput = document.querySelector('.telefone');
 113:     if (telefoneInput) {
 114:         IMask(telefoneInput, {
 115:             mask: '(00) 00000-0000'
 116:         });
 117:     }
 118: 
 119:     // Máscara para CNPJ
 120:     const cnpjInput = document.querySelector('.cnpj');
 121:     if (cnpjInput) {
 122:         IMask(cnpjInput, {
 123:             mask: '00.000.000/0000-00'
 124:         });
 125:     }
 126: 
 127:     // Validação e envio do formulário
 128:     const form = document.getElementById('formCliente');
 129:     form.addEventListener('submit', function(e) {
 130:         e.preventDefault();
 131:         
 132:         // Validar campos obrigatórios
 133:         const nome = document.getElementById('nome').value.trim();
 134:         const telefone = document.getElementById('telefone').value.trim();
 135:         
 136:         if (!nome || !telefone) {
 137:             alert('Por favor, preencha os campos obrigatórios (Nome e Telefone).');
 138:             return;
 139:         }
 140:         
 141:         // Se passou pela validação, envia o formulário
 142:         this.submit();
 143:     });
 144: });</script>

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\views\clientes\index.php ###

   1: <?php if (isset($flash)): ?>
   2:     <div class="alert alert-<?php echo $flash['tipo']; ?> alert-dismissible fade show" role="alert">
   3:         <?php echo $flash['mensagem']; ?>
   4:         <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
   5:     </div>
   6: <?php endif; ?>
   7: 
   8: <div class="d-flex justify-content-between align-items-center mb-4">
   9:     <h2>Lista de Clientes</h2>
  10:     <a href="<?php echo BASE_URL; ?>/clientes/novo" class="btn btn-primary">
  11:         <i class="fas fa-plus me-2"></i>Novo Cliente
  12:     </a>
  13: </div>
  14: 
  15: <div class="card">
  16:     <div class="card-body">
  17:         <div class="table-responsive">
  18:             <table class="table table-striped table-hover">
  19:                 <thead>
  20:                     <tr>
  21:                         <th>ID</th>
  22:                         <th>Nome</th>
  23:                         <th>Telefone</th>
  24:                         <th>Empresa</th>
  25:                         <th>Status</th>
  26:                         <th class="text-center">Ações</th>
  27:                     </tr>
  28:                 </thead>
  29:                 <tbody>
  30:                     <?php if (empty($clientes)): ?>
  31:                         <tr>
  32:                             <td colspan="6" class="text-center">Nenhum cliente cadastrado.</td>
  33:                         </tr>
  34:                     <?php else: ?>
  35:                         <?php foreach ($clientes as $cliente): ?>
  36:                             <tr>
  37:                                 <td><?php echo $cliente['id']; ?></td>
  38:                                 <td><?php echo htmlspecialchars($cliente['nome']); ?></td>
  39:                                 <td><?php echo htmlspecialchars($cliente['telefone']); ?></td>
  40:                                 <td><?php echo htmlspecialchars($cliente['empresa'] ?? ''); ?></td>
  41:                                 <td>
  42:                                     <?php
  43:                                     switch($cliente['status']) {
  44:                                         case 'ativo':
  45:                                             $statusClass = 'success';
  46:                                             $statusText = 'Ativo';
  47:                                             break;
  48:                                         case 'pendente':
  49:                                             $statusClass = 'warning';
  50:                                             $statusText = 'Pendente';
  51:                                             break;
  52:                                         case 'inativo':
  53:                                             $statusClass = 'danger';
  54:                                             $statusText = 'Inativo';
  55:                                             break;
  56:                                         default:
  57:                                             $statusClass = 'secondary';
  58:                                             $statusText = ucfirst($cliente['status']);
  59:                                     }
  60:                                     ?>
  61:                                     <span class="badge bg-<?php echo $statusClass; ?>">
  62:                                         <?php echo $statusText; ?>
  63:                                     </span>
  64:                                 </td>
  65:                                 <td class="text-center">
  66:                                     <div class="btn-group">
  67:                                         <a href="<?php echo BASE_URL; ?>/clientes/editar/<?php echo $cliente['id']; ?>" 
  68:                                            class="btn btn-sm btn-info" title="Editar">
  69:                                             <i class="fas fa-edit"></i>
  70:                                         </a>
  71:                                         <a href="<?php echo BASE_URL; ?>/clientes/visualizar/<?php echo $cliente['id']; ?>" 
  72:                                            class="btn btn-sm btn-secondary" title="Visualizar">
  73:                                             <i class="fas fa-eye"></i>
  74:                                         </a>
  75:                                         <a href="<?php echo BASE_URL; ?>/clientes/excluir/<?php echo $cliente['id']; ?>" 
  76:                                            class="btn btn-sm btn-danger" 
  77:                                            onclick="return confirm('Tem certeza que deseja excluir este cliente?')"
  78:                                            title="Excluir">
  79:                                             <i class="fas fa-trash"></i>
  80:                                         </a>
  81:                                     </div>
  82:                                 </td>
  83:                             </tr>
  84:                         <?php endforeach; ?>
  85:                     <?php endif; ?>
  86:                 </tbody>
  87:             </table>
  88:         </div>
  89:     </div>
  90: </div>

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\views\clientes\visualizar.php ###

   1: <div class="row mb-4">
   2:     <div class="col">
   3:         <div class="card">
   4:             <div class="card-header">
   5:                 <div class="d-flex justify-content-between align-items-center">
   6:                     <h3 class="card-title">Detalhes do Cliente</h3>
   7:                     <div>
   8:                         <a href="<?php echo BASE_URL; ?>/clientes/editar/<?php echo $cliente['id']; ?>" class="btn btn-primary">
   9:                             <i class="fas fa-edit"></i> Editar
  10:                         </a>
  11:                         <a href="<?php echo BASE_URL; ?>/clientes" class="btn btn-secondary">
  12:                             <i class="fas fa-arrow-left"></i> Voltar
  13:                         </a>
  14:                     </div>
  15:                 </div>
  16:             </div>
  17:             <div class="card-body">
  18:                 <div class="row">
  19:                     <div class="col-md-6">
  20:                         <h5>Informações Básicas</h5>
  21:                         <table class="table table-striped">
  22:                             <tr>
  23:                                 <th width="30%">Nome</th>
  24:                                 <td><?php echo $cliente['nome']; ?></td>
  25:                             </tr>
  26:                             <tr>
  27:                                 <th>Email</th>
  28:                                 <td><?php echo $cliente['email']; ?></td>
  29:                             </tr>
  30:                             <tr>
  31:                                 <th>Telefone</th>
  32:                                 <td><?php echo $cliente['telefone']; ?></td>
  33:                             </tr>
  34:                             <tr>
  35:                                 <th>Status</th>
  36:                                 <td>
  37:                                     <span class="badge <?php echo $cliente['status'] === 'ativo' ? 'bg-success' : 'bg-danger'; ?>">
  38:                                         <?php echo ucfirst($cliente['status']); ?>
  39:                                     </span>
  40:                                 </td>
  41:                             </tr>
  42:                         </table>
  43:                     </div>
  44:                     
  45:                     <div class="col-md-6">
  46:                         <h5>Informações da Empresa</h5>
  47:                         <table class="table table-striped">
  48:                             <tr>
  49:                                 <th width="30%">Empresa</th>
  50:                                 <td><?php echo $cliente['empresa']; ?></td>
  51:                             </tr>
  52:                             <tr>
  53:                                 <th>CNPJ</th>
  54:                                 <td><?php echo $cliente['cnpj']; ?></td>
  55:                             </tr>
  56:                             <tr>
  57:                                 <th>Endereço</th>
  58:                                 <td><?php echo $cliente['endereco']; ?></td>
  59:                             </tr>
  60:                             <tr>
  61:                                 <th>Cidade/Estado</th>
  62:                                 <td><?php echo $cliente['cidade']; ?>/<?php echo $cliente['estado']; ?></td>
  63:                             </tr>
  64:                             <tr>
  65:                                 <th>CEP</th>
  66:                                 <td><?php echo $cliente['cep']; ?></td>
  67:                             </tr>
  68:                         </table>
  69:                     </div>
  70:                 </div>
  71:                 
  72:                 <div class="row mt-4">
  73:                     <div class="col-md-12">
  74:                         <h5>Contratos</h5>
  75:                         <table class="table table-hover">
  76:                             <thead>
  77:                                 <tr>
  78:                                     <th>ID</th>
  79:                                     <th>Serviço</th>
  80:                                     <th>Data Início</th>
  81:                                     <th>Data Fim</th>
  82:                                     <th>Valor</th>
  83:                                     <th>Status</th>
  84:                                 </tr>
  85:                             </thead>
  86:                             <tbody>
  87:                                 <tr>
  88:                                     <td colspan="6" class="text-center">Nenhum contrato encontrado</td>
  89:                                 </tr>
  90:                             </tbody>
  91:                         </table>
  92:                     </div>
  93:                 </div>
  94:             </div>
  95:         </div>
  96:     </div>
  97: </div>

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\views\contratos\form.php ###

   1: <?php
   2: // Calcula a data de validade padrão (30 dias a partir de hoje)
   3: $dataValidadePadrao = date('Y-m-d', strtotime('+30 days'));
   4: ?>
   5: <div class="container-fluid px-4">
   6:     <div class="d-flex justify-content-between align-items-center">
   7:         <h1 class="mt-4"><?php echo isset($contrato) ? 'Editar' : 'Novo'; ?> Contrato</h1>
   8:         <a href="<?php echo BASE_URL; ?>/contratos" class="btn btn-secondary">
   9:             <i class="fas fa-arrow-left"></i> Voltar
  10:         </a>
  11:     </div>
  12: 
  13:     <?php require_once __DIR__ . '/../includes/flash-messages.php'; ?>
  14: 
  15:     <div class="card mb-4">
  16:         <div class="card-header">
  17:             <i class="fas fa-file-contract me-1"></i>
  18:             Formulário de Contrato
  19:         </div>
  20:         <div class="card-body">
  21:             <form action="<?php echo BASE_URL; ?>/contratos/salvar" method="POST">
  22:                 <?php if (isset($contrato)): ?>
  23:                     <input type="hidden" name="id" value="<?php echo $contrato['id']; ?>">
  24:                 <?php endif; ?>
  25: 
  26:                 <!-- Seção: Informações Básicas -->
  27:                 <div class="card mb-3">
  28:                     <div class="card-header bg-light">
  29:                         <h5 class="mb-0">Informações Básicas</h5>
  30:                     </div>
  31:                     <div class="card-body">
  32:                         <!-- Número do Contrato (somente leitura) -->
  33:                         <?php if (isset($contrato) && !empty($contrato['numero_contrato'])): ?>
  34:                         <div class="row mb-3">
  35:                             <div class="col-md-4">
  36:                                 <label class="form-label">Número do Contrato</label>
  37:                                 <input type="text" class="form-control" value="<?php echo $contrato['numero_contrato']; ?>" readonly>
  38:                             </div>
  39:                         </div>
  40:                         <?php endif; ?>
  41: 
  42:                         <div class="row mb-3">
  43:                             <div class="col-md-8">
  44:                                 <label for="titulo" class="form-label">Título do Contrato *</label>
  45:                                 <input type="text" class="form-control" id="titulo" name="titulo" required
  46:                                        value="<?php echo isset($contrato) ? htmlspecialchars($contrato['titulo']) : ''; ?>">
  47:                             </div>
  48:                             <div class="col-md-4">
  49:                                 <label for="data_validade" class="form-label">Data de Validade para Assinatura *</label>
  50:                                 <input type="date" class="form-control" id="data_validade" name="data_validade" required
  51:                                        value="<?php echo isset($contrato['data_validade']) ? $contrato['data_validade'] : $dataValidadePadrao; ?>">
  52:                                 <div class="form-text">Data limite para assinatura do contrato</div>
  53:                             </div>
  54:                         </div>
  55: 
  56:                         <div class="row mb-3">
  57:                             <div class="col-md-6">
  58:                                 <label for="cliente_id" class="form-label">Cliente *</label>
  59:                                 <select class="form-select" id="cliente_id" name="cliente_id" required>
  60:                                     <option value="">Selecione um cliente</option>
  61:                                     <?php foreach ($clientes as $cliente): ?>
  62:                                         <option value="<?php echo $cliente['id']; ?>" 
  63:                                             <?php echo (isset($contrato) && $contrato['cliente_id'] == $cliente['id']) ? 'selected' : ''; ?>>
  64:                                             <?php echo htmlspecialchars($cliente['nome']); ?>
  65:                                         </option>
  66:                                     <?php endforeach; ?>
  67:                                 </select>
  68:                             </div>
  69:                         </div>
  70:                     </div>
  71:                 </div>
  72: 
  73:                 <!-- Seção: Objeto e Serviços -->
  74:                 <div class="card mb-3">
  75:                     <div class="card-header bg-light">
  76:                         <h5 class="mb-0">Objeto e Serviços</h5>
  77:                     </div>
  78:                     <div class="card-body">
  79:                         <!-- Objeto do Contrato -->
  80:                         <div class="mb-3">
  81:                             <label for="objeto" class="form-label">Objeto do Contrato *</label>
  82:                             <textarea class="form-control" id="objeto" name="objeto" rows="4" required><?php 
  83:                                 echo isset($contrato) ? htmlspecialchars($contrato['objeto']) : ''; 
  84:                             ?></textarea>
  85:                             <div class="form-text">Descreva o objetivo principal e escopo deste contrato</div>
  86:                         </div>
  87: 
  88:                         <!-- Serviços -->
  89:                         <div class="mb-3">
  90:                             <label class="form-label">Serviços Incluídos</label>
  91:                             <div class="table-responsive">
  92:                                 <table class="table">
  93:                                     <thead>
  94:                                         <tr>
  95:                                             <th style="width: 50px;"></th>
  96:                                             <th>Serviço</th>
  97:                                             <th style="width: 200px;" class="text-end">Valor Padrão</th>
  98:                                             <th style="width: 200px;" class="text-end">Valor no Contrato</th>
  99:                                         </tr>
 100:                                     </thead>
 101:                                     <tbody>
 102:                                         <?php foreach ($servicos as $servico): 
 103:                                             $servicoSelecionado = false;
 104:                                             $valorPersonalizado = $servico['valor'];
 105:                                             
 106:                                             // Verifica se o serviço está associado ao contrato
 107:                                             if (isset($servicosContrato)) {
 108:                                                 foreach ($servicosContrato as $sc) {
 109:                                                     if ($sc['id'] == $servico['id']) {
 110:                                                         $servicoSelecionado = true;
 111:                                                         $valorPersonalizado = $sc['valor_personalizado'] ?? $servico['valor'];
 112:                                                         break;
 113:                                                     }
 114:                                                 }
 115:                                             }
 116:                                         ?>
 117:                                             <tr>
 118:                                                 <td class="text-center">
 119:                                                     <input class="form-check-input servico-checkbox" 
 120:                                                            type="checkbox" 
 121:                                                            name="servicos[]" 
 122:                                                            value="<?php echo $servico['id']; ?>"
 123:                                                            <?php echo $servicoSelecionado ? 'checked' : ''; ?>>
 124:                                                 </td>
 125:                                                 <td>
 126:                                                     <?php echo htmlspecialchars($servico['nome']); ?>
 127:                                                 </td>
 128:                                                 <td class="text-end">
 129:                                                     R$ <?php echo number_format($servico['valor'], 2, ',', '.'); ?>
 130:                                                     <input type="hidden" 
 131:                                                            class="valor-padrao"
 132:                                                            value="<?php echo number_format($servico['valor'], 2, ',', '.'); ?>">
 133:                                                 </td>
 134:                                                 <td>
 135:                                                     <input type="text" 
 136:                                                            class="form-control valor-servico text-end" 
 137:                                                            name="valor_personalizado[<?php echo $servico['id']; ?>]"
 138:                                                            value="<?php echo number_format($valorPersonalizado, 2, ',', '.'); ?>"
 139:                                                            <?php echo $servicoSelecionado ? '' : 'disabled'; ?>>
 140:                                                 </td>
 141:                                             </tr>
 142:                                         <?php endforeach; ?>
 143:                                     </tbody>
 144:                                     <tfoot>
 145:                                         <tr>
 146:                                             <td colspan="3" class="text-end"><strong>Valor Total:</strong></td>
 147:                                             <td class="text-end"><strong id="valor_total">R$ 0,00</strong></td>
 148:                                         </tr>
 149:                                     </tfoot>
 150:                                 </table>
 151:                             </div>
 152:                         </div>
 153: 
 154:                         <div class="mb-3">
 155:                             <label for="clausulas" class="form-label">Cláusulas</label>
 156:                             <textarea class="form-control" 
 157:                                       id="clausulas" 
 158:                                       name="clausulas" 
 159:                                       rows="10"><?php echo isset($contrato) ? $contrato['clausulas'] : ''; ?></textarea>
 160:                         </div>
 161: 
 162:                         <div class="mb-3">
 163:                             <button type="submit" class="btn btn-primary">Salvar</button>
 164:                             <a href="<?php echo BASE_URL; ?>/contratos" class="btn btn-secondary">Cancelar</a>
 165:                         </div>
 166:                     </div>
 167:                 </div>
 168:             </form>
 169:         </div>
 170:     </div>
 171: 
 172:     <!-- Carrega o TinyMCE da CDN -->
 173:     <script src="https://cdnjs.cloudflare.com/ajax/libs/tinymce/6.8.2/tinymce.min.js" referrerpolicy="origin"></script>
 174:     <!-- Carrega a configuração personalizada do TinyMCE -->
 175:     <script src="<?php echo BASE_URL; ?>/assets/js/tinymce-config.js"></script>
 176: 
 177:     <style>
 178:     .valor-servico:not([disabled]) {
 179:         background-color: #fff !important;
 180:         cursor: text !important;
 181:     }
 182:     .valor-servico[disabled] {
 183:         background-color: #f8f9fa !important;
 184:         cursor: not-allowed !important;
 185:     }
 186:     </style>
 187: 
 188:     <!-- Script para calcular o valor total -->
 189:     <script>
 190:     document.addEventListener('DOMContentLoaded', function() {
 191:         // Função para formatar o valor em reais (R$)
 192:         function formatarMoeda(valor) {
 193:             // Garante que é um número e formata com 2 casas decimais
 194:             valor = (typeof valor === 'string' ? parseFloat(valor) : valor).toFixed(2);
 195:             // Substitui ponto por vírgula e adiciona pontos nos milhares
 196:             return valor.replace('.', ',').replace(/\B(?=(\d{3})+(?!\d))/g, '.');
 197:         }
 198: 
 199:         // Função para converter um valor formatado em número
 200:         function converterParaNumero(valor) {
 201:             if (typeof valor !== 'string') return valor;
 202:             // Remove pontos e substitui vírgula por ponto
 203:             return parseFloat(valor.replace(/\./g, '').replace(',', '.')) || 0;
 204:         }
 205: 
 206:         // Função para atualizar o valor total dos serviços selecionados
 207:         function atualizarValorTotal() {
 208:             let total = 0;
 209:             // Soma os valores de todos os serviços marcados
 210:             document.querySelectorAll('.servico-checkbox:checked').forEach(function(checkbox) {
 211:                 const row = checkbox.closest('tr');
 212:                 const inputValor = row.querySelector('.valor-servico');
 213:                 const valor = converterParaNumero(inputValor.value);
 214:                 console.log('Valor convertido:', valor); // Debug
 215:                 total += valor;
 216:             });
 217:             console.log('Total:', total); // Debug
 218:             document.getElementById('valor_total').textContent = 'R$ ' + formatarMoeda(total);
 219:         }
 220: 
 221:         // Função para habilitar/desabilitar campo de valor do serviço
 222:         function toggleValorPersonalizado(checkbox) {
 223:             const row = checkbox.closest('tr');
 224:             const inputValor = row.querySelector('.valor-servico');
 225:             const valorPadrao = row.querySelector('.valor-padrao').value;
 226:             
 227:             if (checkbox.checked) {
 228:                 // Se marcou o checkbox, habilita o campo e coloca foco nele
 229:                 inputValor.removeAttribute('disabled');
 230:                 inputValor.style.backgroundColor = '#fff';
 231:                 inputValor.focus();
 232:             } else {
 233:                 // Se desmarcou, desabilita o campo e restaura o valor padrão
 234:                 inputValor.setAttribute('disabled', 'disabled');
 235:                 inputValor.style.backgroundColor = '#f8f9fa';
 236:                 inputValor.value = valorPadrao;
 237:             }
 238:             
 239:             atualizarValorTotal();
 240:         }
 241: 
 242:         // Adiciona evento de change em todos os checkboxes
 243:         document.querySelectorAll('.servico-checkbox').forEach(function(checkbox) {
 244:             checkbox.addEventListener('change', function() {
 245:                 toggleValorPersonalizado(this);
 246:             });
 247:         });
 248: 
 249:         // Adiciona eventos em todos os campos de valor
 250:         document.querySelectorAll('.valor-servico').forEach(function(input) {
 251:             // Ao digitar no campo
 252:             input.addEventListener('input', function(e) {
 253:                 let valor = e.target.value.replace(/\D/g, '');
 254:                 if (valor === '') valor = '0';
 255:                 // Converte para número e formata
 256:                 valor = (parseFloat(valor) / 100).toFixed(2);
 257:                 this.value = valor.replace('.', ',');
 258:                 atualizarValorTotal();
 259:             });
 260: 
 261:             // Ao sair do campo
 262:             input.addEventListener('blur', function() {
 263:                 const valor = converterParaNumero(this.value);
 264:                 this.value = formatarMoeda(valor);
 265:                 atualizarValorTotal();
 266:             });
 267: 
 268:             // Ao entrar no campo
 269:             input.addEventListener('focus', function() {
 270:                 this.select();
 271:             });
 272:         });
 273: 
 274:         // Calcula o valor total inicial
 275:         atualizarValorTotal();
 276:     });
 277:     </script>

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\views\contratos\index.php ###

   1: <div class="container-fluid px-4">
   2:     <div class="d-flex justify-content-between align-items-center">
   3:         <h1 class="mt-4">Contratos</h1>
   4:         <a href="<?php echo BASE_URL; ?>/contratos/novo" class="btn btn-primary">
   5:             <i class="fas fa-plus"></i> Novo Contrato
   6:         </a>
   7:     </div>
   8: 
   9:     <?php require_once __DIR__ . '/../includes/flash-messages.php'; ?>
  10: 
  11:     <div class="card mb-4">
  12:         <div class="card-header">
  13:             <i class="fas fa-file-contract me-1"></i>
  14:             Lista de Contratos
  15:         </div>
  16:         <div class="card-body">
  17:             <div class="table-responsive">
  18:                 <table class="table table-bordered table-hover" id="contratos-table">
  19:                     <thead>
  20:                         <tr>
  21:                             <th>ID</th>
  22:                             <th>Título</th>
  23:                             <th>Cliente</th>
  24:                             <th>Data de Criação</th>
  25:                             <th>Ações</th>
  26:                         </tr>
  27:                     </thead>
  28:                     <tbody>
  29:                         <?php if (!empty($contratos)): ?>
  30:                             <?php foreach ($contratos as $contrato): ?>
  31:                                 <tr>
  32:                                     <td><?php echo $contrato['id']; ?></td>
  33:                                     <td><?php echo htmlspecialchars($contrato['titulo']); ?></td>
  34:                                     <td><?php echo htmlspecialchars($contrato['cliente_nome']); ?></td>
  35:                                     <td><?php echo date('d/m/Y H:i', strtotime($contrato['created_at'])); ?></td>
  36:                                     <td>
  37:                                         <div class="btn-group" role="group">
  38:                                             <a href="<?php echo BASE_URL; ?>/contratos/editar/<?php echo $contrato['id']; ?>" 
  39:                                                class="btn btn-primary btn-sm" title="Editar">
  40:                                                 <i class="fas fa-edit"></i>
  41:                                             </a>
  42:                                             <a href="<?php echo BASE_URL; ?>/contratos/excluir/<?php echo $contrato['id']; ?>" 
  43:                                                class="btn btn-danger btn-sm" 
  44:                                                onclick="return confirm('Tem certeza que deseja excluir este contrato?')"
  45:                                                title="Excluir">
  46:                                                 <i class="fas fa-trash"></i>
  47:                                             </a>
  48:                                         </div>
  49:                                     </td>
  50:                                 </tr>
  51:                             <?php endforeach; ?>
  52:                         <?php else: ?>
  53:                             <tr>
  54:                                 <td colspan="5" class="text-center">Nenhum contrato encontrado.</td>
  55:                             </tr>
  56:                         <?php endif; ?>
  57:                     </tbody>
  58:                 </table>
  59:             </div>
  60:         </div>
  61:     </div>
  62: </div>
  63: 
  64: <script>
  65: $(document).ready(function() {
  66:     $('#contratos-table').DataTable({
  67:         language: {
  68:             "emptyTable": "Nenhum registro encontrado",
  69:             "info": "Mostrando de _START_ até _END_ de _TOTAL_ registros",
  70:             "infoEmpty": "Mostrando 0 até 0 de 0 registros",
  71:             "infoFiltered": "(Filtrados de _MAX_ registros)",
  72:             "infoThousands": ".",
  73:             "loadingRecords": "Carregando...",
  74:             "processing": "Processando...",
  75:             "zeroRecords": "Nenhum registro encontrado",
  76:             "search": "Pesquisar",
  77:             "paginate": {
  78:                 "next": "Próximo",
  79:                 "previous": "Anterior",
  80:                 "first": "Primeiro",
  81:                 "last": "Último"
  82:             },
  83:             "lengthMenu": "Exibir _MENU_ resultados por página"
  84:         },
  85:         pageLength: 10,
  86:         lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "Todos"]],
  87:         responsive: true
  88:     });
  89: });
  90: </script>

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\views\dashboard\index.php ###

   1: <div class="row">
   2:     <div class="col-lg-3 col-6">
   3:         <div class="small-box bg-info">
   4:             <div class="inner">
   5:                 <h3><?php echo $totalClientes; ?></h3>
   6:                 <p>Clientes Ativos</p>
   7:             </div>
   8:             <div class="icon">
   9:                 <i class="fas fa-users"></i>
  10:             </div>
  11:             <a href="/clientes" class="small-box-footer">
  12:                 Mais informações <i class="fas fa-arrow-circle-right"></i>
  13:             </a>
  14:         </div>
  15:     </div>
  16:     
  17:     <div class="col-lg-3 col-6">
  18:         <div class="small-box bg-success">
  19:             <div class="inner">
  20:                 <h3><?php echo $totalServicos; ?></h3>
  21:                 <p>Serviços</p>
  22:             </div>
  23:             <div class="icon">
  24:                 <i class="fas fa-cogs"></i>
  25:             </div>
  26:             <a href="/servicos" class="small-box-footer">
  27:                 Mais informações <i class="fas fa-arrow-circle-right"></i>
  28:             </a>
  29:         </div>
  30:     </div>
  31:     
  32:     <div class="col-lg-3 col-6">
  33:         <div class="small-box bg-warning">
  34:             <div class="inner">
  35:                 <h3><?php echo $totalContratos; ?></h3>
  36:                 <p>Contratos Ativos</p>
  37:             </div>
  38:             <div class="icon">
  39:                 <i class="fas fa-file-contract"></i>
  40:             </div>
  41:             <a href="/contratos" class="small-box-footer">
  42:                 Mais informações <i class="fas fa-arrow-circle-right"></i>
  43:             </a>
  44:         </div>
  45:     </div>
  46:     
  47:     <div class="col-lg-3 col-6">
  48:         <div class="small-box bg-danger">
  49:             <div class="inner">
  50:                 <h3><?php echo $totalProjetos; ?></h3>
  51:                 <p>Projetos em Andamento</p>
  52:             </div>
  53:             <div class="icon">
  54:                 <i class="fas fa-project-diagram"></i>
  55:             </div>
  56:             <a href="/kanban" class="small-box-footer">
  57:                 Mais informações <i class="fas fa-arrow-circle-right"></i>
  58:             </a>
  59:         </div>
  60:     </div>
  61: </div>
  62: 
  63: <div class="row">
  64:     <div class="col-md-6">
  65:         <div class="card">
  66:             <div class="card-header">
  67:                 <h3 class="card-title">Últimos Projetos</h3>
  68:             </div>
  69:             <div class="card-body p-0">
  70:                 <table class="table">
  71:                     <thead>
  72:                         <tr>
  73:                             <th>Cliente</th>
  74:                             <th>Projeto</th>
  75:                             <th>Status</th>
  76:                             <th>Progresso</th>
  77:                         </tr>
  78:                     </thead>
  79:                     <tbody>
  80:                         <tr>
  81:                             <td colspan="4" class="text-center">Nenhum projeto encontrado</td>
  82:                         </tr>
  83:                     </tbody>
  84:                 </table>
  85:             </div>
  86:         </div>
  87:     </div>
  88:     
  89:     <div class="col-md-6">
  90:         <div class="card">
  91:             <div class="card-header">
  92:                 <h3 class="card-title">Atividades Recentes</h3>
  93:             </div>
  94:             <div class="card-body">
  95:                 <div class="timeline">
  96:                     <div>
  97:                         <i class="fas fa-user bg-info"></i>
  98:                         <div class="timeline-item">
  99:                             <span class="time"><i class="fas fa-clock"></i> Agora</span>
 100:                             <h3 class="timeline-header">Bem-vindo ao VelezCRM!</h3>
 101:                             <div class="timeline-body">
 102:                                 Sistema iniciado com sucesso. Configure seus primeiros clientes e projetos.
 103:                             </div>
 104:                         </div>
 105:                     </div>
 106:                 </div>
 107:             </div>
 108:         </div>
 109:     </div>
 110: </div>

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\views\errors\404.php ###

   1: <div class="error-page">
   2:     <h2 class="headline text-warning">404</h2>
   3:     <div class="error-content">
   4:         <h3><i class="fas fa-exclamation-triangle text-warning"></i> Oops! Página não encontrada.</h3>
   5:         <p>
   6:             Não foi possível encontrar a página que você está procurando.
   7:             Enquanto isso, você pode <a href="/">retornar ao dashboard</a>.
   8:         </p>
   9:     </div>
  10: </div>

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\views\includes\flash-messages.php ###

   1: <?php if (isset($flash)): ?>
   2:     <div class="alert alert-<?php echo $flash['tipo']; ?> alert-dismissible fade show" role="alert">
   3:         <?php echo $flash['mensagem']; ?>
   4:         <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fechar"></button>
   5:     </div>
   6: <?php endif; ?>

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\views\kanban\index.php ###

   1: <?php
   2: // O conteúdo será inserido automaticamente no layout principal pelo Controller
   3: ?>
   4: 
   5: <div class="content-wrapper">
   6:     <div class="content-header">
   7:         <div class="container-fluid">
   8:             <div class="row mb-2">
   9:                 <div class="col-sm-6">
  10:                     <h1 class="m-0">Kanban de Projetos</h1>
  11:                 </div>
  12:             </div>
  13:         </div>
  14:     </div>
  15: 
  16:     <section class="">
  17:         <div class="container-fluid">
  18:             <!-- Card de Seleção de Cliente -->
  19:             <div class="card card-outline card-primary mb-4">
  20:                 <div class="card-header">
  21:                     <h3 class="card-title">
  22:                         <i class="fas fa-user-circle me-2"></i>
  23:                         Selecione o Cliente
  24:                     </h3>
  25:                 </div>
  26:                 <div class="card-body">
  27:                     <div class="row align-items-center">
  28:                         <div class="col-md-6 position-relative">
  29:                             <div class="form-group mb-0">
  30:                                 <select class="form-control form-control-lg" id="cliente-select">
  31:                                     <option value="">Escolha um cliente para visualizar seu quadro Kanban...</option>
  32:                                     <?php foreach ($clientes as $cliente): ?>
  33:                                         <option value="<?php echo $cliente['id']; ?>">
  34:                                             <?php echo htmlspecialchars($cliente['nome']); ?>
  35:                                         </option>
  36:                                     <?php endforeach; ?>
  37:                                 </select>
  38:                             </div>
  39:                             <!-- Seta animada -->
  40:                             <div class="select-arrow" id="select-arrow">
  41:                                 <i class="fas fa-arrow-down"></i>
  42:                                 <span></span>
  43:                             </div>
  44:                         </div>
  45:                         <div class="col-md-6">
  46:                             <div id="cliente-info" class="text-muted" style="display: none;">
  47:                                 <i class="fas fa-info-circle me-1"></i>
  48:                                 <span>Visualizando quadro Kanban do cliente: </span>
  49:                                 <strong id="cliente-nome-display"></strong>
  50:                             </div>
  51:                         </div>
  52:                     </div>
  53:                 </div>
  54:             </div>
  55: 
  56:             <!-- Kanban Board -->
  57:             <div id="kanban-board" style="display: none;">
  58:                 <div class="row g-2">
  59:                     <!-- Coluna Backlog -->
  60:                     <div class="col-md-3 px-1">
  61:                         <div class="card h-100">
  62:                             <div class="card-header bg-secondary text-white d-flex justify-content-between align-items-center py-2">
  63:                                 <h5 class="card-title mb-0">Backlog</h5>
  64:                                 <button class="btn btn-sm btn-light add-card" data-status="backlog">
  65:                                     <i class="fas fa-plus"></i>
  66:                                 </button>
  67:                             </div>
  68:                             <div class="card-body p-2">
  69:                                 <div id="backlog" class="connectedSortable min-height-100">
  70:                                     <div class="empty-column-message">Nenhum card nesta coluna</div>
  71:                                 </div>
  72:                             </div>
  73:                         </div>
  74:                     </div>
  75: 
  76:                     <!-- Coluna À Fazer -->
  77:                     <div class="col-md-3 px-1">
  78:                         <div class="card h-100">
  79:                             <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center py-2">
  80:                                 <h5 class="card-title mb-0">À Fazer</h5>
  81:                                 <button class="btn btn-sm btn-light add-card" data-status="todo">
  82:                                     <i class="fas fa-plus"></i>
  83:                                 </button>
  84:                             </div>
  85:                             <div class="card-body p-2">
  86:                                 <div id="todo" class="connectedSortable min-height-100">
  87:                                     <div class="empty-column-message">Nenhum card nesta coluna</div>
  88:                                 </div>
  89:                             </div>
  90:                         </div>
  91:                     </div>
  92: 
  93:                     <!-- Coluna Em Andamento -->
  94:                     <div class="col-md-3 px-1">
  95:                         <div class="card h-100">
  96:                             <div class="card-header bg-warning text-dark d-flex justify-content-between align-items-center py-2">
  97:                                 <h5 class="card-title mb-0">Em Andamento</h5>
  98:                                 <button class="btn btn-sm btn-light add-card" data-status="doing">
  99:                                     <i class="fas fa-plus"></i>
 100:                                 </button>
 101:                             </div>
 102:                             <div class="card-body p-2">
 103:                                 <div id="doing" class="connectedSortable min-height-100">
 104:                                     <div class="empty-column-message">Nenhum card nesta coluna</div>
 105:                                 </div>
 106:                             </div>
 107:                         </div>
 108:                     </div>
 109: 
 110:                     <!-- Coluna Concluído -->
 111:                     <div class="col-md-3 px-1">
 112:                         <div class="card h-100">
 113:                             <div class="card-header bg-success text-white d-flex justify-content-between align-items-center py-2">
 114:                                 <h5 class="card-title mb-0">Concluído</h5>
 115:                                 <button class="btn btn-sm btn-light add-card" data-status="done">
 116:                                     <i class="fas fa-plus"></i>
 117:                                 </button>
 118:                             </div>
 119:                             <div class="card-body p-2">
 120:                                 <div id="done" class="connectedSortable min-height-100">
 121:                                     <div class="empty-column-message">Nenhum card nesta coluna</div>
 122:                                 </div>
 123:                             </div>
 124:                         </div>
 125:                     </div>
 126:                 </div>
 127:             </div>
 128:         </div>
 129:     </section>
 130: </div>
 131: 
 132: <!-- Modal para adicionar card -->
 133: <div class="modal fade" id="cardModal" tabindex="-1" aria-labelledby="cardModalLabel" aria-hidden="true">
 134:     <div class="modal-dialog">
 135:         <div class="modal-content">
 136:             <div class="modal-header">
 137:                 <h5 class="modal-title" id="cardModalLabel">Novo Card</h5>
 138:                 <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
 139:             </div>
 140:             <div class="modal-body">
 141:                 <form id="cardForm">
 142:                     <div class="mb-3">
 143:                         <label for="titulo" class="form-label">Título</label>
 144:                         <input type="text" class="form-control" id="titulo" required>
 145:                     </div>
 146:                     <div class="mb-3">
 147:                         <label for="descricao" class="form-label">Descrição</label>
 148:                         <textarea class="form-control" id="descricao" rows="3"></textarea>
 149:                     </div>
 150:                     <div class="mb-3">
 151:                         <label for="status" class="form-label">Status</label>
 152:                         <select class="form-control" id="status">
 153:                             <option value="backlog">Backlog</option>
 154:                             <option value="doing">Em Andamento</option>
 155:                             <option value="done">Concluído</option>
 156:                         </select>
 157:                     </div>
 158:                 </form>
 159:             </div>
 160:             <div class="modal-footer">
 161:                 <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
 162:                 <button type="button" class="btn btn-primary" onclick="saveCard()">Salvar</button>
 163:             </div>
 164:         </div>
 165:     </div>
 166: </div>
 167: 
 168: <!-- Modal de Edição -->
 169: <div class="modal fade" id="editCardModal" tabindex="-1" aria-labelledby="editCardModalLabel" aria-hidden="true">
 170:     <div class="modal-dialog">
 171:         <div class="modal-content">
 172:             <div class="modal-header">
 173:                 <h5 class="modal-title" id="editCardModalLabel">Editar Card</h5>
 174:                 <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
 175:             </div>
 176:             <div class="modal-body">
 177:                 <form id="editCardForm">
 178:                     <input type="hidden" id="edit-card-id">
 179:                     <div class="mb-3">
 180:                         <label for="edit-titulo" class="form-label">Título</label>
 181:                         <input type="text" class="form-control" id="edit-titulo" required>
 182:                     </div>
 183:                     <div class="mb-3">
 184:                         <label for="edit-descricao" class="form-label">Descrição</label>
 185:                         <textarea class="form-control" id="edit-descricao" rows="3"></textarea>
 186:                     </div>
 187:                 </form>
 188:             </div>
 189:             <div class="modal-footer">
 190:                 <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
 191:                 <button type="button" class="btn btn-primary" onclick="saveCardEdit()">Salvar</button>
 192:             </div>
 193:         </div>
 194:     </div>
 195: </div>
 196: 
 197: <!-- Scripts específicos para o Kanban -->
 198: <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
 199: <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
 200: <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
 201: 
 202: <script>
 203:     // Função para carregar scripts dinamicamente
 204:     function loadScript(url, callback) {
 205:         var script = document.createElement('script');
 206:         script.type = 'text/javascript';
 207:         script.src = url;
 208:         script.onload = callback;
 209:         document.head.appendChild(script);
 210:     }
 211: 
 212:     document.addEventListener('DOMContentLoaded', function() {
 213:         console.log('DOM carregado, verificando jQuery...');
 214: 
 215:         // Verifica se o jQuery está disponível
 216:         if (typeof jQuery === 'undefined') {
 217:             console.error('jQuery não está carregado!');
 218:             return;
 219:         }
 220: 
 221:         // Usa jQuery com alias $ para evitar conflitos
 222:         jQuery(function($) {
 223:             console.log('jQuery pronto, iniciando Kanban...');
 224: 
 225:             // Função para verificar e carregar jQuery UI se necessário
 226:             function ensureJQueryUI() {
 227:                 if (typeof $.ui === 'undefined' || !$.fn.sortable) {
 228:                     console.log('Carregando jQuery UI...');
 229:                     loadScript('https://code.jquery.com/ui/1.13.2/jquery-ui.min.js', function() {
 230:                         console.log('Verificando Sortable:', $.fn.sortable ? 'Disponível' : 'Não disponível');
 231:                     });
 232:                 } else {
 233:                     console.log('Verificando Sortable:', $.fn.sortable ? 'Disponível' : 'Não disponível');
 234:                 }
 235:             }
 236: 
 237:             // Chama a função para garantir jQuery UI
 238:             ensureJQueryUI();
 239: 
 240:             // Quando selecionar um cliente
 241:             $('#cliente-select').on('change', function() {
 242:                 const clienteId = $(this).val();
 243:                 const clienteNome = $(this).find('option:selected').text();
 244:                 console.log('Cliente selecionado:', clienteId, clienteNome);
 245: 
 246:                 if (clienteId) {
 247:                     // Esconder a seta quando um cliente for selecionado
 248:                     $('#select-arrow').fadeOut();
 249:                     
 250:                     // Mostrar informações do cliente
 251:                     $('#cliente-nome-display').text(clienteNome);
 252:                     $('#cliente-info').show();
 253:                     
 254:                     // Carregar e mostrar o quadro Kanban
 255:                     $('#kanban-board').show();
 256:                     loadKanbanCards(clienteId);
 257:                 } else {
 258:                     // Mostrar a seta novamente
 259:                     $('#select-arrow').fadeIn();
 260:                     
 261:                     // Esconder informações e quadro
 262:                     $('#cliente-info').hide();
 263:                     $('#kanban-board').hide();
 264:                 }
 265:             });
 266: 
 267:             // Animar a seta quando o select receber foco
 268:             $('#cliente-select').on('focus', function() {
 269:                 $('#select-arrow').addClass('active');
 270:             }).on('blur', function() {
 271:                 $('#select-arrow').removeClass('active');
 272:             });
 273: 
 274:             // Adicionar novo card
 275:             $('.add-card').on('click', function() {
 276:                 const status = $(this).data('status');
 277:                 openNewCardModal(status);
 278:             });
 279: 
 280:             // Função para abrir modal de novo card
 281:             window.openNewCardModal = function(status) {
 282:                 $('#status').val(status);
 283:                 const cardModal = new bootstrap.Modal(document.getElementById('cardModal'));
 284:                 cardModal.show();
 285:             };
 286: 
 287:             // Salvar card
 288:             window.saveCard = function() {
 289:                 const titulo = $('#titulo').val();
 290:                 const descricao = $('#descricao').val();
 291:                 const status = $('#status').val();
 292:                 const clienteId = $('#cliente-select').val();
 293: 
 294:                 if (!titulo) {
 295:                     alert('O título é obrigatório');
 296:                     return;
 297:                 }
 298: 
 299:                 if (!clienteId) {
 300:                     alert('Selecione um cliente');
 301:                     return;
 302:                 }
 303: 
 304:                 const data = {
 305:                     cliente_id: clienteId,
 306:                     titulo: titulo,
 307:                     descricao: descricao,
 308:                     status: status,
 309:                     data_criacao: new Date().toISOString().slice(0, 19).replace('T', ' ')
 310:                 };
 311: 
 312:                 $.ajax({
 313:                     url: BASE_URL + '/kanban/createCard',
 314:                     method: 'POST',
 315:                     data: data,
 316:                     success: function(response) {
 317:                         if (response.success) {
 318:                             // Bootstrap 5: Esconder modal
 319:                             const cardModal = bootstrap.Modal.getInstance(document.getElementById('cardModal'));
 320:                             cardModal.hide();
 321:                             
 322:                             // Limpar formulário
 323:                             $('#titulo').val('');
 324:                             $('#descricao').val('');
 325:                             
 326:                             // Recarregar cards
 327:                             loadKanbanCards(clienteId);
 328:                         } else {
 329:                             alert('Erro ao criar o card');
 330:                         }
 331:                     },
 332:                     error: function(xhr, status, error) {
 333:                         console.error('Erro ao criar card:', error);
 334:                         alert('Erro ao criar o card');
 335:                     }
 336:                 });
 337:             };
 338: 
 339:             // Função para carregar os cards do Kanban
 340:             function loadKanbanCards(clienteId) {
 341:                 $.ajax({
 342:                     url: BASE_URL + `/kanban/getCards/${clienteId}`,
 343:                     method: 'GET',
 344:                     dataType: 'json',
 345:                     success: function(cards) {
 346:                         if (cards.error) {
 347:                             alert('Erro: ' + cards.error);
 348:                             return;
 349:                         }
 350: 
 351:                         // Limpa todas as colunas
 352:                         $('.connectedSortable').empty();
 353: 
 354:                         // Adiciona a mensagem de coluna vazia
 355:                         $('.connectedSortable').append('<div class="empty-column-message">Nenhum card nesta coluna</div>');
 356: 
 357:                         // Distribui os cards nas colunas corretas
 358:                         cards.forEach(card => {
 359:                             const cardHtml = createCardHtml(card);
 360:                             const column = $(`#${card.status}`);
 361:                             column.find('.empty-column-message').remove();
 362:                             column.append(cardHtml);
 363:                         });
 364: 
 365:                         // Inicializa o sortable após carregar os cards
 366:                         initializeSortable();
 367:                     },
 368:                     error: function(xhr, status, error) {
 369:                         console.error('Erro ao carregar cards:', error);
 370:                         const errorMessage = xhr.responseJSON ?
 371:                             xhr.responseJSON.error :
 372:                             'Erro ao carregar os cards';
 373:                         alert(errorMessage);
 374:                     }
 375:                 });
 376:             }
 377: 
 378:             // Função para criar HTML do card
 379:             function createCardHtml(card) {
 380:                 const titulo = card.titulo.replace(/'/g, "\\'");
 381:                 const descricao = (card.descricao || '').replace(/'/g, "\\'");
 382:                 
 383:                 return `
 384:                 <div class="card mb-2" data-id="${card.id}">
 385:                     <div class="card-header d-flex justify-content-between align-items-center">
 386:                         <h5 class="card-title mb-0">${card.titulo}</h5>
 387:                         <div class="card-actions">
 388:                             <button class="btn btn-xs btn-outline-primary edit-card mr-1" onclick="editCard(${card.id}, event)">
 389:                                 <i class="fas fa-edit"></i>
 390:                             </button>
 391:                             <button class="btn btn-xs btn-outline-danger delete-card" onclick="deleteCard(${card.id}, event)">
 392:                                 <i class="fas fa-trash"></i>
 393:                             </button>
 394:                         </div>
 395:                     </div>
 396:                     <div class="card-body">
 397:                         <p class="card-text">${card.descricao || 'Sem descrição'}</p>
 398:                     </div>
 399:                 </div>`;
 400:             }
 401: 
 402:             // Função para excluir card
 403:             window.deleteCard = function(cardId, event) {
 404:                 // Impede a propagação do evento para não acionar o sortable
 405:                 event.stopPropagation();
 406:                 
 407:                 if (!confirm('Tem certeza que deseja excluir este card?')) {
 408:                     return;
 409:                 }
 410: 
 411:                 $.ajax({
 412:                     url: BASE_URL + '/kanban/deleteCard',
 413:                     method: 'POST',
 414:                     data: {
 415:                         card_id: cardId
 416:                     },
 417:                     success: function(response) {
 418:                         if (response.success) {
 419:                             // Recarrega os cards após excluir
 420:                             loadKanbanCards($('#cliente-select').val());
 421:                         } else {
 422:                             alert('Erro ao excluir o card');
 423:                         }
 424:                     },
 425:                     error: function(xhr, status, error) {
 426:                         console.error('Erro ao excluir card:', error);
 427:                         alert('Erro ao excluir o card');
 428:                         // Recarrega os cards para restaurar a ordem anterior
 429:                         loadKanbanCards($('#cliente-select').val());
 430:                     }
 431:                 });
 432:             };
 433: 
 434:             // Função para editar card
 435:             window.editCard = function(cardId, event) {
 436:                 event.stopPropagation();
 437:                 
 438:                 $.ajax({
 439:                     url: BASE_URL + `/kanban/getCard/${cardId}`,
 440:                     method: 'GET',
 441:                     success: function(card) {
 442:                         if (card.error) {
 443:                             alert('Erro ao carregar o card: ' + card.error);
 444:                             return;
 445:                         }
 446: 
 447:                         $('#edit-card-id').val(card.id);
 448:                         $('#edit-titulo').val(card.titulo);
 449:                         $('#edit-descricao').val(card.descricao);
 450:                         
 451:                         // Bootstrap 5: Mostrar modal
 452:                         const editModal = new bootstrap.Modal(document.getElementById('editCardModal'));
 453:                         editModal.show();
 454:                     },
 455:                     error: function(xhr, status, error) {
 456:                         console.error('Erro ao carregar card:', error);
 457:                         alert('Erro ao carregar o card');
 458:                     }
 459:                 });
 460:             };
 461: 
 462:             // Função para salvar edição do card
 463:             window.saveCardEdit = function() {
 464:                 const cardId = $('#edit-card-id').val();
 465:                 const titulo = $('#edit-titulo').val();
 466:                 const descricao = $('#edit-descricao').val();
 467: 
 468:                 if (!titulo) {
 469:                     alert('O título é obrigatório');
 470:                     return;
 471:                 }
 472: 
 473:                 $.ajax({
 474:                     url: BASE_URL + '/kanban/editCard',
 475:                     method: 'POST',
 476:                     data: {
 477:                         card_id: cardId,
 478:                         titulo: titulo,
 479:                         descricao: descricao
 480:                     },
 481:                     success: function(response) {
 482:                         if (response.success) {
 483:                             // Bootstrap 5: Esconder modal
 484:                             const editModal = bootstrap.Modal.getInstance(document.getElementById('editCardModal'));
 485:                             editModal.hide();
 486:                             
 487:                             loadKanbanCards($('#cliente-select').val());
 488:                         } else {
 489:                             alert('Erro ao editar o card');
 490:                         }
 491:                     },
 492:                     error: function(xhr, status, error) {
 493:                         console.error('Erro ao editar card:', error);
 494:                         alert('Erro ao editar o card');
 495:                     }
 496:                 });
 497:             };
 498: 
 499:             // Função para inicializar o sortable
 500:             function initializeSortable() {
 501:                 // Verifica se o Sortable está disponível
 502:                 if (!$.fn.sortable) {
 503:                     console.error('Sortable não está disponível!');
 504:                     return;
 505:                 }
 506: 
 507:                 $(".connectedSortable").sortable({
 508:                     connectWith: ".connectedSortable",
 509:                     placeholder: "sort-highlight",
 510:                     forcePlaceholderSize: true,
 511:                     handle: ".card-header",
 512:                     update: function(event, ui) {
 513:                         if (this === ui.item.parent()[0]) {
 514:                             const cardId = ui.item.attr('data-id');
 515:                             const newStatus = $(this).attr('id');
 516:                             
 517:                             // Calcula a nova posição baseada na ordem atual dos cards
 518:                             const cards = $(this).children('.card');
 519:                             const position = cards.index(ui.item);
 520: 
 521:                             console.log('Atualizando card:', {
 522:                                 cardId: cardId,
 523:                                 newStatus: newStatus,
 524:                                 position: position
 525:                             });
 526: 
 527:                             // Enviar atualização de status para o servidor
 528:                             $.ajax({
 529:                                 url: BASE_URL + '/kanban/updateCardStatus',
 530:                                 method: 'POST',
 531:                                 data: {
 532:                                     card_id: cardId,
 533:                                     new_status: newStatus,
 534:                                     position: position
 535:                                 },
 536:                                 success: function(response) {
 537:                                     console.log('Card atualizado com sucesso');
 538:                                     // Recarrega os cards para garantir a ordem correta
 539:                                     loadKanbanCards($('#cliente-select').val());
 540:                                 },
 541:                                 error: function(xhr, status, error) {
 542:                                     console.error('Erro ao atualizar card:', error);
 543:                                     alert('Erro ao mover card');
 544:                                     // Recarrega os cards para restaurar a ordem anterior
 545:                                     loadKanbanCards($('#cliente-select').val());
 546:                                 }
 547:                             });
 548:                         }
 549:                     }
 550:                 }).disableSelection();
 551:             }
 552: 
 553:             // Adiciona estilo para o botão de exclusão
 554:             const style = document.createElement('style');
 555:             style.textContent = `
 556:                 .card-header .delete-card {
 557:                     opacity: 0;
 558:                     transition: opacity 0.2s;
 559:                 }
 560:                 .card:hover .card-header .delete-card {
 561:                     opacity: 1;
 562:                 }
 563:                 .card-header {
 564:                     cursor: move;
 565:                 }
 566:                 .delete-card {
 567:                     cursor: pointer;
 568:                 }
 569:                 .edit-card {
 570:                     cursor: pointer;
 571:                 }
 572:             `;
 573:             document.head.appendChild(style);
 574: 
 575:             console.log('Kanban inicializado com sucesso!');
 576:         });
 577:     });
 578: </script>
 579: 
 580: <style>
 581:     /* Estilos gerais */
 582:     .content-wrapper {
 583:         background-color: #f4f6f9;
 584:         padding: 20px;
 585:     }
 586: 
 587:     /* Estilos do card de seleção */
 588:     .card-outline.card-primary {
 589:         border-top: 3px solid #007bff;
 590:     }
 591: 
 592:     .card-header {
 593:         background-color: #fff;
 594:         border-bottom: 1px solid rgba(0,0,0,.125);
 595:         padding: 0.75rem 1.25rem;
 596:     }
 597: 
 598:     .card-title {
 599:         margin: 0;
 600:         font-size: 1.1rem;
 601:         color: #1f2d3d;
 602:     }
 603: 
 604:     .card-title i {
 605:         color: #007bff;
 606:         margin-right: 0.5rem;
 607:     }
 608: 
 609:     /* Estilos do select */
 610:     .form-control-lg {
 611:         height: calc(2.875rem + 2px);
 612:         padding: 0.5rem 1rem;
 613:         font-size: 1.1rem;
 614:         border-radius: 0.3rem;
 615:         border: 1px solid #ced4da;
 616:         transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
 617:     }
 618: 
 619:     .form-control-lg:focus {
 620:         border-color: #80bdff;
 621:         box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
 622:     }
 623: 
 624:     /* Estilos da informação do cliente */
 625:     #cliente-info {
 626:         padding: 0.5rem 0;
 627:         font-size: 1rem;
 628:     }
 629: 
 630:     #cliente-info i {
 631:         color: #6c757d;
 632:     }
 633: 
 634:     #cliente-nome-display {
 635:         color: #007bff;
 636:     }
 637: 
 638:     /* Estilos do Kanban */
 639:     .content-wrapper {
 640:         background-color: #f4f6f9;
 641:     }
 642: 
 643:     .card-header {
 644:         cursor: move;
 645:         background-color: #f8f9fa;
 646:     }
 647: 
 648:     .sort-highlight {
 649:         background: #f4f6f9;
 650:         border: 2px dashed #ced4da;
 651:         margin-bottom: 10px;
 652:     }
 653: 
 654:     .card-actions {
 655:         display: flex;
 656:         gap: 0.5rem;
 657:         opacity: 0;
 658:         transition: opacity 0.2s ease-in-out;
 659:     }
 660: 
 661:     .card:hover .card-actions {
 662:         opacity: 1;
 663:     }
 664: 
 665:     .edit-card, .delete-card {
 666:         cursor: pointer;
 667:     }
 668: 
 669:     .card-title {
 670:         margin: 0;
 671:         font-size: 1rem;
 672:         font-weight: 500;
 673:     }
 674: 
 675:     .card {
 676:         box-shadow: 0 0 1px rgba(0,0,0,.125), 0 1px 3px rgba(0,0,0,.2);
 677:         transition: box-shadow 0.3s ease-in-out;
 678:     }
 679: 
 680:     .card:hover {
 681:         box-shadow: 0 0 3px rgba(0,0,0,.125), 0 3px 6px rgba(0,0,0,.2);
 682:     }
 683: 
 684:     /* Estilo para a seta animada */
 685:     .select-arrow {
 686:         position: absolute;
 687:         top: 50%;
 688:         right: 3rem;
 689:         transform: translateY(-50%);
 690:         display: flex;
 691:         align-items: center;
 692:         color: #007bff;
 693:         animation: bounce 2s infinite;
 694:         z-index: 1;
 695:     }
 696: 
 697:     .select-arrow i {
 698:         margin-right: 0.5rem;
 699:         font-size: 1.2rem;
 700:     }
 701: 
 702:     .select-arrow span {
 703:         font-size: 0.9rem;
 704:         font-weight: 500;
 705:         white-space: nowrap;
 706:     }
 707: 
 708:     .select-arrow.active {
 709:         animation: none;
 710:         transform: translateY(-50%) scale(1.1);
 711:     }
 712: 
 713:     @keyframes bounce {
 714:         0%, 20%, 50%, 80%, 100% {
 715:             transform: translateY(-50%);
 716:         }
 717:         40% {
 718:             transform: translateY(-70%);
 719:         }
 720:         60% {
 721:             transform: translateY(-60%);
 722:         }
 723:     }
 724: 
 725:     /* Ajuste no select para não sobrepor a seta */
 726:     .form-control-lg {
 727:         padding-right: 8rem;
 728:     }
 729: 
 730:     /* Estilos para botões menores */
 731:     .btn-xs {
 732:         padding: 0.1rem 0.25rem;
 733:         font-size: 0.7rem;
 734:         line-height: 1.2;
 735:     }
 736: 
 737:     .card-actions .btn-xs {
 738:         margin-right: 0.25rem;
 739:     }
 740: 
 741:     .card-actions .btn-xs i {
 742:         font-size: 0.7rem;
 743:     }
 744: 
 745:     .card-actions {
 746:         display: flex;
 747:         align-items: center;
 748:         gap: 0.25rem;
 749:     }
 750: </style>

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\views\layouts\main.php ###

   1: <!DOCTYPE html>
   2: <html lang="pt-BR">
   3: <head>
   4:     <meta charset="UTF-8">
   5:     <meta name="viewport" content="width=device-width, initial-scale=1.0">
   6:     <title>VelezCRM - <?php echo $pageTitle ?? 'Sistema de Gestão'; ?></title>
   7:     
   8:     <!-- Bootstrap CSS -->
   9:     <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  10:     
  11:     <!-- Font Awesome -->
  12:     <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  13:     
  14:     <!-- DataTables CSS -->
  15:     <link rel="stylesheet" href="https://cdn.datatables.net/1.13.4/css/dataTables.bootstrap5.min.css">
  16:     
  17:     <!-- Custom CSS -->
  18:     <style>
  19:         /* Tema Claro */
  20:         [data-bs-theme="light"] {
  21:             --bg-primary: #f0f2f5;
  22:             --bg-secondary: #ffffff;
  23:             --text-primary: #111827;
  24:             --text-secondary: #374151;
  25:             --border-color: #d1d5db;
  26:             --hover-bg: #3a4654;
  27:             --link-color: #2563eb;
  28:             --link-hover: #1d4ed8;
  29:             --card-shadow: 0 2px 4px rgba(0,0,0,0.1);
  30:             --header-bg: #ffffff;
  31:         }
  32:         
  33:         /* Ajustes específicos para tema claro */
  34:         [data-bs-theme="light"] .navbar-vertical {
  35:             background: #2a3441;
  36:             border-right: 1px solid #3a4654;
  37:         }
  38:         
  39:         [data-bs-theme="light"] .navbar-brand {
  40:             border-bottom: 1px solid #3a4654;
  41:         }
  42:         
  43:         [data-bs-theme="light"] .brand-text {
  44:             color: #ffffff;
  45:         }
  46:         
  47:         [data-bs-theme="light"] .nav-link {
  48:             color: #a3b2c7 !important;
  49:         }
  50:         
  51:         [data-bs-theme="light"] .nav-link:hover,
  52:         [data-bs-theme="light"] .nav-link.active {
  53:             color: #ffffff !important;
  54:             background: #3a4654;
  55:         }
  56:         
  57:         [data-bs-theme="light"] .sidebar-collapse .navbar-vertical {
  58:             background: #2a3441;
  59:         }
  60:         
  61:         /* Tema Escuro */
  62:         [data-bs-theme="dark"] {
  63:             --bg-primary: #1e2936;
  64:             --bg-secondary: #2a3441;
  65:             --text-primary: #ffffff;
  66:             --text-secondary: #a3b2c7;
  67:             --border-color: #3a4654;
  68:             --hover-bg: #3a4654;
  69:             --link-color: #60a5fa;
  70:             --link-hover: #3b82f6;
  71:             --card-shadow: 0 2px 4px rgba(0,0,0,0.2);
  72:             --header-bg: #2a3441;
  73:         }
  74:         
  75:         /* Ajustes específicos para tema escuro */
  76:         [data-bs-theme="dark"] .navbar-vertical {
  77:             background: #2a3441;
  78:             border-right: 1px solid #3a4654;
  79:         }
  80:         
  81:         [data-bs-theme="dark"] .card {
  82:             background: #2a3441;
  83:             border: 1px solid #3a4654;
  84:         }
  85:         
  86:         [data-bs-theme="dark"] .table {
  87:             color: #a3b2c7;
  88:         }
  89:         
  90:         [data-bs-theme="dark"] .table thead th {
  91:             color: #ffffff;
  92:             border-bottom-color: #3a4654;
  93:             background-color: #2a3441;
  94:         }
  95:         
  96:         [data-bs-theme="dark"] .table td {
  97:             border-color: #3a4654;
  98:         }
  99:         
 100:         [data-bs-theme="dark"] .dropdown-menu {
 101:             background: #2a3441;
 102:             border: 1px solid #3a4654;
 103:         }
 104:         
 105:         [data-bs-theme="dark"] .dropdown-item {
 106:             color: #a3b2c7;
 107:         }
 108:         
 109:         [data-bs-theme="dark"] .dropdown-item:hover {
 110:             background: #3a4654;
 111:             color: #ffffff;
 112:         }
 113:         
 114:         [data-bs-theme="dark"] .dropdown-divider {
 115:             border-color: #3a4654;
 116:         }
 117:         
 118:         [data-bs-theme="dark"] .theme-toggle {
 119:             background: #2a3441;
 120:             border: 1px solid #3a4654;
 121:             color: #a3b2c7;
 122:         }
 123:         
 124:         [data-bs-theme="dark"] .theme-toggle:hover {
 125:             background: #3a4654;
 126:             color: #ffffff;
 127:         }
 128:         
 129:         [data-bs-theme="dark"] .nav-link {
 130:             color: #a3b2c7 !important;
 131:         }
 132:         
 133:         [data-bs-theme="dark"] .nav-link:hover,
 134:         [data-bs-theme="dark"] .nav-link.active {
 135:             color: #ffffff !important;
 136:             background: #3a4654;
 137:         }
 138:         
 139:         /* Ajustes dos gráficos no tema escuro */
 140:         [data-bs-theme="dark"] .progress {
 141:             background-color: #3a4654;
 142:         }
 143:         
 144:         [data-bs-theme="dark"] .timeline-item {
 145:             background-color: #2a3441;
 146:             border: 1px solid #3a4654;
 147:         }
 148:         
 149:         [data-bs-theme="dark"] .timeline-header {
 150:             border-bottom: 1px solid #3a4654;
 151:         }
 152:         
 153:         /* Cores dos cards de estatísticas */
 154:         .bg-info { background-color: #0284c7 !important; }
 155:         .bg-success { background-color: #059669 !important; }
 156:         .bg-warning { background-color: #d97706 !important; }
 157:         .bg-danger { background-color: #dc2626 !important; }
 158:         
 159:         .table {
 160:             color: var(--text-secondary);
 161:         }
 162:         
 163:         .table thead th {
 164:             border-bottom-color: var(--border-color);
 165:             color: var(--text-primary);
 166:         }
 167:         
 168:         .table td {
 169:             border-bottom-color: var(--border-color);
 170:         }
 171:         
 172:         .theme-toggle {
 173:             padding: 8px;
 174:             border-radius: 50%;
 175:             width: 40px;
 176:             height: 40px;
 177:             display: flex;
 178:             align-items: center;
 179:             justify-content: center;
 180:             background: var(--bg-secondary);
 181:             border: 1px solid var(--border-color);
 182:             color: var(--text-secondary);
 183:             cursor: pointer;
 184:             transition: all 0.3s;
 185:         }
 186:         
 187:         .theme-toggle:hover {
 188:             background: var(--hover-bg);
 189:             color: #fff;
 190:         }
 191:         
 192:         /* Adiciona estilo para o sidebar recolhido */
 193:         body.sidebar-collapse .navbar-vertical {
 194:             width: 4.6rem;
 195:             z-index: 1021;
 196:         }
 197:         
 198:         body.sidebar-collapse .content {
 199:             margin-left: 4.6rem;
 200:         }
 201:         
 202:         body.sidebar-collapse .navbar-vertical .nav-link p,
 203:         body.sidebar-collapse .navbar-vertical .brand-text {
 204:             display: none;
 205:         }
 206:         
 207:         body.sidebar-collapse .navbar-vertical .nav-link {
 208:             padding: 12px;
 209:             margin: 4px 8px;
 210:             text-align: center;
 211:         }
 212:         
 213:         body.sidebar-collapse .navbar-vertical .nav-link i {
 214:             margin: 0;
 215:             font-size: 1.2rem;
 216:         }
 217:         
 218:         /* Transição suave ao recolher/expandir */
 219:         .navbar-vertical,
 220:         .content,
 221:         .nav-link,
 222:         .nav-link p,
 223:         .brand-text {
 224:             transition: all 0.3s ease-in-out;
 225:         }
 226:         
 227:         /* Estilo do botão push menu */
 228:         .push-menu-btn {
 229:             padding: 8px;
 230:             border-radius: 50%;
 231:             width: 40px;
 232:             height: 40px;
 233:             display: flex;
 234:             align-items: center;
 235:             justify-content: center;
 236:             background: var(--bg-secondary);
 237:             border: 1px solid var(--border-color);
 238:             color: var(--text-secondary);
 239:             cursor: pointer;
 240:             transition: all 0.3s;
 241:             margin-right: 1rem;
 242:         }
 243:         
 244:         .push-menu-btn:hover {
 245:             background: var(--hover-bg);
 246:             color: #fff;
 247:         }
 248:         
 249:         body {
 250:             background-color: var(--bg-primary);
 251:             color: var(--text-secondary);
 252:             min-height: 100vh;
 253:             transition: all 0.3s ease;
 254:         }
 255:         
 256:         .navbar-vertical {
 257:             width: 250px;
 258:             position: fixed;
 259:             top: 0;
 260:             left: 0;
 261:             bottom: 0;
 262:             background: var(--bg-secondary);
 263:             border-right: 1px solid var(--border-color);
 264:             z-index: 1000;
 265:             transition: all 0.3s ease;
 266:         }
 267:         
 268:         .content {
 269:             margin-left: 250px;
 270:             padding: 20px;
 271:             min-height: 100vh;
 272:             background-color: var(--bg-primary);
 273:             transition: all 0.3s ease;
 274:         }
 275:         
 276:         .navbar-brand {
 277:             padding: 1rem;
 278:             border-bottom: 1px solid var(--border-color);
 279:         }
 280:         
 281:         .brand-text {
 282:             font-size: 1.25rem;
 283:             font-weight: 500;
 284:         }
 285:         
 286:         .nav-link {
 287:             display: flex;
 288:             align-items: center;
 289:             padding: 0.8rem 1rem;
 290:             margin: 2px 15px;
 291:             border-radius: 8px;
 292:             transition: all 0.3s;
 293:             color: var(--text-secondary) !important;
 294:         }
 295:         
 296:         .nav-link i {
 297:             width: 1.5rem;
 298:             text-align: center;
 299:             margin-right: 0.5rem;
 300:             font-size: 1rem;
 301:         }
 302:         
 303:         .nav-link p {
 304:             margin: 0;
 305:             font-size: 0.9rem;
 306:             font-weight: 400;
 307:         }
 308:         
 309:         /* Ajustes quando o menu está recolhido */
 310:         body.sidebar-collapse .navbar-vertical {
 311:             width: 4.6rem;
 312:         }
 313:         
 314:         body.sidebar-collapse .content {
 315:             margin-left: 4.6rem;
 316:         }
 317:         
 318:         body.sidebar-collapse .navbar-vertical .nav-link {
 319:             padding: 0.8rem;
 320:             margin: 2px 8px;
 321:             justify-content: center;
 322:         }
 323:         
 324:         body.sidebar-collapse .navbar-vertical .nav-link i {
 325:             margin: 0;
 326:             width: auto;
 327:         }
 328:         
 329:         h2 {
 330:             font-size: 1.5rem;
 331:             font-weight: 500;
 332:             color: var(--text-primary);
 333:         }
 334:         
 335:         h3 {
 336:             font-size: 1.25rem;
 337:             font-weight: 500;
 338:         }
 339:         
 340:         .card-title {
 341:             font-size: 1rem;
 342:             font-weight: 500;
 343:             margin-bottom: 0;
 344:         }
 345:         
 346:         .card {
 347:             background: var(--bg-secondary);
 348:             border: 1px solid var(--border-color);
 349:             border-radius: 12px;
 350:         }
 351:         
 352:         .card-header {
 353:             background: transparent;
 354:             border-bottom: 1px solid var(--border-color);
 355:         }
 356:         
 357:         .small-box {
 358:             position: relative;
 359:             padding: 20px;
 360:             margin-bottom: 20px;
 361:             border-radius: 12px;
 362:             color: #fff;
 363:             transition: all 0.3s;
 364:             overflow: hidden;
 365:         }
 366:         
 367:         .small-box:hover {
 368:             transform: translateY(-5px);
 369:             box-shadow: 0 10px 20px rgba(0,0,0,0.1);
 370:         }
 371:         
 372:         .small-box .inner {
 373:             position: relative;
 374:             z-index: 2;
 375:         }
 376:         
 377:         .small-box .icon {
 378:             position: absolute;
 379:             top: 20px;
 380:             right: 20px;
 381:             font-size: 50px;
 382:             opacity: 0.3;
 383:             z-index: 1;
 384:         }
 385:         
 386:         .small-box h3 {
 387:             font-size: 36px;
 388:             margin: 0;
 389:             font-weight: bold;
 390:             color: #fff;
 391:         }
 392:         
 393:         .small-box p {
 394:             font-size: 14px;
 395:             margin: 5px 0 0;
 396:             color: rgba(255,255,255,0.8);
 397:         }
 398:         
 399:         .small-box .small-box-footer {
 400:             position: relative;
 401:             text-align: center;
 402:             padding: 3px 0;
 403:             color: rgba(255,255,255,0.8);
 404:             display: block;
 405:             background: rgba(0,0,0,0.1);
 406:             text-decoration: none;
 407:             margin: 15px -20px -20px;
 408:         }
 409:         
 410:         .small-box .small-box-footer:hover {
 411:             color: #fff;
 412:             background: rgba(0,0,0,0.2);
 413:         }
 414:         
 415:         .bg-info { background: #0ea5e9 !important; }
 416:         .bg-success { background: #22c55e !important; }
 417:         .bg-warning { background: #eab308 !important; }
 418:         .bg-danger { background: #ef4444 !important; }
 419:         
 420:         .table {
 421:             color: var(--text-secondary);
 422:         }
 423:         
 424:         .table thead th {
 425:             border-bottom-color: var(--border-color);
 426:             color: var(--text-primary);
 427:         }
 428:         
 429:         .table td {
 430:             border-bottom-color: var(--border-color);
 431:         }
 432:         
 433:         .theme-toggle {
 434:             padding: 8px;
 435:             border-radius: 50%;
 436:             width: 40px;
 437:             height: 40px;
 438:             display: flex;
 439:             align-items: center;
 440:             justify-content: center;
 441:             background: var(--bg-secondary);
 442:             border: 1px solid var(--border-color);
 443:             color: var(--text-secondary);
 444:             cursor: pointer;
 445:             transition: all 0.3s;
 446:         }
 447:         
 448:         .theme-toggle:hover {
 449:             background: var(--hover-bg);
 450:             color: #fff;
 451:         }
 452:         
 453:         /* Adiciona estilo para o sidebar recolhido */
 454:         body.sidebar-collapse .navbar-vertical {
 455:             width: 4.6rem;
 456:             z-index: 1021;
 457:         }
 458:         
 459:         body.sidebar-collapse .content {
 460:             margin-left: 4.6rem;
 461:         }
 462:         
 463:         body.sidebar-collapse .navbar-vertical .nav-link p,
 464:         body.sidebar-collapse .navbar-vertical .brand-text {
 465:             display: none;
 466:         }
 467:         
 468:         body.sidebar-collapse .navbar-vertical .nav-link {
 469:             padding: 12px;
 470:             margin: 4px 8px;
 471:             text-align: center;
 472:         }
 473:         
 474:         body.sidebar-collapse .navbar-vertical .nav-link i {
 475:             margin: 0;
 476:             font-size: 1.2rem;
 477:         }
 478:         
 479:         /* Transição suave ao recolher/expandir */
 480:         .navbar-vertical,
 481:         .content,
 482:         .nav-link,
 483:         .nav-link p,
 484:         .brand-text {
 485:             transition: all 0.3s ease-in-out;
 486:         }
 487:         
 488:         /* Estilo do botão push menu */
 489:         .push-menu-btn {
 490:             padding: 8px;
 491:             border-radius: 50%;
 492:             width: 40px;
 493:             height: 40px;
 494:             display: flex;
 495:             align-items: center;
 496:             justify-content: center;
 497:             background: var(--bg-secondary);
 498:             border: 1px solid var(--border-color);
 499:             color: var(--text-secondary);
 500:             cursor: pointer;
 501:             transition: all 0.3s;
 502:             margin-right: 1rem;
 503:         }
 504:         
 505:         .push-menu-btn:hover {
 506:             background: var(--hover-bg);
 507:             color: #fff;
 508:         }
 509:         
 510:         body {
 511:             padding-top: 56px;
 512:         }
 513:         .navbar {
 514:             box-shadow: 0 2px 4px rgba(0,0,0,.1);
 515:         }
 516:         .table-responsive {
 517:             margin-top: 20px;
 518:         }
 519:         .dataTables_wrapper {
 520:             padding: 20px;
 521:             background: #fff;
 522:             border-radius: 4px;
 523:             box-shadow: 0 0 10px rgba(0,0,0,.1);
 524:         }
 525:     </style>
 526: </head>
 527: <body class="hold-transition">
 528:     <!-- Menu Lateral -->
 529:     <nav class="navbar-vertical">
 530:         <div class="navbar-brand">
 531:             <a href="<?php echo BASE_URL; ?>" class="text-decoration-none">
 532:                 <h3 class="text-primary mb-0 brand-text">VelezCRM</h3>
 533:             </a>
 534:         </div>
 535:         
 536:         <ul class="nav flex-column mt-4">
 537:             <li class="nav-item">
 538:                 <a class="nav-link" href="<?php echo BASE_URL; ?>">
 539:                     <i class="fas fa-tachometer-alt me-2"></i>
 540:                     <p>Dashboard</p>
 541:                 </a>
 542:             </li>
 543:             <li class="nav-item">
 544:                 <a class="nav-link" href="<?php echo BASE_URL; ?>/clientes">
 545:                     <i class="fas fa-users me-2"></i>
 546:                     <p>Clientes</p>
 547:                 </a>
 548:             </li>
 549:             <li class="nav-item">
 550:                 <a class="nav-link" href="<?php echo BASE_URL; ?>/servicos">
 551:                     <i class="fas fa-cogs me-2"></i>
 552:                     <p>Serviços</p>
 553:                 </a>
 554:             </li>
 555:             <li class="nav-item">
 556:                 <a class="nav-link" href="<?php echo BASE_URL; ?>/contratos">
 557:                     <i class="fas fa-file-contract me-2"></i>
 558:                     <p>Contratos</p>
 559:                 </a>
 560:             </li>
 561:             <li class="nav-item">
 562:                 <a class="nav-link" href="<?php echo BASE_URL; ?>/kanban">
 563:                     <i class="fas fa-columns me-2"></i>
 564:                     <p>Kanban</p>
 565:                 </a>
 566:             </li>
 567:             <li class="nav-item">
 568:                 <a class="nav-link" href="<?php echo BASE_URL; ?>/configuracoes">
 569:                     <i class="fas fa-cog me-2"></i>
 570:                     <p>Configurações</p>
 571:                 </a>
 572:             </li>
 573:         </ul>
 574:     </nav>
 575: 
 576:     <!-- Conteúdo Principal -->
 577:     <div class="content">
 578:         <!-- Cabeçalho -->
 579:         <div class="d-flex justify-content-between align-items-center mb-4">
 580:             <div class="d-flex align-items-center">
 581:                 <!-- Botão Push Menu -->
 582:                 <button class="push-menu-btn" id="pushMenu">
 583:                     <i class="fas fa-bars"></i>
 584:                 </button>
 585:                 
 586:                 <h2 class="mb-0" style="color: var(--text-primary);">
 587:                     <?php echo $pageTitle ?? 'Dashboard'; ?>
 588:                 </h2>
 589:             </div>
 590:             
 591:             <div class="d-flex align-items-center gap-3">
 592:                 <!-- Botão de Tema -->
 593:                 <button class="theme-toggle" id="themeToggle">
 594:                     <i class="fas fa-sun"></i>
 595:                 </button>
 596:                 
 597:                 <!-- Notificações -->
 598:                 <div class="dropdown">
 599:                     <button class="theme-toggle" data-bs-toggle="dropdown">
 600:                         <i class="fas fa-bell"></i>
 601:                     </button>
 602:                     <div class="dropdown-menu dropdown-menu-end">
 603:                         <div class="dropdown-header">Notificações</div>
 604:                         <a class="dropdown-item" href="#">Nenhuma notificação</a>
 605:                     </div>
 606:                 </div>
 607:                 
 608:                 <!-- Usuário -->
 609:                 <div class="dropdown">
 610:                     <button class="theme-toggle" data-bs-toggle="dropdown">
 611:                         <i class="fas fa-user"></i>
 612:                     </button>
 613:                     <div class="dropdown-menu dropdown-menu-end">
 614:                         <div class="dropdown-header">Administrador</div>
 615:                         <a class="dropdown-item" href="#">Perfil</a>
 616:                         <a class="dropdown-item" href="#">Configurações</a>
 617:                         <div class="dropdown-divider"></div>
 618:                         <a class="dropdown-item" href="#">Sair</a>
 619:                     </div>
 620:                 </div>
 621:             </div>
 622:         </div>
 623: 
 624:         <!-- Mensagens de Erro -->
 625:         <?php if (isset($erro)): ?>
 626:             <div class="alert alert-danger alert-dismissible fade show" role="alert">
 627:                 <?php echo $erro; ?>
 628:                 <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
 629:             </div>
 630:         <?php endif; ?>
 631: 
 632:         <!-- Conteúdo da Página -->
 633:         <?php echo $content; ?>
 634:     </div>
 635: 
 636:     <!-- Scripts -->
 637:     <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
 638:     <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
 639:     <script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>
 640:     <script src="https://cdn.datatables.net/1.13.4/js/dataTables.bootstrap5.min.js"></script>
 641:     <script>
 642:         // Ativa o item do menu correspondente à página atual
 643:         document.addEventListener('DOMContentLoaded', function() {
 644:             const currentPath = window.location.pathname;
 645:             const menuItems = document.querySelectorAll('.nav-link');
 646:             
 647:             menuItems.forEach(item => {
 648:                 if (currentPath.includes(item.getAttribute('href'))) {
 649:                     item.classList.add('active');
 650:                 }
 651:             });
 652:             
 653:             // Gerenciamento do tema
 654:             const themeToggle = document.getElementById('themeToggle');
 655:             const html = document.documentElement;
 656:             const icon = themeToggle.querySelector('i');
 657:             
 658:             // Carrega o tema salvo
 659:             const savedTheme = localStorage.getItem('theme') || 'dark';
 660:             html.setAttribute('data-bs-theme', savedTheme);
 661:             updateThemeIcon(savedTheme);
 662:             
 663:             themeToggle.addEventListener('click', () => {
 664:                 const currentTheme = html.getAttribute('data-bs-theme');
 665:                 const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
 666:                 
 667:                 html.setAttribute('data-bs-theme', newTheme);
 668:                 localStorage.setItem('theme', newTheme);
 669:                 updateThemeIcon(newTheme);
 670:             });
 671:             
 672:             function updateThemeIcon(theme) {
 673:                 icon.className = theme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
 674:             }
 675:             
 676:             // Funcionalidade do Push Menu
 677:             const pushMenu = document.getElementById('pushMenu');
 678:             const body = document.body;
 679:             
 680:             // Carrega o estado do sidebar
 681:             const sidebarState = localStorage.getItem('sidebar-collapsed') === 'true';
 682:             if (sidebarState) {
 683:                 body.classList.add('sidebar-collapse');
 684:             }
 685:             
 686:             pushMenu.addEventListener('click', function() {
 687:                 body.classList.toggle('sidebar-collapse');
 688:                 // Salva o estado do sidebar
 689:                 localStorage.setItem('sidebar-collapsed', body.classList.contains('sidebar-collapse'));
 690:             });
 691:         });
 692:     </script>
 693:     <script>
 694:         const BASE_URL = '<?php echo BASE_URL; ?>';
 695:     </script>
 696: </body>
 697: </html>

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\views\servicos\form.php ###

   1: <?php if (isset($flash)): ?>
   2:     <div class="alert alert-<?php echo $flash['tipo']; ?> alert-dismissible fade show" role="alert">
   3:         <?php echo $flash['mensagem']; ?>
   4:         <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
   5:     </div>
   6: <?php endif; ?>
   7: 
   8: <div class="card">
   9:     <div class="card-body">
  10:         <h2><?php echo isset($servico) ? 'Editar Serviço' : 'Novo Serviço'; ?></h2>
  11:         <form action="<?php echo BASE_URL; ?>/servicos/salvar" method="POST">
  12:             <input type="hidden" name="id" value="<?php echo isset($servico) ? $servico['id'] : ''; ?>">
  13:             <div class="mb-3">
  14:                 <label for="nome" class="form-label">Nome *</label>
  15:                 <input type="text" class="form-control" id="nome" name="nome" required value="<?php echo isset($servico) ? htmlspecialchars($servico['nome']) : ''; ?>">
  16:             </div>
  17:             <div class="mb-3">
  18:                 <label for="descricao" class="form-label">Descrição</label>
  19:                 <textarea class="form-control" id="descricao" name="descricao" rows="3"><?php echo isset($servico) ? htmlspecialchars($servico['descricao']) : ''; ?></textarea>
  20:             </div>
  21:             <div class="mb-3">
  22:                 <label for="valor" class="form-label">Valor *</label>
  23:                 <input type="number" class="form-control" id="valor" name="valor" required value="<?php echo isset($servico) ? $servico['valor'] : ''; ?>" step="0.01">
  24:             </div>
  25:             <div class="mb-3">
  26:                 <label for="status" class="form-label">Status</label>
  27:                 <select name="status" id="status" class="form-select">
  28:                     <option value="ativo" <?php echo (isset($servico) && $servico['status'] == 'ativo') ? 'selected' : ''; ?>>Ativo</option>
  29:                     <option value="inativo" <?php echo (isset($servico) && $servico['status'] == 'inativo') ? 'selected' : ''; ?>>Inativo</option>
  30:                 </select>
  31:             </div>
  32:             <button type="submit" class="btn btn-primary">
  33:                 <i class="fas fa-save me-2"></i>Salvar
  34:             </button>
  35:             <a href="<?php echo BASE_URL; ?>/servicos" class="btn btn-secondary">Voltar</a>
  36:         </form>
  37:     </div>
  38: </div>

----------------------------------

### Arquivo: C:\xampp\htdocs\velezcrm\views\servicos\index.php ###

   1: <?php if (isset($flash)): ?>
   2:     <div class="alert alert-<?php echo $flash['tipo']; ?> alert-dismissible fade show" role="alert">
   3:         <?php echo $flash['mensagem']; ?>
   4:         <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
   5:     </div>
   6: <?php endif; ?>
   7: 
   8: <div class="d-flex justify-content-between align-items-center mb-4">
   9:     <h2>Lista de Serviços</h2>
  10:     <a href="<?php echo BASE_URL; ?>/servicos/novo" class="btn btn-primary">
  11:         <i class="fas fa-plus me-2"></i>Novo Serviço
  12:     </a>
  13: </div>
  14: 
  15: <div class="card">
  16:     <div class="card-body">
  17:         <div class="table-responsive">
  18:             <table class="table table-striped table-hover">
  19:                 <thead>
  20:                     <tr>
  21:                         <th>ID</th>
  22:                         <th>Nome</th>
  23:                         <th>Descrição</th>
  24:                         <th>Valor</th>
  25:                         <th>Status</th>
  26:                         <th class="text-center">Ações</th>
  27:                     </tr>
  28:                 </thead>
  29:                 <tbody>
  30:                     <?php if (empty($servicos)): ?>
  31:                         <tr>
  32:                             <td colspan="6" class="text-center">Nenhum serviço cadastrado.</td>
  33:                         </tr>
  34:                     <?php else: ?>
  35:                         <?php foreach ($servicos as $servico): ?>
  36:                             <tr>
  37:                                 <td><?php echo $servico['id']; ?></td>
  38:                                 <td><?php echo htmlspecialchars($servico['nome']); ?></td>
  39:                                 <td><?php echo htmlspecialchars($servico['descricao']); ?></td>
  40:                                 <td>R$ <?php echo number_format($servico['valor'], 2, ',', '.'); ?></td>
  41:                                 <td>
  42:                                     <span class="badge bg-<?php echo $servico['status'] == 'ativo' ? 'success' : 'danger'; ?>">
  43:                                         <?php echo ucfirst($servico['status']); ?>
  44:                                     </span>
  45:                                 </td>
  46:                                 <td class="text-center">
  47:                                     <div class="btn-group">
  48:                                         <a href="<?php echo BASE_URL; ?>/servicos/editar/<?php echo $servico['id']; ?>" class="btn btn-sm btn-info" title="Editar">
  49:                                             <i class="fas fa-edit"></i>
  50:                                         </a>
  51:                                         <a href="<?php echo BASE_URL; ?>/servicos/excluir/<?php echo $servico['id']; ?>" class="btn btn-sm btn-danger" onclick="return confirm('Tem certeza que deseja excluir este serviço?')" title="Excluir">
  52:                                             <i class="fas fa-trash"></i>
  53:                                         </a>
  54:                                     </div>
  55:                                 </td>
  56:                             </tr>
  57:                         <?php endforeach; ?>
  58:                     <?php endif; ?>
  59:                 </tbody>
  60:             </table>
  61:         </div>
  62:     </div>
  63: </div>

----------------------------------

